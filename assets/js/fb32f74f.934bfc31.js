"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[5795],{5570:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"components/ui/button","title":"Button Component","description":"A versatile button component that supports multiple variants, sizes, and icon integration for triggering actions in forms and user interfaces.","source":"@site/docs/components/ui/button.md","sourceDirName":"components/ui","slug":"/components/ui/button","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/button","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/ui/button.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Button"},"sidebar":"components","previous":{"title":"Badge","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge"},"next":{"title":"Calendar","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar"}}');var s=t(4848),o=t(8453);const r={sidebar_label:"Button"},l="Button Component",a={},d=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Variants",id:"variants",level:3},{value:"Sizes",id:"sizes",level:3},{value:"With Icons",id:"with-icons",level:3},{value:"As Link",id:"as-link",level:3},{value:"Disabled State",id:"disabled-state",level:3},{value:"Props",id:"props",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Forms",id:"integration-with-forms",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"button-component",children:"Button Component"})}),"\n",(0,s.jsx)(e.p,{children:"A versatile button component that supports multiple variants, sizes, and icon integration for triggering actions in forms and user interfaces."}),"\n",(0,s.jsx)(e.h2,{id:"import",children:"Import"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Button, buttonVariants } from '@/components/ui/button';\n"})}),"\n",(0,s.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(e.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"<Button>Click me</Button>\n"})}),"\n",(0,s.jsx)(e.h3,{id:"variants",children:"Variants"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'<Button variant="default">Default</Button>\n<Button variant="destructive">Destructive</Button>\n<Button variant="outline">Outline</Button>\n<Button variant="secondary">Secondary</Button>\n<Button variant="ghost">Ghost</Button>\n<Button variant="link">Link</Button>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"sizes",children:"Sizes"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'<Button size="default">Default Size</Button>\n<Button size="sm">Small</Button>\n<Button size="lg">Large</Button>\n<Button size="icon">Icon</Button>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"with-icons",children:"With Icons"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { Plus, ArrowRight } from \'lucide-react\';\n\n// Icon on the left (default)\n<Button icon={Plus}>Add Item</Button>\n\n// Icon on the right\n<Button icon={ArrowRight} iconPosition="right">Next</Button>\n\n// Icon-only button\n<Button size="icon" icon={Plus} aria-label="Add item" />\n'})}),"\n",(0,s.jsx)(e.h3,{id:"as-link",children:"As Link"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import Link from 'next/link';\n\n// Option 1: Using asChild prop\n<Button asChild>\n  <Link href=\"/somewhere\">Go to Somewhere</Link>\n</Button>\n\n// Option 2: Using buttonVariants helper\n<Link href=\"/somewhere\" className={buttonVariants({ variant: 'outline' })}>\n  Go to Somewhere\n</Link>\n"})}),"\n",(0,s.jsx)(e.h3,{id:"disabled-state",children:"Disabled State"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"<Button disabled>Cannot Click</Button>\n"})}),"\n",(0,s.jsx)(e.h2,{id:"props",children:"Props"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Prop"}),(0,s.jsx)(e.th,{children:"Type"}),(0,s.jsx)(e.th,{children:"Default"}),(0,s.jsx)(e.th,{children:"Description"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"variant"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link'"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"'default'"})}),(0,s.jsx)(e.td,{children:"Controls the visual style of the button"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"size"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"'default' | 'sm' | 'lg' | 'icon'"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"'default'"})}),(0,s.jsx)(e.td,{children:"Controls the size of the button"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"asChild"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"boolean"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"false"})}),(0,s.jsx)(e.td,{children:"When true, the component will render its child rather than a button element"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"icon"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"LucideIcon"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"undefined"})}),(0,s.jsx)(e.td,{children:"Optional Lucide icon component to display"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"iconPosition"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"'left' | 'right'"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"'left'"})}),(0,s.jsx)(e.td,{children:"Controls the position of the icon relative to text"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"children"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"ReactNode"})}),(0,s.jsx)(e.td,{children:"-"}),(0,s.jsx)(e.td,{children:"Content to display inside the button"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"className"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"string"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"''"})}),(0,s.jsx)(e.td,{children:"Additional CSS classes to apply"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"disabled"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"boolean"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"false"})}),(0,s.jsx)(e.td,{children:"When true, disables button interactions and applies disabled styling"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"...props"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"ButtonHTMLAttributes<HTMLButtonElement>"})}),(0,s.jsx)(e.td,{children:"-"}),(0,s.jsx)(e.td,{children:"All other props are passed to the underlying button element"})]})]})]}),"\n",(0,s.jsx)(e.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { LucideIcon } from 'lucide-react';\nimport { VariantProps } from 'class-variance-authority';\n\n// Button variants definition (exported as buttonVariants)\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n// Button component props\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  icon?: LucideIcon;\n  iconPosition?: 'left' | 'right';\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"customization",children:"Customization"}),"\n",(0,s.jsx)(e.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,s.jsx)(e.p,{children:"The Button component can be customized using the following approaches:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["Using the ",(0,s.jsx)(e.code,{children:"className"})," prop to add additional Tailwind classes:"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'<Button className="w-full rounded-full bg-gradient-to-r from-blue-500 to-purple-500">\n  Custom Style\n</Button>\n'})}),"\n",(0,s.jsxs)(e.ol,{start:"2",children:["\n",(0,s.jsx)(e.li,{children:"Extending the buttonVariants with new options:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"// In your own button customization file\nimport { buttonVariants } from '@/components/ui/button';\nimport { cva } from 'class-variance-authority';\n\nexport const customButtonVariants = cva(buttonVariants(), {\n  variants: {\n    variant: {\n      primary: 'bg-blue-600 text-white hover:bg-blue-700',\n      success: 'bg-green-600 text-white hover:bg-green-700',\n    },\n    size: {\n      xl: 'h-14 px-10 py-3 text-lg rounded-xl',\n    },\n  },\n});\n"})}),"\n",(0,s.jsx)(e.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Button, ButtonProps } from '@/components/ui/button';\nimport { Loader2 } from 'lucide-react';\n\ninterface LoadingButtonProps extends ButtonProps {\n  isLoading?: boolean;\n  loadingText?: string;\n}\n\nexport function LoadingButton({ \n  isLoading = false,\n  loadingText = \"Loading...\",\n  disabled,\n  children,\n  ...props \n}: LoadingButtonProps) {\n  return (\n    <Button \n      disabled={isLoading || disabled}\n      {...props}\n    >\n      {isLoading ? (\n        <>\n          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          {loadingText}\n        </>\n      ) : (\n        children\n      )}\n    </Button>\n  );\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(e.h3,{id:"integration-with-forms",children:"Integration with Forms"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormField, FormItem, FormLabel, FormControl } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\n\nconst formSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n});\n\nexport function LoginForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    // Handle form submission\n    console.log(values);\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input placeholder=\"email@example.com\" {...field} />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <Input type=\"password\" {...field} />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Sign In</Button>\n      </form>\n    </Form>\n  );\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { Card, CardHeader, CardContent, CardFooter } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Avatar, AvatarImage, AvatarFallback } from \'@/components/ui/avatar\';\n\nexport function UserCard({ user }) {\n  return (\n    <Card>\n      <CardHeader className="flex flex-row gap-4 items-center">\n        <Avatar>\n          <AvatarImage src={user.avatarUrl} alt={user.name} />\n          <AvatarFallback>{user.initials}</AvatarFallback>\n        </Avatar>\n        <div>\n          <h3 className="font-semibold">{user.name}</h3>\n          <p className="text-sm text-muted-foreground">{user.role}</p>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <p>{user.bio}</p>\n      </CardContent>\n      <CardFooter className="flex justify-between">\n        <Button variant="outline">View Profile</Button>\n        <Button>Connect</Button>\n      </CardFooter>\n    </Card>\n  );\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,s.jsx)(e.p,{children:"The Button component can be made responsive using Tailwind's responsive modifiers:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'// Full width on mobile, auto width on larger screens\n<Button className="w-full md:w-auto">\n  Responsive Button\n</Button>\n\n// Different sizes on different breakpoints\n<Button className="h-8 px-2 sm:h-9 sm:px-3 md:h-10 md:px-4 lg:h-11 lg:px-8">\n  Responsive Size\n</Button>\n'})}),"\n",(0,s.jsx)(e.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,s.jsx)(e.p,{children:"The Button component follows these accessibility best practices:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Uses native ",(0,s.jsx)(e.code,{children:"<button>"})," element semantics by default"]}),"\n",(0,s.jsx)(e.li,{children:"Supports keyboard navigation and focus states with visible focus rings"}),"\n",(0,s.jsx)(e.li,{children:"Includes proper disabled states that remove the element from tab order"}),"\n",(0,s.jsx)(e.li,{children:"Maintains proper color contrast in all variants"}),"\n",(0,s.jsx)(e.li,{children:"Supports ARIA attributes (aria-label, aria-pressed, etc.)"}),"\n",(0,s.jsxs)(e.li,{children:["When used as icons-only, requires an ",(0,s.jsx)(e.code,{children:"aria-label"})," for screen readers"]}),"\n",(0,s.jsxs)(e.li,{children:["Uses Radix UI's Slot primitive for the ",(0,s.jsx)(e.code,{children:"asChild"})," functionality, preserving accessibility"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(e.p,{children:"The component:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Is built using Class Variance Authority (CVA) for type-safe variant management"}),"\n",(0,s.jsx)(e.li,{children:"Supports Lucide icons with consistent styling and positioning"}),"\n",(0,s.jsx)(e.li,{children:"Handles icons with appropriate sizing and pointer events configuration"}),"\n",(0,s.jsxs)(e.li,{children:["Uses the Radix UI Slot primitive when ",(0,s.jsx)(e.code,{children:"asChild"})," is true to preserve props"]}),"\n",(0,s.jsx)(e.li,{children:"Customizes focus states for keyboard navigation"}),"\n",(0,s.jsx)(e.li,{children:"Applies appropriate transition effects"}),"\n",(0,s.jsxs)(e.li,{children:["Includes a reusable ",(0,s.jsx)(e.code,{children:"buttonVariants"})," helper function for consistency"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Missing type for form submissions"}),": Remember to add ",(0,s.jsx)(e.code,{children:'type="submit"'})," for buttons that submit forms"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Icon-only buttons without labels"}),": Always add an ",(0,s.jsx)(e.code,{children:"aria-label"})," for icon-only buttons to maintain accessibility"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Nesting interactive elements"}),": When using ",(0,s.jsx)(e.code,{children:"asChild"})," with an interactive element like ",(0,s.jsx)(e.code,{children:"<a>"})," or ",(0,s.jsx)(e.code,{children:"<Link>"}),", avoid nesting other interactive elements inside"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Overriding styles"}),": Be careful when adding custom classes that might conflict with the component's base styles"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Next.js client components"}),": The Button component might need to be used within a client component when performing client-side actions"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"// Example test for the Button component\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Button } from '@/components/ui/button';\nimport { Plus } from 'lucide-react';\n\ndescribe('Button', () => {\n  it('renders correctly with default props', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument();\n  });\n  \n  it('handles clicks properly', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    fireEvent.click(screen.getByRole('button', { name: /click me/i }));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n  \n  it('renders with an icon', () => {\n    render(<Button icon={Plus}>Add Item</Button>);\n    expect(screen.getByRole('button', { name: /add item/i })).toBeInTheDocument();\n    // Check for SVG icon presence\n    expect(screen.getByRole('button').querySelector('svg')).toBeInTheDocument();\n  });\n  \n  it('is properly disabled', () => {\n    const handleClick = jest.fn();\n    render(<Button disabled onClick={handleClick}>Disabled</Button>);\n    const button = screen.getByRole('button', { name: /disabled/i });\n    expect(button).toBeDisabled();\n    fireEvent.click(button);\n    expect(handleClick).not.toHaveBeenCalled();\n  });\n});\n"})}),"\n",(0,s.jsx)(e.h2,{id:"related-components",children:"Related Components"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/form",children:"Form"}),": Often used with Button for form submissions"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog",children:"Dialog"}),": Uses Button for trigger and action buttons"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu",children:"DropdownMenu"}),": Uses Button styling for dropdown triggers"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>l});var i=t(6540);const s={},o=i.createContext(s);function r(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);