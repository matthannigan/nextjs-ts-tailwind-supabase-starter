"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7463],{2768:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"components/forms/checkbox","title":"Checkbox Component","description":"A control component that allows users to toggle between checked and unchecked states, built using Radix UI\'s Checkbox primitive with appropriate styling and accessibility features.","source":"@site/docs/components/forms/checkbox.md","sourceDirName":"components/forms","slug":"/components/forms/checkbox","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/forms/checkbox.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Checkbox"},"sidebar":"components","previous":{"title":"Form Components","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/"},"next":{"title":"Form","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/form"}}');var o=t(4848),i=t(8453);const c={sidebar_label:"Checkbox"},l="Checkbox Component",a={},r=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"With Label",id:"with-label",level:3},{value:"Checked State",id:"checked-state",level:3},{value:"Disabled State",id:"disabled-state",level:3},{value:"Props",id:"props",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Forms",id:"integration-with-forms",level:3},{value:"Multiple Checkboxes with React Hook Form",id:"multiple-checkboxes-with-react-hook-form",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Indeterminate State",id:"indeterminate-state",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"checkbox-component",children:"Checkbox Component"})}),"\n",(0,o.jsx)(n.p,{children:"A control component that allows users to toggle between checked and unchecked states, built using Radix UI's Checkbox primitive with appropriate styling and accessibility features."}),"\n",(0,o.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Checkbox } from '@/components/ui/checkbox';\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<Checkbox />\n"})}),"\n",(0,o.jsx)(n.h3,{id:"with-label",children:"With Label"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { Label } from "@/components/ui/label";\n\n<div className="flex items-center space-x-2">\n  <Checkbox id="terms" />\n  <Label htmlFor="terms">Accept terms and conditions</Label>\n</div>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"checked-state",children:"Checked State"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'// Controlled component\nimport { useState } from "react";\n\nfunction ControlledCheckbox() {\n  const [checked, setChecked] = useState(false);\n  \n  return (\n    <Checkbox \n      checked={checked}\n      onCheckedChange={setChecked}\n    />\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"disabled-state",children:"Disabled State"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<Checkbox disabled />\n\n<div className="flex items-center space-x-2">\n  <Checkbox id="disabled" disabled />\n  <Label htmlFor="disabled" className="text-muted-foreground">\n    Disabled option\n  </Label>\n</div>\n'})}),"\n",(0,o.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Prop"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"checked"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boolean | 'indeterminate'"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"The controlled checked state of the checkbox"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"defaultChecked"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boolean | 'indeterminate'"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"The default checked state when uncontrolled"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"onCheckedChange"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"(checked: boolean | 'indeterminate') => void"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Event handler called when the checked state changes"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"disabled"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boolean"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"false"})}),(0,o.jsx)(n.td,{children:"When true, prevents user interaction and applies disabled styling"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"required"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boolean"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"false"})}),(0,o.jsx)(n.td,{children:"When true, indicates the input must have a value"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"name"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"The name of the checkbox for form submission"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"value"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"The value of the checkbox for form submission"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"id"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"The id of the checkbox, used with a label's htmlFor prop"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"className"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"''"})}),(0,o.jsx)(n.td,{children:"Additional CSS classes to apply"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"...props"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>"})}),(0,o.jsx)(n.td,{children:"-"}),(0,o.jsx)(n.td,{children:"All other props are passed to the underlying Radix UI Checkbox component"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import * as React from "react"\nimport * as CheckboxPrimitive from "@radix-ui/react-checkbox"\n\n// Component type is inherited from Radix UI\'s Checkbox\ntype CheckboxProps = React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>;\n\n// Usage with TypeScript\nconst Example: React.FC = () => {\n  // Strong typing for checked state\n  const [checked, setChecked] = React.useState<boolean | \'indeterminate\'>(false);\n  \n  return (\n    <Checkbox \n      checked={checked}\n      onCheckedChange={(state) => setChecked(state)} \n    />\n  );\n};\n'})}),"\n",(0,o.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,o.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,o.jsx)(n.p,{children:"The Checkbox component can be customized using the following approaches:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Using the ",(0,o.jsx)(n.code,{children:"className"})," prop to add additional Tailwind classes:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<Checkbox className="h-6 w-6 rounded-full border-green-500 data-[state=checked]:bg-green-500" />\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Creating a custom-styled checkbox:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<Checkbox \n  className={cn(\n    "border-primary-400 data-[state=checked]:bg-primary-600",\n    "h-5 w-5 rounded", \n    "focus-visible:ring-primary-500"\n  )} \n/>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\n\ninterface CustomCheckboxProps extends React.ComponentPropsWithoutRef<typeof Checkbox> {\n  label: string;\n  labelClassName?: string;\n}\n\nexport function CustomCheckbox({ \n  label, \n  labelClassName,\n  className,\n  id,\n  ...props \n}: CustomCheckboxProps) {\n  const checkboxId = id || React.useId();\n  \n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Checkbox \n        id={checkboxId} \n        className={className}\n        {...props} \n      />\n      <Label \n        htmlFor={checkboxId} \n        className={cn(\"text-sm font-medium\", labelClassName)}\n      >\n        {label}\n      </Label>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{id:"integration-with-forms",children:"Integration with Forms"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { useForm } from \'react-hook-form\';\nimport { z } from \'zod\';\nimport { zodResolver } from \'@hookform/resolvers/zod\';\nimport { Button } from \'@/components/ui/button\';\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormDescription, FormMessage } from \'@/components/ui/form\';\nimport { Checkbox } from \'@/components/ui/checkbox\';\n\nconst formSchema = z.object({\n  marketing: z.boolean().default(false).optional(),\n  terms: z.boolean().refine(value => value === true, {\n    message: "You must accept the terms and conditions",\n  }),\n});\n\nexport function CheckboxForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      marketing: false,\n      terms: false,\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    console.log(values);\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">\n        <FormField\n          control={form.control}\n          name="marketing"\n          render={({ field }) => (\n            <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">\n              <FormControl>\n                <Checkbox\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n              <div className="space-y-1 leading-none">\n                <FormLabel>\n                  Marketing emails\n                </FormLabel>\n                <FormDescription>\n                  Receive emails about our products and updates.\n                </FormDescription>\n              </div>\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name="terms"\n          render={({ field }) => (\n            <FormItem className="flex flex-row items-start space-x-3 space-y-0">\n              <FormControl>\n                <Checkbox\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n              <div className="space-y-1 leading-none">\n                <FormLabel>\n                  Accept terms and conditions\n                </FormLabel>\n                <FormMessage />\n              </div>\n            </FormItem>\n          )}\n        />\n        <Button type="submit">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"multiple-checkboxes-with-react-hook-form",children:"Multiple Checkboxes with React Hook Form"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { useForm, Controller } from \'react-hook-form\';\nimport { Checkbox } from \'@/components/ui/checkbox\';\nimport { Label } from \'@/components/ui/label\';\nimport { Button } from \'@/components/ui/button\';\n\ntype FormValues = {\n  hobbies: string[];\n};\n\nconst hobbies = [\n  { id: "reading", label: "Reading" },\n  { id: "sports", label: "Sports" },\n  { id: "cooking", label: "Cooking" },\n  { id: "gaming", label: "Gaming" },\n];\n\nexport function MultipleCheckboxes() {\n  const { handleSubmit, control, setValue, watch } = useForm<FormValues>({\n    defaultValues: {\n      hobbies: [],\n    },\n  });\n\n  const watchedHobbies = watch("hobbies");\n\n  const toggleHobby = (hobby: string, checked: boolean) => {\n    const currentHobbies = watchedHobbies || [];\n    const updatedHobbies = checked\n      ? [...currentHobbies, hobby]\n      : currentHobbies.filter(h => h !== hobby);\n    \n    setValue("hobbies", updatedHobbies);\n  };\n\n  const onSubmit = (data: FormValues) => {\n    console.log(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">\n      <div className="space-y-2">\n        <h3 className="text-lg font-medium">Select your hobbies:</h3>\n        <div className="grid grid-cols-2 gap-2">\n          {hobbies.map((hobby) => (\n            <div key={hobby.id} className="flex items-center space-x-2">\n              <Controller\n                control={control}\n                name="hobbies"\n                render={({ field }) => (\n                  <Checkbox\n                    id={hobby.id}\n                    checked={watchedHobbies?.includes(hobby.id)}\n                    onCheckedChange={(checked) => \n                      toggleHobby(hobby.id, checked as boolean)\n                    }\n                  />\n                )}\n              />\n              <Label htmlFor={hobby.id}>{hobby.label}</Label>\n            </div>\n          ))}\n        </div>\n      </div>\n      <Button type="submit">Submit</Button>\n    </form>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { Card, CardHeader, CardTitle, CardContent, CardFooter } from \'@/components/ui/card\';\nimport { Checkbox } from \'@/components/ui/checkbox\';\nimport { Label } from \'@/components/ui/label\';\nimport { Button } from \'@/components/ui/button\';\n\nexport function PrivacySettingsCard() {\n  return (\n    <Card className="w-full max-w-md">\n      <CardHeader>\n        <CardTitle>Privacy Settings</CardTitle>\n      </CardHeader>\n      <CardContent className="space-y-4">\n        <div className="space-y-4">\n          <div className="flex items-start space-x-3">\n            <Checkbox id="cookies" defaultChecked />\n            <div className="grid gap-1.5 leading-none">\n              <Label htmlFor="cookies" className="text-sm font-medium leading-none">\n                Essential Cookies\n              </Label>\n              <p className="text-sm text-muted-foreground">\n                Required for the website to function properly.\n              </p>\n            </div>\n          </div>\n          <div className="flex items-start space-x-3">\n            <Checkbox id="analytics" />\n            <div className="grid gap-1.5 leading-none">\n              <Label htmlFor="analytics" className="text-sm font-medium leading-none">\n                Analytics Cookies\n              </Label>\n              <p className="text-sm text-muted-foreground">\n                Help us improve our website by collecting anonymous usage data.\n              </p>\n            </div>\n          </div>\n          <div className="flex items-start space-x-3">\n            <Checkbox id="marketing" />\n            <div className="grid gap-1.5 leading-none">\n              <Label htmlFor="marketing" className="text-sm font-medium leading-none">\n                Marketing Cookies\n              </Label>\n              <p className="text-sm text-muted-foreground">\n                Allow personalized advertisements based on your browsing activity.\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button className="w-full">Save Preferences</Button>\n      </CardFooter>\n    </Card>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"indeterminate-state",children:"Indeterminate State"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\n\nexport function IndeterminateCheckbox() {\n  const [parent, setParent] = useState<boolean | 'indeterminate'>(false);\n  const [childChecked, setChildChecked] = useState({\n    child1: false,\n    child2: false,\n    child3: false,\n  });\n  \n  // Update parent state based on children\n  const updateParentState = (newChildState: typeof childChecked) => {\n    const checkedCount = Object.values(newChildState).filter(Boolean).length;\n    \n    if (checkedCount === 0) {\n      setParent(false);\n    } else if (checkedCount === Object.keys(newChildState).length) {\n      setParent(true);\n    } else {\n      setParent('indeterminate');\n    }\n  };\n\n  // Handle parent checkbox change\n  const handleParentChange = (checked: boolean | 'indeterminate') => {\n    const isChecked = checked === true;\n    setParent(isChecked);\n    \n    const newChildState = {\n      child1: isChecked,\n      child2: isChecked,\n      child3: isChecked,\n    };\n    \n    setChildChecked(newChildState);\n  };\n\n  // Handle child checkbox change\n  const handleChildChange = (key: keyof typeof childChecked, checked: boolean) => {\n    const newChildState = {\n      ...childChecked,\n      [key]: checked,\n    };\n    \n    setChildChecked(newChildState);\n    updateParentState(newChildState);\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox \n          id=\"parent\" \n          checked={parent} \n          onCheckedChange={handleParentChange}\n        />\n        <Label htmlFor=\"parent\" className=\"font-medium\">\n          Select all items\n        </Label>\n      </div>\n      <div className=\"space-y-2 ml-6\">\n        {Object.entries(childChecked).map(([key, checked]) => (\n          <div key={key} className=\"flex items-center space-x-2\">\n            <Checkbox \n              id={key} \n              checked={checked} \n              onCheckedChange={(state) => \n                handleChildChange(key as keyof typeof childChecked, state as boolean)\n              }\n            />\n            <Label htmlFor={key}>Item {key.replace('child', '')}</Label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,o.jsx)(n.p,{children:"The Checkbox component maintains its functionality across all device sizes. You may want to adjust the tap/click target area on mobile devices:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'// Larger touch target on mobile\n<div className="flex items-center space-x-2 sm:space-x-3">\n  <Checkbox id="mobile-friendly" className="h-4 w-4 sm:h-5 sm:w-5" />\n  <Label \n    htmlFor="mobile-friendly" \n    className="text-sm sm:text-base"\n  >\n    Mobile-friendly checkbox\n  </Label>\n</div>\n'})}),"\n",(0,o.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,o.jsx)(n.p,{children:"The Checkbox component follows these accessibility best practices:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Uses Radix UI's Checkbox primitive which implements the ",(0,o.jsx)(n.a,{href:"https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/",children:"WAI-ARIA Checkbox pattern"})]}),"\n",(0,o.jsx)(n.li,{children:"Supports keyboard navigation: can be focused using Tab and toggled with Space"}),"\n",(0,o.jsx)(n.li,{children:"Implements proper focused states with visible focus rings"}),"\n",(0,o.jsx)(n.li,{children:"Uses appropriate ARIA attributes (aria-checked, aria-required, aria-disabled)"}),"\n",(0,o.jsx)(n.li,{children:"When used with Label, associates the label with the checkbox using htmlFor/id"}),"\n",(0,o.jsx)(n.li,{children:"Supports form states such as validation and disabled states"}),"\n",(0,o.jsx)(n.li,{children:"Maintains appropriate color contrast between backgrounds and borders"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,o.jsx)(n.p,{children:"The component:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Is built on top of the Radix UI's Checkbox primitive for accessibility"}),"\n",(0,o.jsx)(n.li,{children:"Uses Lucide React's Check icon for the checkmark"}),"\n",(0,o.jsx)(n.li,{children:"Applies appropriate styling for all states: default, checked, disabled, and focus"}),"\n",(0,o.jsx)(n.li,{children:"Includes hover effects and proper visual feedback"}),"\n",(0,o.jsx)(n.li,{children:"Works with both controlled and uncontrolled patterns"}),"\n",(0,o.jsx)(n.li,{children:"Implements proper indeterminate state support"}),"\n",(0,o.jsxs)(n.li,{children:["Uses the utility function ",(0,o.jsx)(n.code,{children:"cn"})," from our project for composing class names"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Missing htmlFor/id association"}),": Remember to associate labels with checkboxes using htmlFor/id pairs for accessibility"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Forgetting indeterminate state handling"}),': When implementing "Select All" checkboxes, make sure to handle the indeterminate state']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Missing onCheckedChange handler in controlled mode"}),": When using as a controlled component, always provide an onCheckedChange handler"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Array management with multiple checkboxes"}),": When implementing multiple checkboxes with a shared value array, be careful with array mutations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Form integration complexity"}),": Use FormField and Controller from react-hook-form for cleaner integration"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Next.js client components"}),': The Checkbox component uses client-side state, so make sure to use "use client" directive in components that use it']}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// Example test for the Checkbox component\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\n\ndescribe('Checkbox', () => {\n  it('renders correctly with default props', () => {\n    render(<Checkbox />);\n    expect(screen.getByRole('checkbox')).toBeInTheDocument();\n  });\n  \n  it('handles check state properly', () => {\n    const handleCheckedChange = jest.fn();\n    render(\n      <Checkbox\n        onCheckedChange={handleCheckedChange}\n      />\n    );\n    \n    const checkbox = screen.getByRole('checkbox');\n    expect(checkbox).not.toBeChecked();\n    \n    fireEvent.click(checkbox);\n    expect(handleCheckedChange).toHaveBeenCalledWith(true);\n  });\n  \n  it('renders with label correctly', () => {\n    render(\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox id=\"test-checkbox\" />\n        <Label htmlFor=\"test-checkbox\">Test Label</Label>\n      </div>\n    );\n    \n    expect(screen.getByLabelText('Test Label')).toBeInTheDocument();\n  });\n  \n  it('is properly disabled', () => {\n    const handleCheckedChange = jest.fn();\n    render(<Checkbox disabled onCheckedChange={handleCheckedChange} />);\n    \n    const checkbox = screen.getByRole('checkbox');\n    expect(checkbox).toBeDisabled();\n    \n    fireEvent.click(checkbox);\n    expect(handleCheckedChange).not.toHaveBeenCalled();\n  });\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/form",children:"Form"}),": For building forms with validation using react-hook-form"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/label",children:"Label"}),": Used to label the Checkbox for accessibility"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group",children:"RadioGroup"}),": When users need to select a single option from a list"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/switch",children:"Switch"}),": Alternative to Checkbox for toggle/switch style interactions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var s=t(6540);const o={},i=s.createContext(o);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);