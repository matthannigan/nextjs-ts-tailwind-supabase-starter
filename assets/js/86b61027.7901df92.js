"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9963],{1415:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"components/ui/alert","title":"Alert Component","description":"A versatile notification component used to display important information, warnings, or error messages with customizable styles and content structure.","source":"@site/docs/components/ui/alert.md","sourceDirName":"components/ui","slug":"/components/ui/alert","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/ui/alert.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Alert"},"sidebar":"components","previous":{"title":"Navigation Menu","permalink":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu"},"next":{"title":"Avatar","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar"}}');var i=n(4848),s=n(8453);const l={sidebar_label:"Alert"},o="Alert Component",a={},c=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Default Variant",id:"default-variant",level:3},{value:"Destructive Variant",id:"destructive-variant",level:3},{value:"With Icon",id:"with-icon",level:3},{value:"Props",id:"props",level:2},{value:"Alert Props",id:"alert-props",level:3},{value:"AlertTitle Props",id:"alerttitle-props",level:3},{value:"AlertDescription Props",id:"alertdescription-props",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Forms",id:"integration-with-forms",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"alert-component",children:"Alert Component"})}),"\n",(0,i.jsx)(t.p,{children:"A versatile notification component used to display important information, warnings, or error messages with customizable styles and content structure."}),"\n",(0,i.jsx)(t.h2,{id:"import",children:"Import"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';\n"})}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"<Alert>\n  <AlertTitle>Heads up!</AlertTitle>\n  <AlertDescription>\n    You can add components and dependencies to your app using the CLI.\n  </AlertDescription>\n</Alert>\n"})}),"\n",(0,i.jsx)(t.h3,{id:"default-variant",children:"Default Variant"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'<Alert variant="default">\n  <AlertTitle>Note</AlertTitle>\n  <AlertDescription>\n    This is a default alert to provide information to the user.\n  </AlertDescription>\n</Alert>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"destructive-variant",children:"Destructive Variant"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'<Alert variant="destructive">\n  <AlertTitle>Error</AlertTitle>\n  <AlertDescription>\n    Your session has expired. Please log in again to continue.\n  </AlertDescription>\n</Alert>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"with-icon",children:"With Icon"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import { AlertCircle } from 'lucide-react';\n\n<Alert>\n  <AlertCircle className=\"h-4 w-4\" />\n  <AlertTitle>Important Update</AlertTitle>\n  <AlertDescription>\n    A new version of the application is available. Please refresh the page.\n  </AlertDescription>\n</Alert>\n"})}),"\n",(0,i.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,i.jsx)(t.h3,{id:"alert-props",children:"Alert Props"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Prop"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"variant"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"'default' | 'destructive'"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"'default'"})}),(0,i.jsx)(t.td,{children:"Controls the visual style of the alert"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"className"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"undefined"})}),(0,i.jsx)(t.td,{children:"Additional CSS classes to apply to the alert"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"children"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"ReactNode"})}),(0,i.jsx)(t.td,{children:"Required"}),(0,i.jsx)(t.td,{children:"Content to display inside the alert"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"...props"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"HTMLAttributes<HTMLDivElement>"})}),(0,i.jsx)(t.td,{children:"-"}),(0,i.jsx)(t.td,{children:"All other props are passed to the underlying div element"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"alerttitle-props",children:"AlertTitle Props"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Prop"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"className"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"undefined"})}),(0,i.jsx)(t.td,{children:"Additional CSS classes to apply to the title"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"children"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"ReactNode"})}),(0,i.jsx)(t.td,{children:"Required"}),(0,i.jsx)(t.td,{children:"Content to display as the alert title"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"...props"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"HTMLAttributes<HTMLHeadingElement>"})}),(0,i.jsx)(t.td,{children:"-"}),(0,i.jsx)(t.td,{children:"All other props are passed to the underlying h5 element"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"alertdescription-props",children:"AlertDescription Props"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Prop"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"className"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"undefined"})}),(0,i.jsx)(t.td,{children:"Additional CSS classes to apply to the description"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"children"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"ReactNode"})}),(0,i.jsx)(t.td,{children:"Required"}),(0,i.jsx)(t.td,{children:"Content to display as the alert description"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"...props"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"HTMLAttributes<HTMLParagraphElement>"})}),(0,i.jsx)(t.td,{children:"-"}),(0,i.jsx)(t.td,{children:"All other props are passed to the underlying div element"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import { VariantProps } from \'class-variance-authority\';\nimport * as React from \'react\';\n\n// Alert Variants\nconst alertVariants = cva(\n  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",\n  {\n    variants: {\n      variant: {\n        default: "bg-background text-foreground",\n        destructive:\n          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",\n      },\n    },\n    defaultVariants: {\n      variant: "default",\n    },\n  }\n);\n\n// Alert Component Props\ntype AlertProps = React.HTMLAttributes<HTMLDivElement> & \n  VariantProps<typeof alertVariants>;\n\n// AlertTitle Component Props\ntype AlertTitleProps = React.HTMLAttributes<HTMLHeadingElement>;\n\n// AlertDescription Component Props\ntype AlertDescriptionProps = React.HTMLAttributes<HTMLParagraphElement>;\n'})}),"\n",(0,i.jsx)(t.h2,{id:"customization",children:"Customization"}),"\n",(0,i.jsx)(t.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,i.jsx)(t.p,{children:"The Alert component can be customized using the following approaches:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Using the ",(0,i.jsx)(t.code,{children:"className"})," prop to add additional Tailwind classes:"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'<Alert className="border-blue-500 bg-blue-50 dark:bg-blue-950 dark:border-blue-800">\n  <AlertTitle className="text-blue-800 dark:text-blue-300">Information</AlertTitle>\n  <AlertDescription className="text-blue-600 dark:text-blue-400">\n    This alert has custom colors using Tailwind CSS classes.\n  </AlertDescription>\n</Alert>\n'})}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsx)(t.li,{children:"Using custom icons with proper positioning:"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import { Info, AlertTriangle, CheckCircle } from 'lucide-react';\n\n<Alert>\n  <Info className=\"h-4 w-4 text-blue-500\" />\n  <AlertTitle>Information Alert</AlertTitle>\n  <AlertDescription>With a blue info icon.</AlertDescription>\n</Alert>\n"})}),"\n",(0,i.jsx)(t.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';\nimport { CheckCircle, AlertTriangle, Info, AlertCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ntype StatusAlertProps = React.ComponentProps<typeof Alert> & {\n  status: 'success' | 'warning' | 'info' | 'error';\n  title?: string;\n};\n\nexport function StatusAlert({ \n  status, \n  title, \n  children, \n  className, \n  ...props \n}: StatusAlertProps) {\n  const icons = {\n    success: CheckCircle,\n    warning: AlertTriangle,\n    info: Info,\n    error: AlertCircle\n  };\n\n  const variants = {\n    success: \"border-green-500/50 bg-green-50 text-green-800 dark:border-green-800 dark:bg-green-950/50 dark:text-green-300\",\n    warning: \"border-yellow-500/50 bg-yellow-50 text-yellow-800 dark:border-yellow-800 dark:bg-yellow-950/50 dark:text-yellow-300\",\n    info: \"border-blue-500/50 bg-blue-50 text-blue-800 dark:border-blue-800 dark:bg-blue-950/50 dark:text-blue-300\",\n    error: \"border-red-500/50 bg-red-50 text-red-800 dark:border-red-800 dark:bg-red-950/50 dark:text-red-300\"\n  };\n\n  const IconComponent = icons[status];\n\n  return (\n    <Alert \n      className={cn(variants[status], className)} \n      {...props}\n    >\n      <IconComponent className=\"h-4 w-4\" />\n      {title && <AlertTitle>{title}</AlertTitle>}\n      <AlertDescription>{children}</AlertDescription>\n    </Alert>\n  );\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.h3,{id:"integration-with-forms",children:"Integration with Forms"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import { zodResolver } from \'@hookform/resolvers/zod\';\nimport { useForm } from \'react-hook-form\';\nimport * as z from \'zod\';\nimport { Button } from \'@/components/ui/button\';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \'@/components/ui/form\';\nimport { Input } from \'@/components/ui/input\';\nimport { Alert, AlertDescription } from \'@/components/ui/alert\';\nimport { useState } from \'react\';\nimport { AlertCircle } from \'lucide-react\';\n\nconst formSchema = z.object({\n  email: z.string().email({\n    message: "Please enter a valid email address.",\n  }),\n  password: z.string().min(8, {\n    message: "Password must be at least 8 characters.",\n  }),\n});\n\nexport function LoginForm() {\n  const [formError, setFormError] = useState<string | null>(null);\n  \n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: "",\n      password: "",\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    try {\n      // Form submission logic\n      console.log(values);\n    } catch (error) {\n      setFormError("Login failed. Please check your credentials and try again.");\n    }\n  }\n\n  return (\n    <Form {...form}>\n      {formError && (\n        <Alert variant="destructive" className="mb-4">\n          <AlertCircle className="h-4 w-4" />\n          <AlertDescription>{formError}</AlertDescription>\n        </Alert>\n      )}\n      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">\n        <FormField\n          control={form.control}\n          name="email"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input placeholder="email@example.com" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name="password"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <Input type="password" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type="submit">Login</Button>\n      </form>\n    </Form>\n  );\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import { Alert, AlertTitle, AlertDescription } from \'@/components/ui/alert\';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Settings } from \'lucide-react\';\n\nexport function SettingsCard() {\n  return (\n    <Card className="w-full max-w-md">\n      <CardHeader>\n        <CardTitle>Account Settings</CardTitle>\n      </CardHeader>\n      <CardContent className="space-y-4">\n        <Alert>\n          <Settings className="h-4 w-4" />\n          <AlertTitle>Privacy Notice</AlertTitle>\n          <AlertDescription>\n            We\'ve updated our privacy policy. Please review the changes before continuing.\n          </AlertDescription>\n        </Alert>\n        \n        {/* Settings form fields would go here */}\n        \n      </CardContent>\n      <CardFooter className="flex justify-end space-x-2">\n        <Button variant="outline">Cancel</Button>\n        <Button>Save Changes</Button>\n      </CardFooter>\n    </Card>\n  );\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,i.jsx)(t.p,{children:"The Alert component is responsive by default and adapts to the container's width. You can enhance its behavior on different screen sizes using Tailwind's responsive modifiers:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'<Alert className="p-3 md:p-4 lg:p-6">\n  <AlertTitle className="text-sm md:text-base lg:text-lg">\n    Responsive Alert\n  </AlertTitle>\n  <AlertDescription className="text-xs md:text-sm lg:text-base">\n    This alert adjusts its padding and text size based on the screen size.\n  </AlertDescription>\n</Alert>\n'})}),"\n",(0,i.jsx)(t.p,{children:"The responsive behavior includes:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Mobile"}),": Compact padding and smaller text for space efficiency"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Tablet"}),": Standard padding and medium text size"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Desktop"}),": More generous padding and larger text for better readability"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,i.jsx)(t.p,{children:"The Alert component follows these accessibility best practices:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Uses the appropriate ",(0,i.jsx)(t.code,{children:'role="alert"'})," attribute for screen reader announcements"]}),"\n",(0,i.jsx)(t.li,{children:"Provides a semantic structure with title and description"}),"\n",(0,i.jsx)(t.li,{children:"Maintains proper color contrast ratios in both light and dark modes"}),"\n",(0,i.jsx)(t.li,{children:"Supports icons with appropriate sizing and positioning"}),"\n",(0,i.jsx)(t.li,{children:"Uses semantic HTML for title (h5) and description elements"}),"\n",(0,i.jsx)(t.li,{children:"Ensures text remains readable when customized with different colors"}),"\n",(0,i.jsx)(t.li,{children:"Has proper spacing for readability and scannability"}),"\n",(0,i.jsx)(t.li,{children:"Can be dismissed or interacted with using keyboard navigation when combined with interactive elements"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(t.p,{children:"The component:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Is built using a React.forwardRef to properly forward refs to the underlying div element"}),"\n",(0,i.jsx)(t.li,{children:"Uses class-variance-authority (cva) to manage component variants"}),"\n",(0,i.jsx)(t.li,{children:"Applies Tailwind CSS for styling with consistent design tokens"}),"\n",(0,i.jsx)(t.li,{children:"Has special CSS selectors to handle icon positioning and spacing"}),"\n",(0,i.jsx)(t.li,{children:"Supports both light and dark modes through the Tailwind CSS theme"}),"\n",(0,i.jsxs)(t.li,{children:["Uses the ",(0,i.jsx)(t.code,{children:"cn"})," utility function to merge default variant styles with custom className props"]}),"\n",(0,i.jsx)(t.li,{children:"Includes proper display names for better debugging"}),"\n",(0,i.jsx)(t.li,{children:"Implements a semantic structure with AlertTitle and AlertDescription sub-components"}),"\n",(0,i.jsx)(t.li,{children:"Handles icon positioning automatically when an icon is provided as a child"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Missing role attribute"}),": The component includes ",(0,i.jsx)(t.code,{children:'role="alert"'})," by default, but if implementing a custom alert component, ensure this attribute is preserved for accessibility."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Contrast issues"}),": When customizing colors, especially for the destructive variant, ensure sufficient contrast between text and background."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Icon positioning"}),": When using icons, they should be placed as direct children of the Alert component, not within AlertTitle or AlertDescription, to leverage the automatic positioning styles."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Overriding styles"}),": Be cautious when applying custom background colors that may affect the visibility of text or icons."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Alert fatigue"}),": Avoid overusing alerts, especially the destructive variant, to prevent alert fatigue. Use them only for important information."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Mobile considerations"}),": On small screens, ensure alerts don't take up too much vertical space and remain readable."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"// Example test for the Alert component\nimport { render, screen } from '@testing-library/react';\nimport { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';\nimport { AlertCircle } from 'lucide-react';\n\ndescribe('Alert', () => {\n  it('renders correctly with title and description', () => {\n    render(\n      <Alert>\n        <AlertTitle>Test Title</AlertTitle>\n        <AlertDescription>Test Description</AlertDescription>\n      </Alert>\n    );\n    \n    expect(screen.getByRole('alert')).toBeInTheDocument();\n    expect(screen.getByText('Test Title')).toBeInTheDocument();\n    expect(screen.getByText('Test Description')).toBeInTheDocument();\n  });\n  \n  it('applies the correct variant class', () => {\n    const { rerender } = render(\n      <Alert data-testid=\"alert\">\n        <AlertDescription>Default variant</AlertDescription>\n      </Alert>\n    );\n    \n    expect(screen.getByTestId('alert')).toHaveClass('bg-background');\n    \n    rerender(\n      <Alert variant=\"destructive\" data-testid=\"alert\">\n        <AlertDescription>Destructive variant</AlertDescription>\n      </Alert>\n    );\n    \n    expect(screen.getByTestId('alert')).toHaveClass('border-destructive/50');\n  });\n  \n  it('renders with an icon and positions it correctly', () => {\n    render(\n      <Alert>\n        <AlertCircle data-testid=\"icon\" className=\"h-4 w-4\" />\n        <AlertTitle>With Icon</AlertTitle>\n        <AlertDescription>Description with icon</AlertDescription>\n      </Alert>\n    );\n    \n    const icon = screen.getByTestId('icon');\n    expect(icon).toBeInTheDocument();\n    \n    // Check that icon positioning styles are applied to the container\n    const alert = screen.getByRole('alert');\n    expect(alert).toHaveClass('[&>svg]:absolute');\n  });\n  \n  it('applies custom className correctly', () => {\n    render(\n      <Alert className=\"test-class\" data-testid=\"custom-alert\">\n        <AlertDescription>Custom class alert</AlertDescription>\n      </Alert>\n    );\n    \n    const alert = screen.getByTestId('custom-alert');\n    expect(alert).toHaveClass('test-class');\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"related-components",children:"Related Components"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/toast",children:"Toast"}),": For temporary notifications that appear and disappear automatically"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"AlertDialog"}),": For confirmation dialogs that interrupt the user"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/card",children:"Card"}),": For containing related information, can be used with Alert for status updates"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Banner"}),": For site-wide messaging positioned at the top or bottom of the screen"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var r=n(6540);const i={},s=r.createContext(i);function l(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);