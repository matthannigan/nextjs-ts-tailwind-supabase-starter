"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7890],{4661:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"developer-guide/database-features/authentication","title":"Authentication","description":"This starter template includes a complete authentication system built with Supabase Auth 2.x, featuring email/password authentication, anonymous sessions, and protected routes.","source":"@site/docs/developer-guide/database-features/authentication.md","sourceDirName":"developer-guide/database-features","slug":"/developer-guide/database-features/authentication","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/developer-guide/database-features/authentication.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"start","previous":{"title":"Integration","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/integration"},"next":{"title":"Blueprint","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint"}}');var i=t(4848),o=t(8453);const r={sidebar_position:1},a="Authentication",u={},c=[{value:"Authentication Context",id:"authentication-context",level:2},{value:"Authentication Methods",id:"authentication-methods",level:2},{value:"Registration (Sign Up)",id:"registration-sign-up",level:3},{value:"Login (Sign In)",id:"login-sign-in",level:3},{value:"Anonymous Sessions",id:"anonymous-sessions",level:3},{value:"Sign Out",id:"sign-out",level:3},{value:"Protected Routes",id:"protected-routes",level:2},{value:"Session Management",id:"session-management",level:2},{value:"Authentication Components",id:"authentication-components",level:2},{value:"Custom Hooks",id:"custom-hooks",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"authentication",children:"Authentication"})}),"\n",(0,i.jsx)(n.p,{children:"This starter template includes a complete authentication system built with Supabase Auth 2.x, featuring email/password authentication, anonymous sessions, and protected routes."}),"\n",(0,i.jsx)(n.h2,{id:"authentication-context",children:"Authentication Context"}),"\n",(0,i.jsxs)(n.p,{children:["The authentication system is built around the ",(0,i.jsx)(n.code,{children:"AuthContext"})," (located in ",(0,i.jsx)(n.code,{children:"contexts/AuthContext.tsx"}),"), which provides authentication state and methods to all components via React's Context API."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport type { User, Session } from '@supabase/supabase-js';\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  isLoading: boolean;\n  signUp: (email: string, password: string) => Promise<void>;\n  signIn: (email: string, password: string) => Promise<void>;\n  signInAnonymously: () => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"authentication-methods",children:"Authentication Methods"}),"\n",(0,i.jsx)(n.h3,{id:"registration-sign-up",children:"Registration (Sign Up)"}),"\n",(0,i.jsx)(n.p,{children:"The starter template provides a complete registration flow using Supabase Auth:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const signUp = async (email: string, password: string) => {\n  const { error } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n  \n  if (error) {\n    throw error;\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Registration is handled in the ",(0,i.jsx)(n.code,{children:"RegisterForm.tsx"})," component with form validation using Zod."]}),"\n",(0,i.jsx)(n.h3,{id:"login-sign-in",children:"Login (Sign In)"}),"\n",(0,i.jsx)(n.p,{children:"Login functionality is provided through Supabase Auth:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const signIn = async (email: string, password: string) => {\n  const { error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  });\n  \n  if (error) {\n    throw error;\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The login form is implemented in the ",(0,i.jsx)(n.code,{children:"LoginForm.tsx"})," component."]}),"\n",(0,i.jsx)(n.h3,{id:"anonymous-sessions",children:"Anonymous Sessions"}),"\n",(0,i.jsx)(n.p,{children:"The starter template supports anonymous sessions for users who want to use the application without creating an account:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const signInAnonymously = async () => {\n  const { error } = await supabase.auth.signInAnonymously();\n  \n  if (error) {\n    throw error;\n  }\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"Anonymous users can later convert to registered users if desired."}),"\n",(0,i.jsx)(n.h3,{id:"sign-out",children:"Sign Out"}),"\n",(0,i.jsx)(n.p,{children:"Users can sign out using the provided method:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const signOut = async () => {\n  const { error } = await supabase.auth.signOut();\n  \n  if (error) {\n    throw error;\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"protected-routes",children:"Protected Routes"}),"\n",(0,i.jsx)(n.p,{children:"The template includes a system for protecting routes that require authentication using Next.js 14 middleware:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// middleware.ts\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';\n\nexport async function middleware(req: NextRequest) {\n  const res = NextResponse.next();\n  const supabase = createMiddlewareClient({ req, res });\n  \n  const { data: { session } } = await supabase.auth.getSession();\n  \n  if (!session && req.nextUrl.pathname.startsWith('/dashboard')) {\n    const redirectUrl = new URL('/login', req.url);\n    redirectUrl.searchParams.set('redirectedFrom', req.nextUrl.pathname);\n    return NextResponse.redirect(redirectUrl);\n  }\n  \n  return res;\n}\n\nexport const config = {\n  matcher: ['/dashboard/:path*'],\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"session-management",children:"Session Management"}),"\n",(0,i.jsx)(n.p,{children:"The starter template handles session persistence automatically using Supabase Auth:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// In AuthContext.tsx\nuseEffect(() => {\n  const { data: { subscription } } = supabase.auth.onAuthStateChange(\n    (event, session) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n      setIsLoading(false);\n    }\n  );\n\n  return () => {\n    subscription.unsubscribe();\n  };\n}, []);\n"})}),"\n",(0,i.jsx)(n.p,{children:"This ensures that users remain authenticated across page refreshes and browser sessions if they choose to remain logged in."}),"\n",(0,i.jsx)(n.h2,{id:"authentication-components",children:"Authentication Components"}),"\n",(0,i.jsx)(n.p,{children:"The template includes pre-built authentication components:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RegisterForm.tsx"})," - User registration form with validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"LoginForm.tsx"}),' - Login form with "Remember me" option']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AnonymousLoginForm.tsx"})," - One-click anonymous session creation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"UserMenu.tsx"})," - User profile and logout menu"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"custom-hooks",children:"Custom Hooks"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"useAuth"})," hook provides an easy way to access authentication functionality:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Example usage in a component\nimport { useAuth } from '@/contexts/AuthContext';\n\nconst ProfilePage = () => {\n  const { user, signOut } = useAuth();\n  \n  return (\n    <div>\n      <h1>Profile</h1>\n      <p>Email: {user?.email}</p>\n      <button onClick={signOut}>Sign Out</button>\n    </div>\n  );\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Learn about database operations to understand how user data is stored"}),"\n",(0,i.jsx)(n.li,{children:"Check the protected routes documentation for more advanced security scenarios"}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);