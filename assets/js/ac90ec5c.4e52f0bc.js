"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[2684],{2308:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"developer-guide/tools/husky-lint-staged","title":"Husky and lint-staged Configuration and Usage","description":"This document covers how Husky and lint-staged are configured and used in this project to enforce code quality and standards through Git hooks.","source":"@site/docs/developer-guide/tools/husky-lint-staged.md","sourceDirName":"developer-guide/tools","slug":"/developer-guide/tools/husky-lint-staged","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/developer-guide/tools/husky-lint-staged.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Husky & lint-staged"},"sidebar":"start","previous":{"title":"Jest","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest"},"next":{"title":"Repomix","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix"}}');var t=s(4848),o=s(8453);const r={sidebar_position:4,sidebar_label:"Husky & lint-staged"},d="Husky and lint-staged Configuration and Usage",l={},a=[{value:"Overview",id:"overview",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Husky Configuration",id:"husky-configuration",level:3},{value:"lint-staged Configuration",id:"lint-staged-configuration",level:3},{value:"How It Works",id:"how-it-works",level:2},{value:"Adding Custom Git Hooks",id:"adding-custom-git-hooks",level:2},{value:"Add a Pre-push Hook for Tests",id:"add-a-pre-push-hook-for-tests",level:3},{value:"Add a Commit Message Hook",id:"add-a-commit-message-hook",level:3},{value:"Customizing lint-staged Configuration",id:"customizing-lint-staged-configuration",level:2},{value:"Bypassing Hooks",id:"bypassing-hooks",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Hooks Not Running",id:"hooks-not-running",level:3},{value:"ESLint or Prettier Errors",id:"eslint-or-prettier-errors",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Updating Hook Scripts",id:"updating-hook-scripts",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"husky-and-lint-staged-configuration-and-usage",children:"Husky and lint-staged Configuration and Usage"})}),"\n",(0,t.jsx)(n.p,{children:"This document covers how Husky and lint-staged are configured and used in this project to enforce code quality and standards through Git hooks."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Husky"}),": A tool that enables Git hooks in your project"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"lint-staged"}),": A tool that runs linters on staged Git files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Ensures that only linted and properly formatted code gets committed"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"husky-configuration",children:"Husky Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Husky is configured in the project with the ",(0,t.jsx)(n.code,{children:".husky"})," directory containing Git hook scripts. If not yet configured, you can set it up with:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Initialize Husky\nnpx husky init\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will create a ",(0,t.jsx)(n.code,{children:".husky"})," directory with a pre-commit hook. The pre-commit hook should be configured to run lint-staged:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'#!/bin/sh\n. "$(dirname "$0")/_/husky.sh"\n\nnpx lint-staged\n'})}),"\n",(0,t.jsx)(n.h3,{id:"lint-staged-configuration",children:"lint-staged Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["The lint-staged configuration is defined in the ",(0,t.jsx)(n.code,{children:"package.json"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"lint-staged": {\n  "*.{js,jsx,ts,tsx,mjs}": [\n    "eslint --fix",\n    "prettier --write"\n  ],\n  "*.{json,css}": [\n    "prettier --write"\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This configuration runs ESLint and Prettier on JavaScript/TypeScript files, and just Prettier on JSON and CSS files."}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pre-commit Hook"}),": When you run ",(0,t.jsx)(n.code,{children:"git commit"}),", Husky triggers the pre-commit hook"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"lint-staged"}),": The pre-commit hook runs lint-staged"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Linting and Formatting"}),": lint-staged runs ESLint and Prettier only on the files that are staged for commit"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Commit Result"}),": If all checks pass, the commit proceeds; if any check fails, the commit is aborted"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"adding-custom-git-hooks",children:"Adding Custom Git Hooks"}),"\n",(0,t.jsx)(n.p,{children:"You can add additional Git hooks to enforce different rules:"}),"\n",(0,t.jsx)(n.h3,{id:"add-a-pre-push-hook-for-tests",children:"Add a Pre-push Hook for Tests"}),"\n",(0,t.jsxs)(n.p,{children:["Create a file at ",(0,t.jsx)(n.code,{children:".husky/pre-push"})," with:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'#!/bin/sh\n. "$(dirname "$0")/_/husky.sh"\n\nnpm test\n'})}),"\n",(0,t.jsx)(n.p,{children:"Make it executable:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"chmod +x .husky/pre-push\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will run your tests before pushing changes."}),"\n",(0,t.jsx)(n.h3,{id:"add-a-commit-message-hook",children:"Add a Commit Message Hook"}),"\n",(0,t.jsxs)(n.p,{children:["Create a file at ",(0,t.jsx)(n.code,{children:".husky/commit-msg"})," with:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'#!/bin/sh\n. "$(dirname "$0")/_/husky.sh"\n\nnpx --no -- commitlint --edit "$1"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This requires additional setup with ",(0,t.jsx)(n.code,{children:"commitlint"})," to enforce commit message conventions."]}),"\n",(0,t.jsx)(n.h2,{id:"customizing-lint-staged-configuration",children:"Customizing lint-staged Configuration"}),"\n",(0,t.jsx)(n.p,{children:"You can customize the lint-staged configuration to perform different actions on different file types:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"lint-staged": {\n  "*.{js,jsx,ts,tsx}": [\n    "eslint --fix",\n    "prettier --write",\n    "jest --findRelatedTests"\n  ],\n  "*.md": "prettier --write",\n  "*.css": [\n    "stylelint --fix",\n    "prettier --write"\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"bypassing-hooks",children:"Bypassing Hooks"}),"\n",(0,t.jsxs)(n.p,{children:["In emergency situations, you can bypass hooks with Git's ",(0,t.jsx)(n.code,{children:"--no-verify"})," flag:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git commit --no-verify -m "Emergency fix"\n'})}),"\n",(0,t.jsx)(n.p,{children:"However, this should be used sparingly."}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"hooks-not-running",children:"Hooks Not Running"}),"\n",(0,t.jsx)(n.p,{children:"If hooks are not running:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Check if the hooks are executable:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"chmod +x .husky/*\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Ensure Husky is installed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install husky --save-dev\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Check if Git hooks path is set correctly:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git config core.hooksPath\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It should point to ",(0,t.jsx)(n.code,{children:".husky"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"eslint-or-prettier-errors",children:"ESLint or Prettier Errors"}),"\n",(0,t.jsx)(n.p,{children:"If you're getting ESLint or Prettier errors that prevent commits:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"npm run lint"})," and ",(0,t.jsx)(n.code,{children:"npm run format"})," to see the errors"]}),"\n",(0,t.jsx)(n.li,{children:"Fix the errors manually"}),"\n",(0,t.jsx)(n.li,{children:"Stage the changes and try committing again"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Commit Small Changes"}),": Smaller commits are easier to validate and fix if there are issues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keep Hooks Fast"}),": Ensure your hooks run quickly to maintain a good developer experience"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Don't Skip Validation"}),": Avoid using ",(0,t.jsx)(n.code,{children:"--no-verify"})," as it defeats the purpose of the hooks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Run Tests Locally"}),": Run ",(0,t.jsx)(n.code,{children:"npm test"})," before pushing to ensure all tests pass"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Include in CI"}),": Include the same checks in your CI pipeline to catch issues that bypass hooks"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"updating-hook-scripts",children:"Updating Hook Scripts"}),"\n",(0,t.jsx)(n.p,{children:"To update existing hook scripts:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Edit the files in the ",(0,t.jsx)(n.code,{children:".husky"})," directory"]}),"\n",(0,t.jsx)(n.li,{children:"Make sure they remain executable after editing"}),"\n",(0,t.jsx)(n.li,{children:"Commit the changes to version control"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var i=s(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);