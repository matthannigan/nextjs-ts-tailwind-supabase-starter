"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[4703],{220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"components/style/typography","title":"Typography Components","description":"A collection of type-safe, accessible typography components for consistent text styling across the application, including headings, paragraphs, blockquotes, and code snippets.","source":"@site/docs/components/style/typography.md","sourceDirName":"components/style","slug":"/components/style/typography","permalink":"/nextjs-ts-tailwind-supabase-starter/components/style/typography","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/style/typography.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Typography"},"sidebar":"components","previous":{"title":"Textarea","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea"},"next":{"title":"Theme Switch","permalink":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch"}}');var i=t(4848),r=t(8453);const d={sidebar_label:"Typography"},o="Typography Components",l={},a=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Heading Component",id:"heading-component",level:3},{value:"Text Component",id:"text-component",level:3},{value:"Lead Component",id:"lead-component",level:3},{value:"Blockquote Component",id:"blockquote-component",level:3},{value:"InlineCode Component",id:"inlinecode-component",level:3},{value:"Props",id:"props",level:2},{value:"Heading Props",id:"heading-props",level:3},{value:"Text Props",id:"text-props",level:3},{value:"Lead, Blockquote, and InlineCode Props",id:"lead-blockquote-and-inlinecode-props",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending Components",id:"extending-components",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Forms",id:"integration-with-forms",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"typography-components",children:"Typography Components"})}),"\n",(0,i.jsx)(n.p,{children:"A collection of type-safe, accessible typography components for consistent text styling across the application, including headings, paragraphs, blockquotes, and code snippets."}),"\n",(0,i.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { \n  Heading, \n  Text, \n  Lead, \n  Blockquote, \n  InlineCode \n} from '@/components/ui/typography';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"heading-component",children:"Heading Component"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"Heading"})," component for all heading levels (h1-h6) with consistent styling."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Heading>Default H1 Heading</Heading>\n<Heading as="h2">H2 Heading</Heading>\n<Heading as="h3" size="h3" variant="primary">H3 Primary Heading</Heading>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"text-component",children:"Text Component"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"Text"})," component for paragraphs with various size, weight, and color options."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Text>Default paragraph text</Text>\n<Text size="lg" weight="medium">Larger medium-weight text</Text>\n<Text variant="muted" size="sm">Small muted text</Text>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"lead-component",children:"Lead Component"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"Lead"})," component for introductory or emphasized paragraphs."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"<Lead>This text stands out as an introduction to a section.</Lead>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"blockquote-component",children:"Blockquote Component"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"Blockquote"})," component for quotations."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Blockquote>\n  "Typography is the art and technique of arranging type to make written language legible, readable, and appealing."\n</Blockquote>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"inlinecode-component",children:"InlineCode Component"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"InlineCode"})," component for code references within text."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"<Text>Install using <InlineCode>npm install @package/name</InlineCode></Text>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,i.jsx)(n.h3,{id:"heading-props",children:"Heading Props"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Prop"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"as"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'h1'"})}),(0,i.jsx)(n.td,{children:"HTML heading element to render"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"size"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'"})}),(0,i.jsxs)(n.td,{children:["Same as ",(0,i.jsx)(n.code,{children:"as"})," prop"]}),(0,i.jsx)(n.td,{children:"Controls the text size, independent of the semantic level"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"variant"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'default' | 'muted' | 'primary' | 'secondary'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'default'"})}),(0,i.jsx)(n.td,{children:"Color variant of the heading"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"className"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Additional CSS classes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"children"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ReactNode"})}),(0,i.jsx)(n.td,{children:"Required"}),(0,i.jsx)(n.td,{children:"Content to be rendered within the heading"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"text-props",children:"Text Props"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Prop"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"size"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'xs' | 'sm' | 'md' | 'lg' | 'xl'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'md'"})}),(0,i.jsx)(n.td,{children:"Font size of the text"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"weight"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'light' | 'normal' | 'medium' | 'semibold' | 'bold'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'normal'"})}),(0,i.jsx)(n.td,{children:"Font weight of the text"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"variant"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'default' | 'muted' | 'primary' | 'secondary'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'default'"})}),(0,i.jsx)(n.td,{children:"Color variant of the text"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"className"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Additional CSS classes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"children"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ReactNode"})}),(0,i.jsx)(n.td,{children:"Required"}),(0,i.jsx)(n.td,{children:"Content to be rendered within the paragraph"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"lead-blockquote-and-inlinecode-props",children:"Lead, Blockquote, and InlineCode Props"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Props"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Lead"})}),(0,i.jsxs)(n.td,{children:["Accepts standard HTML paragraph attributes plus ",(0,i.jsx)(n.code,{children:"className"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Blockquote"})}),(0,i.jsxs)(n.td,{children:["Accepts standard HTML blockquote attributes plus ",(0,i.jsx)(n.code,{children:"className"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"InlineCode"})}),(0,i.jsxs)(n.td,{children:["Accepts standard HTML code attributes plus ",(0,i.jsx)(n.code,{children:"className"})]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Heading Component\nexport interface HeadingProps\n  extends Omit<React.HTMLAttributes<HTMLHeadingElement>, 'color'>,\n    VariantProps<typeof headingVariants> {\n  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n  children: ReactNode;\n}\n\n// Text Component\nexport interface TextProps\n  extends Omit<React.HTMLAttributes<HTMLParagraphElement>, 'color'>,\n    VariantProps<typeof textVariants> {\n  children: ReactNode;\n}\n\n// Lead, Blockquote, and InlineCode use standard HTML element props\n// with React.HTMLAttributes for their respective elements\n"})}),"\n",(0,i.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,i.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,i.jsxs)(n.p,{children:["All typography components accept a ",(0,i.jsx)(n.code,{children:"className"})," prop for additional Tailwind classes:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Heading className="my-8 text-blue-600 underline">Custom Styled Heading</Heading>\n<Text className="italic first-letter:text-3xl first-letter:font-bold">\n  Custom styled paragraph with drop cap effect.\n</Text>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"extending-components",children:"Extending Components"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Heading, Text } from \'@/components/ui/typography\';\n\nexport function SectionTitle({ className, children, ...props }) {\n  return (\n    <Heading \n      as="h2"\n      variant="primary"\n      className={`border-b pb-2 ${className || \'\'}`}\n      {...props}\n    >\n      {children}\n    </Heading>\n  );\n}\n\nexport function ErrorText({ children, ...props }) {\n  return (\n    <Text \n      size="sm"\n      variant="primary"\n      className="text-red-600"\n      {...props}\n    >\n      {children}\n    </Text>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-forms",children:"Integration with Forms"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { useForm } from \'react-hook-form\';\nimport { Heading, Text } from \'@/components/ui/typography\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\n\nexport function LoginForm() {\n  const { register, handleSubmit, formState: { errors } } = useForm();\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Heading as="h2" size="h3">Login to Your Account</Heading>\n      <Text variant="muted" className="mb-6">Enter your credentials below</Text>\n      \n      <div className="space-y-4">\n        <div>\n          <Text as="label" htmlFor="email" size="sm" weight="medium">Email</Text>\n          <Input id="email" {...register(\'email\', { required: true })} />\n          {errors.email && <Text size="xs" className="text-red-500">Email is required</Text>}\n        </div>\n        \n        <div>\n          <Text as="label" htmlFor="password" size="sm" weight="medium">Password</Text>\n          <Input id="password" type="password" {...register(\'password\', { required: true })} />\n          {errors.password && <Text size="xs" className="text-red-500">Password is required</Text>}\n        </div>\n        \n        <Button type="submit">Login</Button>\n      </div>\n    </form>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Card, CardContent, CardHeader, CardFooter } from \'@/components/ui/card\';\nimport { Heading, Text, Blockquote } from \'@/components/ui/typography\';\n\nexport function TestimonialCard({ quote, author, role }) {\n  return (\n    <Card>\n      <CardHeader>\n        <Heading as="h3" size="h5">Customer Testimonial</Heading>\n      </CardHeader>\n      <CardContent>\n        <Blockquote>{quote}</Blockquote>\n      </CardContent>\n      <CardFooter>\n        <Text weight="semibold">{author}</Text>\n        <Text size="sm" variant="muted">{role}</Text>\n      </CardFooter>\n    </Card>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,i.jsx)(n.p,{children:"The typography components have built-in responsive behavior:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Heading"}),": Font sizes automatically adjust for different screen sizes:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// In the component definition:\n// h1: 'text-4xl md:text-5xl lg:text-6xl',\n// h2: 'text-3xl md:text-4xl lg:text-5xl',\n// ...etc\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mobile"}),": Headings start with smaller base sizes (",(0,i.jsx)(n.code,{children:"text-4xl"})," for h1, etc.)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tablet"}),": Medium-sized screens use the ",(0,i.jsx)(n.code,{children:"md:"})," breakpoint sizes"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Desktop"}),": Large screens use the ",(0,i.jsx)(n.code,{children:"lg:"})," breakpoint sizes"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Other typography components like ",(0,i.jsx)(n.code,{children:"Text"}),", ",(0,i.jsx)(n.code,{children:"Lead"}),", etc. can be made responsive using the ",(0,i.jsx)(n.code,{children:"className"})," prop:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Text className="text-sm md:text-base lg:text-lg">\n  This text grows larger on bigger screens.\n</Text>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,i.jsx)(n.p,{children:"The typography components follow these accessibility best practices:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Semantic HTML"}),": Uses appropriate HTML elements (",(0,i.jsx)(n.code,{children:"h1"}),"-",(0,i.jsx)(n.code,{children:"h6"}),", ",(0,i.jsx)(n.code,{children:"p"}),", ",(0,i.jsx)(n.code,{children:"blockquote"}),", ",(0,i.jsx)(n.code,{children:"code"}),") for proper document structure"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Color Contrast"}),": The default theme colors meet WCAG AA standards for color contrast"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Heading Hierarchy"}),": The ",(0,i.jsx)(n.code,{children:"as"})," prop allows for proper heading hierarchy while maintaining consistent styling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Font Sizing"}),": All sizes are relative using Tailwind's rem-based sizing, supporting browser font size settings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Focus States"}),": Inherits the application's focus states for interactive elements"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.p,{children:"The Typography components:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use CSS Utility Classes: Built with Tailwind CSS utility classes for consistent styling"}),"\n",(0,i.jsx)(n.li,{children:"Leverage Class Variance Authority (CVA): Uses CVA for variant management"}),"\n",(0,i.jsx)(n.li,{children:"Support Type Safety: Fully typed with TypeScript for developer experience"}),"\n",(0,i.jsx)(n.li,{children:"Maintain Component Composability: Can be easily extended and combined with other components"}),"\n",(0,i.jsx)(n.li,{children:"Follow HTML Semantics: Each component renders the appropriate HTML element"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inconsistent Heading Levels"}),": Be sure to maintain proper heading hierarchy (h1 \u2192 h2 \u2192 h3) for accessibility. The ",(0,i.jsx)(n.code,{children:"as"})," prop allows you to separate visual styling from semantic structure."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Overriding Core Styles"}),": When adding custom styles via ",(0,i.jsx)(n.code,{children:"className"}),", be careful not to accidentally override important core styles. Use Tailwind's modifier syntax like ",(0,i.jsx)(n.code,{children:"first:"}),", ",(0,i.jsx)(n.code,{children:"hover:"}),", etc. to add behavior without changing the base styles."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Text Color in Dark Mode"}),": Remember that the color variants (",(0,i.jsx)(n.code,{children:"default"}),", ",(0,i.jsx)(n.code,{children:"muted"}),", ",(0,i.jsx)(n.code,{children:"primary"}),", ",(0,i.jsx)(n.code,{children:"secondary"}),") are designed to work with the application's theme. If implementing custom colors, ensure they have appropriate dark mode alternatives."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Example test for the Heading component\nimport { render, screen } from '@testing-library/react';\nimport { Heading } from '@/components/ui/typography';\n\ndescribe('Heading', () => {\n  it('renders with default props as h1', () => {\n    render(<Heading>Test Heading</Heading>);\n    const heading = screen.getByText('Test Heading');\n    expect(heading.tagName).toBe('H1');\n  });\n  \n  it('renders with specified heading level', () => {\n    render(<Heading as=\"h3\">Test H3</Heading>);\n    const heading = screen.getByText('Test H3');\n    expect(heading.tagName).toBe('H3');\n  });\n  \n  it('applies correct styles based on variants', () => {\n    render(<Heading variant=\"primary\">Primary Heading</Heading>);\n    const heading = screen.getByText('Primary Heading');\n    expect(heading).toHaveClass('text-primary');\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/card",children:"Card"}),": Often used together with Typography components for content organization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/button",children:"Button"}),": Can be combined with Text components for consistent button styling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/alert",children:"Alert"}),": Uses typography components for alert titles and descriptions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);