"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[2256],{3008:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"developer-guide/database-features/integration","title":"Database Integration","description":"This starter template includes full integration with Supabase Database 2.x, providing a PostgreSQL database with Row Level Security (RLS) policies and TypeScript type safety.","source":"@site/docs/developer-guide/database-features/integration.md","sourceDirName":"developer-guide/database-features","slug":"/developer-guide/database-features/integration","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/integration","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/developer-guide/database-features/integration.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Integration"},"sidebar":"start","previous":{"title":"Project Structure","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/structure"},"next":{"title":"Authentication","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication"}}');var s=t(4848),i=t(8453);const r={sidebar_position:2,sidebar_label:"Integration"},l="Database Integration",o={},d=[{value:"Database Schema",id:"database-schema",level:2},{value:"Users Table",id:"users-table",level:3},{value:"TypeScript Integration",id:"typescript-integration",level:2},{value:"Database Utilities",id:"database-utilities",level:2},{value:"Row Level Security (RLS)",id:"row-level-security-rls",level:2},{value:"Using the Database in Components",id:"using-the-database-in-components",level:2},{value:"Realtime Subscriptions",id:"realtime-subscriptions",level:2},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"database-integration",children:"Database Integration"})}),"\n",(0,s.jsx)(n.p,{children:"This starter template includes full integration with Supabase Database 2.x, providing a PostgreSQL database with Row Level Security (RLS) policies and TypeScript type safety."}),"\n",(0,s.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,s.jsx)(n.p,{children:"The core database schema includes the following tables:"}),"\n",(0,s.jsx)(n.h3,{id:"users-table",children:"Users Table"}),"\n",(0,s.jsx)(n.p,{children:"The users table extends Supabase Auth's built-in users with additional profile information:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE public.profiles (\n  id UUID REFERENCES auth.users(id) PRIMARY KEY,\n  display_name TEXT,\n  avatar_url TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL\n);\n\n-- Set up Row Level Security\nALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;\n\n-- Create secure policies\nCREATE POLICY "Users can view their own profile"\n  ON public.profiles\n  FOR SELECT\n  USING (auth.uid() = id);\n\nCREATE POLICY "Users can update their own profile"\n  ON public.profiles\n  FOR UPDATE\n  USING (auth.uid() = id);\n\n-- Create a trigger to create a profile when a user signs up\nCREATE OR REPLACE FUNCTION public.handle_new_user()\nRETURNS TRIGGER AS $$\nBEGIN\n  INSERT INTO public.profiles (id)\n  VALUES (NEW.id);\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"typescript-integration",children:"TypeScript Integration"}),"\n",(0,s.jsx)(n.p,{children:"The database schema is fully typed using TypeScript 5.4+ to provide type safety:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// types/database.types.ts\nexport interface Database {\n  public: {\n    Tables: {\n      profiles: {\n        Row: {\n          id: string;\n          display_name: string | null;\n          avatar_url: string | null;\n          created_at: string;\n          updated_at: string;\n        };\n        Insert: {\n          id: string;\n          display_name?: string | null;\n          avatar_url?: string | null;\n          created_at?: string;\n          updated_at?: string;\n        };\n        Update: {\n          id?: string;\n          display_name?: string | null;\n          avatar_url?: string | null;\n          created_at?: string;\n          updated_at?: string;\n        };\n      };\n    };\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"database-utilities",children:"Database Utilities"}),"\n",(0,s.jsx)(n.p,{children:"The starter template provides utility functions for common database operations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// lib/db/users.ts\nimport { supabase } from '../supabase';\nimport type { Database } from '@/types/database.types';\n\ntype Profile = Database['public']['Tables']['profiles']['Row'];\n\nexport const getUserProfile = async (userId: string): Promise<Profile | null> => {\n  const { data, error } = await supabase\n    .from('profiles')\n    .select('*')\n    .eq('id', userId)\n    .single();\n    \n  if (error) {\n    console.error('Error fetching user profile:', error);\n    return null;\n  }\n  \n  return data;\n};\n\nexport const updateUserProfile = async (\n  userId: string,\n  updates: Partial<Profile>\n): Promise<Profile | null> => {\n  const { data, error } = await supabase\n    .from('profiles')\n    .update(updates)\n    .eq('id', userId)\n    .select()\n    .single();\n    \n  if (error) {\n    console.error('Error updating user profile:', error);\n    return null;\n  }\n  \n  return data;\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"row-level-security-rls",children:"Row Level Security (RLS)"}),"\n",(0,s.jsx)(n.p,{children:"The template uses Supabase's Row Level Security to protect data at the database level. RLS ensures that users can only access data they are authorized to see, even if the application code has a security vulnerability."}),"\n",(0,s.jsx)(n.p,{children:"Key RLS policies included:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Users can only read their own profile data"}),"\n",(0,s.jsx)(n.li,{children:"Users can only update their own profile data"}),"\n",(0,s.jsx)(n.li,{children:"Anonymous users have limited access to public data"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"using-the-database-in-components",children:"Using the Database in Components"}),"\n",(0,s.jsx)(n.p,{children:"Example of using the database in a React component:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { useEffect, useState } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { getUserProfile } from '@/lib/db/users';\nimport type { Database } from '@/types/database.types';\n\ntype Profile = Database['public']['Tables']['profiles']['Row'];\n\nconst ProfilePage = () => {\n  const { user } = useAuth();\n  const [profile, setProfile] = useState<Profile | null>(null);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n    const fetchProfile = async () => {\n      if (user) {\n        const profileData = await getUserProfile(user.id);\n        setProfile(profileData);\n      }\n      setLoading(false);\n    };\n    \n    fetchProfile();\n  }, [user]);\n  \n  if (loading) return <div>Loading...</div>;\n  if (!profile) return <div>Profile not found</div>;\n  \n  return (\n    <div>\n      <h1>Profile</h1>\n      <p>Display Name: {profile.display_name || 'Not set'}</p>\n      {/* More profile details */}\n    </div>\n  );\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"realtime-subscriptions",children:"Realtime Subscriptions"}),"\n",(0,s.jsx)(n.p,{children:"The starter template supports Supabase Realtime for live data updates:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { useEffect, useState } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport type { Database } from '@/types/database.types';\n\ntype Profile = Database['public']['Tables']['profiles']['Row'];\n\nconst useRealtimeProfile = (userId: string) => {\n  const [profile, setProfile] = useState<Profile | null>(null);\n  \n  useEffect(() => {\n    // Initial fetch\n    const fetchProfile = async () => {\n      const { data } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n        \n      setProfile(data);\n    };\n    \n    fetchProfile();\n    \n    // Set up realtime subscription\n    const subscription = supabase\n      .channel('profile-changes')\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'profiles',\n          filter: `id=eq.${userId}`,\n        },\n        (payload) => {\n          setProfile(payload.new as Profile);\n        }\n      )\n      .subscribe();\n      \n    return () => {\n      supabase.removeChannel(subscription);\n    };\n  }, [userId]);\n  \n  return profile;\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Learn about ",(0,s.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing",children:"testing"})," to understand how to test database operations"]}),"\n",(0,s.jsx)(n.li,{children:"Check the API routes documentation for implementing server-side endpoints"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);