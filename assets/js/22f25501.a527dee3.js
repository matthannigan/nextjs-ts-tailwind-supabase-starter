"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[8592],{6029:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"components/forms/switch","title":"Switch Component","description":"A Switch is an interactive control that allows users to toggle between an enabled and disabled state, providing a visual representation of a binary setting.","source":"@site/docs/components/forms/switch.md","sourceDirName":"components/forms","slug":"/components/forms/switch","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/forms/switch.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Switch"},"sidebar":"components","previous":{"title":"Select","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/select"},"next":{"title":"Textarea","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea"}}');var i=t(4848),o=t(8453);const r={sidebar_label:"Switch"},c="Switch Component",l={},d=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Controlled Component",id:"controlled-component",level:3},{value:"With Label",id:"with-label",level:3},{value:"Disabled State",id:"disabled-state",level:3},{value:"Props",id:"props",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with React Hook Form",id:"integration-with-react-hook-form",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"switch-component",children:"Switch Component"})}),"\n",(0,i.jsx)(n.p,{children:"A Switch is an interactive control that allows users to toggle between an enabled and disabled state, providing a visual representation of a binary setting."}),"\n",(0,i.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Switch } from '@/components/ui/switch';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"<Switch />\n"})}),"\n",(0,i.jsx)(n.h3,{id:"controlled-component",children:"Controlled Component"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react';\nimport { Switch } from '@/components/ui/switch';\n\nexport function ControlledSwitch() {\n  const [checked, setChecked] = useState(false);\n  \n  return (\n    <Switch \n      checked={checked} \n      onCheckedChange={setChecked} \n    />\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"with-label",children:"With Label"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Label } from \'@/components/ui/label\';\nimport { Switch } from \'@/components/ui/switch\';\n\nexport function SwitchWithLabel() {\n  return (\n    <div className="flex items-center space-x-2">\n      <Switch id="airplane-mode" />\n      <Label htmlFor="airplane-mode">Airplane Mode</Label>\n    </div>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"disabled-state",children:"Disabled State"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"<Switch disabled />\n"})}),"\n",(0,i.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Prop"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"checked"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"The controlled checked state of the switch"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"defaultChecked"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"The default checked state when uncontrolled"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"onCheckedChange"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"(checked: boolean) => void"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Event handler called when the checked state changes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"disabled"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"false"})}),(0,i.jsxs)(n.td,{children:["When ",(0,i.jsx)(n.code,{children:"true"}),", prevents the user from interacting with the switch"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"required"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"false"})}),(0,i.jsxs)(n.td,{children:["When ",(0,i.jsx)(n.code,{children:"true"}),", indicates that the user must check the switch before the form can be submitted"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"name"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"The name of the switch when used in a form"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"value"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"The value of the switch when used in a form"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"The ID for the switch, used for accessibility and connecting to a label"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"className"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Additional CSS classes to add to the switch"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import * as React from 'react';\nimport * as SwitchPrimitives from '@radix-ui/react-switch';\n\n// Component Type Definition\ntype SwitchProps = React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,i.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,i.jsx)(n.p,{children:"The Switch component can be customized using the following approaches:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Using the ",(0,i.jsx)(n.code,{children:"className"})," prop to add additional Tailwind classes"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Switch className="data-[state=checked]:bg-green-500 data-[state=unchecked]:bg-gray-300" />\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Customizing size through TailwindCSS"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Switch className="h-4 w-8" />\n'})}),"\n",(0,i.jsx)(n.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,i.jsx)(n.p,{children:"You can extend the Switch component to add custom functionality or styling:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Switch } from '@/components/ui/switch';\nimport { cn } from '@/lib/utils';\n\ntype ColorSwitchProps = React.ComponentProps<typeof Switch> & {\n  colorScheme?: 'red' | 'green' | 'blue';\n};\n\nexport function ColorSwitch({ colorScheme = 'blue', className, ...props }: ColorSwitchProps) {\n  const colorClasses = {\n    red: 'data-[state=checked]:bg-red-500',\n    green: 'data-[state=checked]:bg-green-500',\n    blue: 'data-[state=checked]:bg-blue-500',\n  };\n\n  return (\n    <Switch \n      className={cn(colorClasses[colorScheme], className)} \n      {...props} \n    />\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-react-hook-form",children:"Integration with React Hook Form"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useForm, Controller } from 'react-hook-form';\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel } from '@/components/ui/form';\nimport { Switch } from '@/components/ui/switch';\nimport { Button } from '@/components/ui/button';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\n\n// Define form schema\nconst FormSchema = z.object({\n  notifications: z.boolean().default(false),\n});\n\nexport function SwitchForm() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      notifications: false,\n    },\n  });\n\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    console.log(data);\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"notifications\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n              <div className=\"space-y-0.5\">\n                <FormLabel className=\"text-base\">Notifications</FormLabel>\n                <FormDescription>\n                  Receive notifications about new updates.\n                </FormDescription>\n              </div>\n              <FormControl>\n                <Switch\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Save preferences</Button>\n      </form>\n    </Form>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Switch } from \'@/components/ui/switch\';\nimport { Label } from \'@/components/ui/label\';\n\nexport function SettingsCard() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Account Settings</CardTitle>\n        <CardDescription>Manage your account preferences.</CardDescription>\n      </CardHeader>\n      <CardContent className="space-y-4">\n        <div className="flex items-center justify-between">\n          <Label htmlFor="marketing-emails">Marketing emails</Label>\n          <Switch id="marketing-emails" />\n        </div>\n        <div className="flex items-center justify-between">\n          <Label htmlFor="security-alerts">Security alerts</Label>\n          <Switch id="security-alerts" defaultChecked />\n        </div>\n      </CardContent>\n      <CardFooter>\n        <p className="text-xs text-muted-foreground">\n          You can change these settings at any time.\n        </p>\n      </CardFooter>\n    </Card>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,i.jsx)(n.p,{children:"The Switch component has minimal built-in responsive behavior, as its size remains constant across device sizes. If you want different sizes based on screen size, use Tailwind's responsive modifiers:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Switch className="h-4 w-8 md:h-5 md:w-10 lg:h-6 lg:w-11" />\n'})}),"\n",(0,i.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,i.jsx)(n.p,{children:"The Switch component follows these accessibility best practices:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Built on Radix UI's Switch primitive which provides robust accessibility features"}),"\n",(0,i.jsxs)(n.li,{children:["Uses the appropriate ARIA role (",(0,i.jsx)(n.code,{children:"switch"}),") for semantic HTML"]}),"\n",(0,i.jsx)(n.li,{children:"Supports keyboard navigation (can be toggled with Space or Enter)"}),"\n",(0,i.jsx)(n.li,{children:"Provides visual feedback for different states (checked/unchecked, focused, disabled)"}),"\n",(0,i.jsxs)(n.li,{children:["Supports connecting to a ",(0,i.jsx)(n.code,{children:"<Label>"})," component through the ",(0,i.jsx)(n.code,{children:"id"})," prop for proper labeling"]}),"\n",(0,i.jsx)(n.li,{children:"Can be screen reader friendly when used with proper labels"}),"\n",(0,i.jsxs)(n.li,{children:["When focused, shows a visible focus ring through the ",(0,i.jsx)(n.code,{children:"focus-visible:ring"})," utility classes"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.p,{children:"The Switch component:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Is built on top of ",(0,i.jsx)(n.a,{href:"https://www.radix-ui.com/primitives/docs/components/switch",children:"Radix UI's Switch Primitive"})]}),"\n",(0,i.jsxs)(n.li,{children:["Uses React's ",(0,i.jsx)(n.code,{children:"forwardRef"})," to allow ref forwarding, making it compatible with form libraries like React Hook Form"]}),"\n",(0,i.jsx)(n.li,{children:"Implements accessible keyboard navigation and focus management"}),"\n",(0,i.jsx)(n.li,{children:"Uses Tailwind CSS for styling with a consistent design language"}),"\n",(0,i.jsx)(n.li,{children:"Supports both controlled and uncontrolled usage patterns"}),"\n",(0,i.jsx)(n.li,{children:"Uses CSS transitions for smooth state changes"}),"\n",(0,i.jsx)(n.li,{children:"Provides visual feedback for different states through data attributes"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Missing Label"}),": Always provide a label for the Switch for accessibility. Use the ",(0,i.jsx)(n.code,{children:"<Label>"})," component and connect it with the ",(0,i.jsx)(n.code,{children:"id"})," prop."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<div className="flex items-center space-x-2">\n  <Switch id="mode" />\n  <Label htmlFor="mode">Dark Mode</Label>\n</div>\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Controlled vs Uncontrolled"}),": Decide whether to use the Switch as a controlled or uncontrolled component and be consistent. Don't mix ",(0,i.jsx)(n.code,{children:"checked"})," with ",(0,i.jsx)(n.code,{children:"defaultChecked"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Form Integration"}),": When using in forms, remember to use the appropriate form state management. With React Hook Form, use the ",(0,i.jsx)(n.code,{children:"Controller"})," component or the ",(0,i.jsx)(n.code,{children:"FormField"})," abstraction from the project's form components."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Server Components"}),": The Switch component uses client-side functionality and can't be used directly in React Server Components. Always use it in client components (with 'use client' directive)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Example test for the Switch component\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Switch } from '@/components/ui/switch';\n\ndescribe('Switch', () => {\n  it('renders correctly', () => {\n    render(<Switch />);\n    expect(screen.getByRole('switch')).toBeInTheDocument();\n  });\n  \n  it('toggles when clicked', async () => {\n    const onCheckedChange = jest.fn();\n    render(<Switch onCheckedChange={onCheckedChange} />);\n    \n    const switchElement = screen.getByRole('switch');\n    expect(switchElement).toHaveAttribute('aria-checked', 'false');\n    \n    await userEvent.click(switchElement);\n    expect(onCheckedChange).toHaveBeenCalledWith(true);\n  });\n  \n  it('can be controlled', () => {\n    const { rerender } = render(<Switch checked={false} />);\n    expect(screen.getByRole('switch')).toHaveAttribute('aria-checked', 'false');\n    \n    rerender(<Switch checked={true} />);\n    expect(screen.getByRole('switch')).toHaveAttribute('aria-checked', 'true');\n  });\n  \n  it('respects disabled state', async () => {\n    const onCheckedChange = jest.fn();\n    render(<Switch disabled onCheckedChange={onCheckedChange} />);\n    \n    const switchElement = screen.getByRole('switch');\n    expect(switchElement).toBeDisabled();\n    \n    await userEvent.click(switchElement);\n    expect(onCheckedChange).not.toHaveBeenCalled();\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox",children:"Checkbox"}),": Another form control for boolean values, but using a checkbox visual metaphor"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ToggleGroup"}),": A set of two-state buttons that can be toggled on or off"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch",children:"Theme Switch"}),": A specialized component that uses the Button component to toggle between light and dark themes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/form",children:"Form"}),": Used to create accessible forms that can include Switch components"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);