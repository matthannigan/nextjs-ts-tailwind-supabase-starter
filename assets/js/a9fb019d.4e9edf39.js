"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7879],{3172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"developer-guide/tools/jest","title":"Jest Configuration and Usage","description":"Jest is a delightful JavaScript testing framework with a focus on simplicity. This document covers how Jest is configured and used in this project for unit and integration testing.","source":"@site/docs/developer-guide/tools/jest.md","sourceDirName":"developer-guide/tools","slug":"/developer-guide/tools/jest","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/developer-guide/tools/jest.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Jest"},"sidebar":"start","previous":{"title":"Prettier","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier"},"next":{"title":"Husky & lint-staged","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged"}}');var i=n(4848),r=n(8453);const o={sidebar_position:3,sidebar_label:"Jest"},l="Jest Configuration and Usage",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Default Commands",id:"default-commands",level:2},{value:"Writing Tests",id:"writing-tests",level:2},{value:"1. Unit Tests for Utility Functions",id:"1-unit-tests-for-utility-functions",level:3},{value:"2. Component Testing with React Testing Library",id:"2-component-testing-with-react-testing-library",level:3},{value:"3. Testing Hooks",id:"3-testing-hooks",level:3},{value:"Test Directory Structure",id:"test-directory-structure",level:2},{value:"Mocking",id:"mocking",level:2},{value:"Mocking Modules",id:"mocking-modules",level:3},{value:"Mocking API Calls",id:"mocking-api-calls",level:3},{value:"Testing Asynchronous Code",id:"testing-asynchronous-code",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"jest-configuration-and-usage",children:"Jest Configuration and Usage"})}),"\n",(0,i.jsx)(t.p,{children:"Jest is a delightful JavaScript testing framework with a focus on simplicity. This document covers how Jest is configured and used in this project for unit and integration testing."}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Version"}),": 29.x"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Environment"}),": jsdom (for simulating browser environment)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Extensions"}),":","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ts-jest"}),": TypeScript support for Jest"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@testing-library/react"}),": React component testing"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@testing-library/jest-dom"}),": Custom Jest matchers for DOM testing"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@testing-library/user-event"}),": Simulating user events"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(t.p,{children:["The project should have a Jest configuration file at the project root. If not created yet, you can create a ",(0,i.jsx)(t.code,{children:"jest.config.js"})," file with the following configuration:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const nextJest = require('next/jest');\n\nconst createJestConfig = nextJest({\n  // Provide the path to your Next.js app\n  dir: './',\n});\n\n// Add any custom config to be passed to Jest\nconst customJestConfig = {\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n  testEnvironment: 'jest-environment-jsdom',\n  moduleNameMapper: {\n    // Handle module aliases\n    '^@/components/(.*)$': '<rootDir>/components/$1',\n    '^@/pages/(.*)$': '<rootDir>/pages/$1',\n    '^@/app/(.*)$': '<rootDir>/app/$1',\n    '^@/lib/(.*)$': '<rootDir>/lib/$1',\n  },\n  testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/'],\n  transform: {\n    // Use ts-jest to handle TypeScript files\n    '^.+\\\\.(ts|tsx)$': 'ts-jest',\n  },\n  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],\n  coveragePathIgnorePatterns: [\n    '<rootDir>/node_modules/',\n    '<rootDir>/.next/',\n    '<rootDir>/coverage/',\n  ],\n};\n\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config\nmodule.exports = createJestConfig(customJestConfig);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Additionally, create a ",(0,i.jsx)(t.code,{children:"jest.setup.js"})," file that imports the testing library extensions:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// jest.setup.js\nimport '@testing-library/jest-dom';\n"})}),"\n",(0,i.jsx)(t.h2,{id:"default-commands",children:"Default Commands"}),"\n",(0,i.jsx)(t.p,{children:"The following npm scripts are available for testing:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Run all tests"}),": Runs all test files"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm test\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Watch mode"}),": Runs tests in watch mode, which will rerun tests when files change"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run test:watch\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Coverage report"}),": Generates a test coverage report"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run test:coverage\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"writing-tests",children:"Writing Tests"}),"\n",(0,i.jsx)(t.h3,{id:"1-unit-tests-for-utility-functions",children:"1. Unit Tests for Utility Functions"}),"\n",(0,i.jsxs)(t.p,{children:["Place test files alongside the files they are testing with a ",(0,i.jsx)(t.code,{children:".test.ts"})," or ",(0,i.jsx)(t.code,{children:".test.tsx"})," extension."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"// utils/formatDate.test.ts\nimport { formatDate } from './formatDate';\n\ndescribe('formatDate', () => {\n  it('formats date correctly', () => {\n    const date = new Date('2023-01-01');\n    expect(formatDate(date)).toBe('01/01/2023');\n  });\n\n  it('handles invalid dates', () => {\n    expect(formatDate(null)).toBe('');\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"2-component-testing-with-react-testing-library",children:"2. Component Testing with React Testing Library"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"// components/button.test.tsx\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Button from './button';\n\ndescribe('Button', () => {\n  it('renders correctly', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByRole('button')).toHaveTextContent('Click me');\n  });\n\n  it('calls onClick when clicked', async () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    \n    await userEvent.click(screen.getByRole('button'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"3-testing-hooks",children:"3. Testing Hooks"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"// hooks/useCounter.test.ts\nimport { renderHook, act } from '@testing-library/react';\nimport useCounter from './useCounter';\n\ndescribe('useCounter', () => {\n  it('increments counter', () => {\n    const { result } = renderHook(() => useCounter());\n    \n    act(() => {\n      result.current.increment();\n    });\n    \n    expect(result.current.count).toBe(1);\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-directory-structure",children:"Test Directory Structure"}),"\n",(0,i.jsx)(t.p,{children:"The recommended directory structure for tests:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"project/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 Button.tsx\n\u2502   \u2514\u2500\u2500 Button.test.tsx\n\u251c\u2500\u2500 lib/\n\u2502   \u251c\u2500\u2500 utils.ts\n\u2502   \u2514\u2500\u2500 utils.test.ts\n\u251c\u2500\u2500 app/\n\u2502   \u2514\u2500\u2500 __tests__/\n\u2502       \u2514\u2500\u2500 page.test.tsx\n\u2514\u2500\u2500 __tests__/\n    \u2514\u2500\u2500 integration/\n        \u2514\u2500\u2500 form-submission.test.tsx\n"})}),"\n",(0,i.jsx)(t.h2,{id:"mocking",children:"Mocking"}),"\n",(0,i.jsx)(t.h3,{id:"mocking-modules",children:"Mocking Modules"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Mocking a module\njest.mock('next/router', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    pathname: '/',\n    query: {},\n  }),\n}));\n"})}),"\n",(0,i.jsx)(t.h3,{id:"mocking-api-calls",children:"Mocking API Calls"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Mocking fetch\nglobal.fetch = jest.fn(() =>\n  Promise.resolve({\n    json: () => Promise.resolve({ data: 'mocked data' }),\n    ok: true,\n  })\n) as jest.Mock;\n"})}),"\n",(0,i.jsx)(t.h2,{id:"testing-asynchronous-code",children:"Testing Asynchronous Code"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Testing promises\nit('fetches data asynchronously', async () => {\n  const data = await fetchData();\n  expect(data).toEqual({ success: true });\n});\n\n// Testing with waitFor\nit('updates after async operation', async () => {\n  render(<AsyncComponent />);\n  \n  await waitFor(() => {\n    expect(screen.getByText('Loaded')).toBeInTheDocument();\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Use Testing Library queries appropriately"}),": Prefer queries that reflect how users interact with your application (getByRole, getByLabelText) over implementation details (getByTestId)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Keep tests simple"}),": Each test should verify one specific behavior"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Avoid testing implementation details"}),": Focus on testing behavior, not implementation"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Use the right assertions"}),": Be specific about what you're testing"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Organize tests with describe blocks"}),": Group related tests together"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Follow the AAA pattern"}),": Arrange, Act, Assert"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Run tests in CI"}),": Include tests in your continuous integration workflow"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);