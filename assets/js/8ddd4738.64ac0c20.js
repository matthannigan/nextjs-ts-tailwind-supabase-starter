"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9145],{4809:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"components/ui/table","title":"Table Component","description":"The Table component is a responsive and composable data display system that provides a structured way to present tabular information with support for headers, body, rows, cells, captions, and footers.","source":"@site/docs/components/ui/table.md","sourceDirName":"components/ui","slug":"/components/ui/table","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/table","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/ui/table.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Table"},"sidebar":"components","previous":{"title":"Search Input","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input"},"next":{"title":"Tabs","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs"}}');var a=n(4848),s=n(8453);const r={sidebar_label:"Table"},i="Table Component",o={},d=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"With Caption and Footer",id:"with-caption-and-footer",level:3},{value:"Customized Table with Selection",id:"customized-table-with-selection",level:3},{value:"Props",id:"props",level:2},{value:"Table",id:"table",level:3},{value:"TableHeader",id:"tableheader",level:3},{value:"TableBody",id:"tablebody",level:3},{value:"TableFooter",id:"tablefooter",level:3},{value:"TableRow",id:"tablerow",level:3},{value:"TableHead",id:"tablehead",level:3},{value:"TableCell",id:"tablecell",level:3},{value:"TableCaption",id:"tablecaption",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with React Hook Form",id:"integration-with-react-hook-form",level:3},{value:"Integration with TanStack Table (React Table)",id:"integration-with-tanstack-table-react-table",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function c(e){const l={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(l.header,{children:(0,a.jsx)(l.h1,{id:"table-component",children:"Table Component"})}),"\n",(0,a.jsx)(l.p,{children:"The Table component is a responsive and composable data display system that provides a structured way to present tabular information with support for headers, body, rows, cells, captions, and footers."}),"\n",(0,a.jsx)(l.h2,{id:"import",children:"Import"}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:"import { \n  Table, \n  TableHeader, \n  TableBody, \n  TableFooter, \n  TableHead, \n  TableRow, \n  TableCell, \n  TableCaption \n} from '@/components/ui/table';\n"})}),"\n",(0,a.jsx)(l.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(l.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:"<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Name</TableHead>\n      <TableHead>Status</TableHead>\n      <TableHead>Role</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>John Doe</TableCell>\n      <TableCell>Active</TableCell>\n      <TableCell>Developer</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>Jane Smith</TableCell>\n      <TableCell>Inactive</TableCell>\n      <TableCell>Designer</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n"})}),"\n",(0,a.jsx)(l.h3,{id:"with-caption-and-footer",children:"With Caption and Footer"}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'<Table>\n  <TableCaption>Employee list with roles and status</TableCaption>\n  <TableHeader>\n    <TableRow>\n      <TableHead className="w-[200px]">Name</TableHead>\n      <TableHead>Status</TableHead>\n      <TableHead className="text-right">Role</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell className="font-medium">John Doe</TableCell>\n      <TableCell>Active</TableCell>\n      <TableCell className="text-right">Developer</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell className="font-medium">Jane Smith</TableCell>\n      <TableCell>Inactive</TableCell>\n      <TableCell className="text-right">Designer</TableCell>\n    </TableRow>\n  </TableBody>\n  <TableFooter>\n    <TableRow>\n      <TableCell colSpan={2}>Total</TableCell>\n      <TableCell className="text-right">2 Employees</TableCell>\n    </TableRow>\n  </TableFooter>\n</Table>\n'})}),"\n",(0,a.jsx)(l.h3,{id:"customized-table-with-selection",children:"Customized Table with Selection"}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead className="w-[50px]">\n        <input type="checkbox" aria-label="Select all" />\n      </TableHead>\n      <TableHead>Name</TableHead>\n      <TableHead>Status</TableHead>\n      <TableHead>Role</TableHead>\n      <TableHead className="text-right">Actions</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow data-state="selected">\n      <TableCell>\n        <input type="checkbox" aria-label="Select row" checked />\n      </TableCell>\n      <TableCell className="font-medium">John Doe</TableCell>\n      <TableCell>Active</TableCell>\n      <TableCell>Developer</TableCell>\n      <TableCell className="text-right">\n        <button className="text-blue-500 hover:underline">Edit</button>\n      </TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>\n        <input type="checkbox" aria-label="Select row" />\n      </TableCell>\n      <TableCell className="font-medium">Jane Smith</TableCell>\n      <TableCell>Inactive</TableCell>\n      <TableCell>Designer</TableCell>\n      <TableCell className="text-right">\n        <button className="text-blue-500 hover:underline">Edit</button>\n      </TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n'})}),"\n",(0,a.jsx)(l.h2,{id:"props",children:"Props"}),"\n",(0,a.jsx)(l.h3,{id:"table",children:"Table"}),"\n",(0,a.jsxs)(l.table,{children:[(0,a.jsx)(l.thead,{children:(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.th,{children:"Prop"}),(0,a.jsx)(l.th,{children:"Type"}),(0,a.jsx)(l.th,{children:"Default"}),(0,a.jsx)(l.th,{children:"Description"})]})}),(0,a.jsxs)(l.tbody,{children:[(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"className"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"string"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"undefined"})}),(0,a.jsx)(l.td,{children:"Additional classes to apply to the table"})]}),(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"...rest"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"React.HTMLAttributes<HTMLTableElement>"})}),(0,a.jsx)(l.td,{children:"-"}),(0,a.jsx)(l.td,{children:"All other props are passed to the underlying table element"})]})]})]}),"\n",(0,a.jsx)(l.h3,{id:"tableheader",children:"TableHeader"}),"\n",(0,a.jsxs)(l.table,{children:[(0,a.jsx)(l.thead,{children:(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.th,{children:"Prop"}),(0,a.jsx)(l.th,{children:"Type"}),(0,a.jsx)(l.th,{children:"Default"}),(0,a.jsx)(l.th,{children:"Description"})]})}),(0,a.jsxs)(l.tbody,{children:[(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"className"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"string"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"undefined"})}),(0,a.jsx)(l.td,{children:"Additional classes to apply to the table header"})]}),(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"...rest"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"React.HTMLAttributes<HTMLTableSectionElement>"})}),(0,a.jsx)(l.td,{children:"-"}),(0,a.jsx)(l.td,{children:"All other props are passed to the underlying thead element"})]})]})]}),"\n",(0,a.jsx)(l.h3,{id:"tablebody",children:"TableBody"}),"\n",(0,a.jsxs)(l.table,{children:[(0,a.jsx)(l.thead,{children:(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.th,{children:"Prop"}),(0,a.jsx)(l.th,{children:"Type"}),(0,a.jsx)(l.th,{children:"Default"}),(0,a.jsx)(l.th,{children:"Description"})]})}),(0,a.jsxs)(l.tbody,{children:[(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"className"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"string"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"undefined"})}),(0,a.jsx)(l.td,{children:"Additional classes to apply to the table body"})]}),(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"...rest"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"React.HTMLAttributes<HTMLTableSectionElement>"})}),(0,a.jsx)(l.td,{children:"-"}),(0,a.jsx)(l.td,{children:"All other props are passed to the underlying tbody element"})]})]})]}),"\n",(0,a.jsx)(l.h3,{id:"tablefooter",children:"TableFooter"}),"\n",(0,a.jsxs)(l.table,{children:[(0,a.jsx)(l.thead,{children:(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.th,{children:"Prop"}),(0,a.jsx)(l.th,{children:"Type"}),(0,a.jsx)(l.th,{children:"Default"}),(0,a.jsx)(l.th,{children:"Description"})]})}),(0,a.jsxs)(l.tbody,{children:[(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"className"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"string"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"undefined"})}),(0,a.jsx)(l.td,{children:"Additional classes to apply to the table footer"})]}),(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"...rest"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"React.HTMLAttributes<HTMLTableSectionElement>"})}),(0,a.jsx)(l.td,{children:"-"}),(0,a.jsx)(l.td,{children:"All other props are passed to the underlying tfoot element"})]})]})]}),"\n",(0,a.jsx)(l.h3,{id:"tablerow",children:"TableRow"}),"\n",(0,a.jsxs)(l.table,{children:[(0,a.jsx)(l.thead,{children:(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.th,{children:"Prop"}),(0,a.jsx)(l.th,{children:"Type"}),(0,a.jsx)(l.th,{children:"Default"}),(0,a.jsx)(l.th,{children:"Description"})]})}),(0,a.jsxs)(l.tbody,{children:[(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"className"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"string"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"undefined"})}),(0,a.jsx)(l.td,{children:"Additional classes to apply to the table row"})]}),(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"...rest"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"React.HTMLAttributes<HTMLTableRowElement>"})}),(0,a.jsx)(l.td,{children:"-"}),(0,a.jsx)(l.td,{children:"All other props are passed to the underlying tr element"})]})]})]}),"\n",(0,a.jsx)(l.h3,{id:"tablehead",children:"TableHead"}),"\n",(0,a.jsxs)(l.table,{children:[(0,a.jsx)(l.thead,{children:(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.th,{children:"Prop"}),(0,a.jsx)(l.th,{children:"Type"}),(0,a.jsx)(l.th,{children:"Default"}),(0,a.jsx)(l.th,{children:"Description"})]})}),(0,a.jsxs)(l.tbody,{children:[(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"className"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"string"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"undefined"})}),(0,a.jsx)(l.td,{children:"Additional classes to apply to the table head cell"})]}),(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"...rest"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"React.ThHTMLAttributes<HTMLTableCellElement>"})}),(0,a.jsx)(l.td,{children:"-"}),(0,a.jsx)(l.td,{children:"All other props are passed to the underlying th element"})]})]})]}),"\n",(0,a.jsx)(l.h3,{id:"tablecell",children:"TableCell"}),"\n",(0,a.jsxs)(l.table,{children:[(0,a.jsx)(l.thead,{children:(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.th,{children:"Prop"}),(0,a.jsx)(l.th,{children:"Type"}),(0,a.jsx)(l.th,{children:"Default"}),(0,a.jsx)(l.th,{children:"Description"})]})}),(0,a.jsxs)(l.tbody,{children:[(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"className"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"string"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"undefined"})}),(0,a.jsx)(l.td,{children:"Additional classes to apply to the table cell"})]}),(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"...rest"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"React.TdHTMLAttributes<HTMLTableCellElement>"})}),(0,a.jsx)(l.td,{children:"-"}),(0,a.jsx)(l.td,{children:"All other props are passed to the underlying td element"})]})]})]}),"\n",(0,a.jsx)(l.h3,{id:"tablecaption",children:"TableCaption"}),"\n",(0,a.jsxs)(l.table,{children:[(0,a.jsx)(l.thead,{children:(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.th,{children:"Prop"}),(0,a.jsx)(l.th,{children:"Type"}),(0,a.jsx)(l.th,{children:"Default"}),(0,a.jsx)(l.th,{children:"Description"})]})}),(0,a.jsxs)(l.tbody,{children:[(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"className"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"string"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"undefined"})}),(0,a.jsx)(l.td,{children:"Additional classes to apply to the table caption"})]}),(0,a.jsxs)(l.tr,{children:[(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"...rest"})}),(0,a.jsx)(l.td,{children:(0,a.jsx)(l.code,{children:"React.HTMLAttributes<HTMLTableCaptionElement>"})}),(0,a.jsx)(l.td,{children:"-"}),(0,a.jsx)(l.td,{children:"All other props are passed to the underlying caption element"})]})]})]}),"\n",(0,a.jsx)(l.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:"// Component Type Definitions\ninterface TableProps extends React.HTMLAttributes<HTMLTableElement> {}\n\ninterface TableHeaderProps extends React.HTMLAttributes<HTMLTableSectionElement> {}\n\ninterface TableBodyProps extends React.HTMLAttributes<HTMLTableSectionElement> {}\n\ninterface TableFooterProps extends React.HTMLAttributes<HTMLTableSectionElement> {}\n\ninterface TableRowProps extends React.HTMLAttributes<HTMLTableRowElement> {}\n\ninterface TableHeadProps extends React.ThHTMLAttributes<HTMLTableCellElement> {}\n\ninterface TableCellProps extends React.TdHTMLAttributes<HTMLTableCellElement> {}\n\ninterface TableCaptionProps extends React.HTMLAttributes<HTMLTableCaptionElement> {}\n"})}),"\n",(0,a.jsx)(l.h2,{id:"customization",children:"Customization"}),"\n",(0,a.jsx)(l.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,a.jsx)(l.p,{children:"The table components can be customized using the following approaches:"}),"\n",(0,a.jsxs)(l.ol,{children:["\n",(0,a.jsxs)(l.li,{children:["Using the ",(0,a.jsx)(l.code,{children:"className"})," prop to add additional Tailwind classes to any component"]}),"\n",(0,a.jsx)(l.li,{children:"Extending the component with custom styles"}),"\n",(0,a.jsxs)(l.li,{children:["Applying data attributes like ",(0,a.jsx)(l.code,{children:'data-state="selected"'})," to TableRow for specific styling"]}),"\n"]}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'// Example of custom styling\n<Table className="min-w-[800px] rounded-md border">\n  <TableHeader className="bg-gray-100">\n    <TableRow>\n      <TableHead className="w-[100px] font-bold text-gray-700">ID</TableHead>\n      <TableHead className="font-bold text-gray-700">Name</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow className="hover:bg-blue-50">\n      <TableCell className="font-medium">1</TableCell>\n      <TableCell>John Doe</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n'})}),"\n",(0,a.jsx)(l.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:"import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@/components/ui/table';\n\nexport function SortableTable({ data, columns, sortColumn, sortDirection, onSort, ...props }) {\n  return (\n    <Table {...props}>\n      <TableHeader>\n        <TableRow>\n          {columns.map((column) => (\n            <TableHead \n              key={column.key}\n              className={`cursor-pointer ${sortColumn === column.key ? 'text-primary' : ''}`}\n              onClick={() => onSort(column.key)}\n            >\n              {column.label}\n              {sortColumn === column.key && (\n                <span className=\"ml-1\">{sortDirection === 'asc' ? '\u2191' : '\u2193'}</span>\n              )}\n            </TableHead>\n          ))}\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {data.map((row, rowIndex) => (\n          <TableRow key={rowIndex}>\n            {columns.map((column) => (\n              <TableCell key={column.key}>{row[column.key]}</TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n"})}),"\n",(0,a.jsx)(l.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(l.h3,{id:"integration-with-react-hook-form",children:"Integration with React Hook Form"}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'import { useForm } from \'react-hook-form\';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \'@/components/ui/table\';\nimport { Button } from \'@/components/ui/button\';\n\nexport function EditableTable({ initialData }) {\n  const { register, handleSubmit, formState: { errors } } = useForm({\n    defaultValues: {\n      rows: initialData\n    }\n  });\n\n  const onSubmit = (data) => {\n    console.log(\'Form data:\', data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Name</TableHead>\n            <TableHead>Email</TableHead>\n            <TableHead>Role</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {initialData.map((row, index) => (\n            <TableRow key={index}>\n              <TableCell>\n                <input\n                  className="w-full p-2 border rounded"\n                  {...register(`rows.${index}.name`, { required: \'Name is required\' })}\n                />\n                {errors.rows?.[index]?.name && (\n                  <p className="text-red-500 text-xs mt-1">{errors.rows[index].name.message}</p>\n                )}\n              </TableCell>\n              <TableCell>\n                <input\n                  className="w-full p-2 border rounded"\n                  type="email"\n                  {...register(`rows.${index}.email`, { \n                    required: \'Email is required\',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                      message: \'Invalid email address\'\n                    }\n                  })}\n                />\n                {errors.rows?.[index]?.email && (\n                  <p className="text-red-500 text-xs mt-1">{errors.rows[index].email.message}</p>\n                )}\n              </TableCell>\n              <TableCell>\n                <select\n                  className="w-full p-2 border rounded"\n                  {...register(`rows.${index}.role`, { required: \'Role is required\' })}\n                >\n                  <option value="">Select role</option>\n                  <option value="admin">Admin</option>\n                  <option value="user">User</option>\n                  <option value="editor">Editor</option>\n                </select>\n                {errors.rows?.[index]?.role && (\n                  <p className="text-red-500 text-xs mt-1">{errors.rows[index].role.message}</p>\n                )}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <div className="mt-4">\n        <Button type="submit">Save Changes</Button>\n      </div>\n    </form>\n  );\n}\n'})}),"\n",(0,a.jsx)(l.h3,{id:"integration-with-tanstack-table-react-table",children:"Integration with TanStack Table (React Table)"}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:"import { useState } from 'react';\nimport {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n  SortingState,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\n\nexport function DataTable({ columns, data }) {\n  const [sorting, setSorting] = useState<SortingState>([]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n    },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n  });\n\n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => (\n                <TableHead\n                  key={header.id}\n                  className={header.column.getCanSort() ? 'cursor-pointer select-none' : ''}\n                  onClick={header.column.getToggleSortingHandler()}\n                >\n                  {flexRender(header.column.columnDef.header, header.getContext())}\n                  {{\n                    asc: ' \u2191',\n                    desc: ' \u2193',\n                  }[header.column.getIsSorted() as string] ?? null}\n                </TableHead>\n              ))}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow key={row.id} data-state={row.getIsSelected() ? 'selected' : undefined}>\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n"})}),"\n",(0,a.jsx)(l.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,a.jsx)(l.p,{children:"The component responds to different screen sizes in the following ways:"}),"\n",(0,a.jsxs)(l.ul,{children:["\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.strong,{children:"Mobile"}),": The table becomes horizontally scrollable within its container to accommodate all columns"]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.strong,{children:"Tablet"}),": Still horizontally scrollable but with more visible columns"]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.strong,{children:"Desktop"}),": Full table is visible with optimum spacing"]}),"\n"]}),"\n",(0,a.jsx)(l.p,{children:"For improved mobile responsiveness, consider these approaches:"}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'// Responsive table with stacked layout on mobile\nfunction ResponsiveTable({ data }) {\n  return (\n    <div>\n      {/* Desktop and tablet view */}\n      <div className="hidden sm:block">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Name</TableHead>\n              <TableHead>Email</TableHead>\n              <TableHead>Role</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {data.map((item) => (\n              <TableRow key={item.id}>\n                <TableCell>{item.name}</TableCell>\n                <TableCell>{item.email}</TableCell>\n                <TableCell>{item.role}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n      \n      {/* Mobile view - Cards instead of table */}\n      <div className="grid grid-cols-1 gap-4 sm:hidden">\n        {data.map((item) => (\n          <div key={item.id} className="bg-white p-4 rounded shadow">\n            <div className="font-medium">{item.name}</div>\n            <div className="text-sm text-gray-500">{item.email}</div>\n            <div className="mt-2 text-sm">{item.role}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,a.jsx)(l.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,a.jsx)(l.p,{children:"The Table component follows these accessibility best practices:"}),"\n",(0,a.jsxs)(l.ul,{children:["\n",(0,a.jsxs)(l.li,{children:["Semantic HTML structure using proper ",(0,a.jsx)(l.code,{children:"<table>"}),", ",(0,a.jsx)(l.code,{children:"<thead>"}),", ",(0,a.jsx)(l.code,{children:"<tbody>"}),", ",(0,a.jsx)(l.code,{children:"<tfoot>"}),", ",(0,a.jsx)(l.code,{children:"<tr>"}),", ",(0,a.jsx)(l.code,{children:"<th>"}),", and ",(0,a.jsx)(l.code,{children:"<td>"})," elements"]}),"\n",(0,a.jsxs)(l.li,{children:["Appropriate captions via the ",(0,a.jsx)(l.code,{children:"<TableCaption>"})," component for screen readers"]}),"\n",(0,a.jsxs)(l.li,{children:["Support for row selection with proper ",(0,a.jsx)(l.code,{children:'data-state="selected"'})," attributes"]}),"\n",(0,a.jsx)(l.li,{children:"Proper alignment of text for readability"}),"\n",(0,a.jsx)(l.li,{children:"Support for column headers with proper scope"}),"\n",(0,a.jsx)(l.li,{children:"Support for keyboard navigation through table cells"}),"\n"]}),"\n",(0,a.jsx)(l.p,{children:"For improved accessibility:"}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:'<Table aria-label="User data table">\n  <TableCaption>List of users and their roles in the system</TableCaption>\n  <TableHeader>\n    <TableRow>\n      <TableHead scope="col">Name</TableHead>\n      <TableHead scope="col">Email</TableHead>\n      <TableHead scope="col">Role</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    {users.map((user) => (\n      <TableRow key={user.id}>\n        <TableCell>{user.name}</TableCell>\n        <TableCell>{user.email}</TableCell>\n        <TableCell>{user.role}</TableCell>\n      </TableRow>\n    ))}\n  </TableBody>\n</Table>\n'})}),"\n",(0,a.jsx)(l.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,a.jsx)(l.p,{children:"The Table component:"}),"\n",(0,a.jsxs)(l.ul,{children:["\n",(0,a.jsx)(l.li,{children:"Uses React.forwardRef to allow ref forwarding to the underlying HTML elements"}),"\n",(0,a.jsx)(l.li,{children:"Wraps the table in a responsive container with overflow handling"}),"\n",(0,a.jsx)(l.li,{children:"Uses Tailwind's utility classes for styling and responsive design"}),"\n",(0,a.jsx)(l.li,{children:"Applies hover states to rows for better user interaction"}),"\n",(0,a.jsx)(l.li,{children:"Supports selection states through data attributes"}),"\n",(0,a.jsx)(l.li,{children:"Maintains border styling consistently between rows and on the table boundaries"}),"\n",(0,a.jsx)(l.li,{children:"Properly aligns checkboxes and form elements within cells"}),"\n",(0,a.jsx)(l.li,{children:"Uses appropriate text colors for header, body, and footer elements"}),"\n"]}),"\n",(0,a.jsx)(l.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,a.jsxs)(l.ul,{children:["\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.strong,{children:"Responsive overflow issues"}),": By default, tables can overflow on smaller screens. The component addresses this by wrapping the table in a container with ",(0,a.jsx)(l.code,{children:"overflow-auto"}),", but for complex tables, consider a responsive redesign approach."]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.strong,{children:"Row selection management"}),": When implementing row selection, ensure you're properly tracking selected states and applying the ",(0,a.jsx)(l.code,{children:'data-state="selected"'})," attribute."]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.strong,{children:"Column width management"}),": For tables with many columns, explicitly set widths using classes like ",(0,a.jsx)(l.code,{children:"w-[200px]"})," on TableHead components to control layout."]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.strong,{children:"Form integration conflicts"}),": When embedding form elements in table cells, ensure proper event propagation and styling compatibility."]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.strong,{children:"TypeScript prop spreading"}),": When extending the components, ensure proper type spreading to maintain type safety."]}),"\n"]}),"\n",(0,a.jsx)(l.h2,{id:"testing",children:"Testing"}),"\n",(0,a.jsx)(l.pre,{children:(0,a.jsx)(l.code,{className:"language-tsx",children:"// Example test for the Table component\nimport { render, screen } from '@testing-library/react';\nimport { Table, TableHeader, TableBody, TableRow, TableHead, TableCell } from '@/components/ui/table';\n\ndescribe('Table', () => {\n  it('renders a basic table correctly', () => {\n    render(\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Name</TableHead>\n            <TableHead>Role</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          <TableRow>\n            <TableCell>John Doe</TableCell>\n            <TableCell>Developer</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    );\n    \n    expect(screen.getByText('Name')).toBeInTheDocument();\n    expect(screen.getByText('Role')).toBeInTheDocument();\n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n    expect(screen.getByText('Developer')).toBeInTheDocument();\n  });\n  \n  it('applies custom className to table elements', () => {\n    render(\n      <Table className=\"test-table\">\n        <TableHeader className=\"test-header\">\n          <TableRow className=\"test-row\">\n            <TableHead className=\"test-head\">Name</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody className=\"test-body\">\n          <TableRow className=\"test-row\">\n            <TableCell className=\"test-cell\">John Doe</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    );\n    \n    expect(document.querySelector('.test-table')).toBeInTheDocument();\n    expect(document.querySelector('.test-header')).toBeInTheDocument();\n    expect(document.querySelector('.test-body')).toBeInTheDocument();\n    expect(document.querySelectorAll('.test-row')).toHaveLength(2);\n    expect(document.querySelector('.test-head')).toBeInTheDocument();\n    expect(document.querySelector('.test-cell')).toBeInTheDocument();\n  });\n});\n"})}),"\n",(0,a.jsx)(l.h2,{id:"related-components",children:"Related Components"}),"\n",(0,a.jsxs)(l.ul,{children:["\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.a,{href:"https://ui.shadcn.com/docs/components/data-table",children:"DataTable"}),": Extension of the Table component that adds sorting, filtering, and pagination using TanStack Table."]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/form",children:"Form"}),": Can be used together with Table to create editable data tables."]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/card",children:"Card"}),": Alternative to tables for displaying data in a more mobile-friendly format."]}),"\n",(0,a.jsxs)(l.li,{children:[(0,a.jsx)(l.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/select",children:"Select"}),": Often used within table cells for data selection operations."]}),"\n"]})]})}function h(e={}){const{wrapper:l}={...(0,s.R)(),...e.components};return l?(0,a.jsx)(l,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,l,n)=>{n.d(l,{R:()=>r,x:()=>i});var t=n(6540);const a={},s=t.createContext(a);function r(e){const l=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function i(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:l},e.children)}}}]);