"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[2543],{6592:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"components/navigation/navbar-mobile","title":"NavbarMobile Component","description":"A fixed-position navigation bar component designed for mobile devices that provides a consistent, accessible navigation interface anchored at the bottom of the screen with icon-based navigation items.","source":"@site/docs/components/navigation/navbar-mobile.md","sourceDirName":"components/navigation","slug":"/components/navigation/navbar-mobile","permalink":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/navigation/navbar-mobile.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Navbar Mobile"},"sidebar":"components","previous":{"title":"Navigation Components","permalink":"/nextjs-ts-tailwind-supabase-starter/components/navigation/"},"next":{"title":"Navigation Menu","permalink":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu"}}');var o=t(4848),a=t(8453);const s={sidebar_label:"Navbar Mobile"},r="NavbarMobile Component",l={},c=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"With Custom Navigation Items",id:"with-custom-navigation-items",level:3},{value:"Props",id:"props",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with React Hook Form",id:"integration-with-react-hook-form",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"navbarmobile-component",children:"NavbarMobile Component"})}),"\n",(0,o.jsx)(n.p,{children:"A fixed-position navigation bar component designed for mobile devices that provides a consistent, accessible navigation interface anchored at the bottom of the screen with icon-based navigation items."}),"\n",(0,o.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import NavbarMobile from '@/components/navigation/navbar-mobile';\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// In a layout component\nimport NavbarMobile from '@/components/navigation/navbar-mobile';\n\nexport default function MobileLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <main>{children}</main>\n      <NavbarMobile />\n    </>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"with-custom-navigation-items",children:"With Custom Navigation Items"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import NavbarMobile from '@/components/navigation/navbar-mobile';\nimport { Home, Settings, User, ShoppingCart } from 'lucide-react';\n\n// Note: This is for illustration. The component currently doesn't support custom items through props.\n// You would need to modify the component source to implement this functionality.\n"})}),"\n",(0,o.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,o.jsxs)(n.p,{children:["Currently, ",(0,o.jsx)(n.code,{children:"NavbarMobile"})," doesn't accept any props as it has a fixed set of navigation items defined internally. To customize the navigation items, you would need to modify the component source code."]}),"\n",(0,o.jsxs)(n.p,{children:["The internal ",(0,o.jsx)(n.code,{children:"NavItem"})," component accepts the following props:"]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Prop"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"href"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"The URL to navigate to when the item is clicked"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"icon"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"JSX.Element"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"The SVG icon element to display for the navigation item"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"label"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"The text label for the navigation item"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// Component Type Definition\ninterface NavItemProps {\n  href: string;\n  icon: JSX.Element;\n  label: string;\n}\n\nconst NavItem: FC<NavItemProps> = ({ href, icon, label }) => {\n  // Component implementation\n};\n\nconst NavbarMobile: FC = () => {\n  // Component implementation\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,o.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,o.jsx)(n.p,{children:"The component can be customized using the following approaches:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Directly modifying the Tailwind classes in the component:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["For the main container: ",(0,o.jsx)(n.code,{children:'className="fixed bottom-0 left-0 z-50 w-full h-16 bg-white border-t border-gray-200 dark:bg-gray-700 dark:border-gray-600"'})]}),"\n",(0,o.jsxs)(n.li,{children:["For the grid container: ",(0,o.jsx)(n.code,{children:'className="grid h-full max-w-lg grid-cols-4 mx-auto font-medium"'})]}),"\n",(0,o.jsxs)(n.li,{children:["For individual navigation items: Modify styles in the ",(0,o.jsx)(n.code,{children:"NavItem"})," component"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Extending the component with additional Tailwind classes:"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import NavbarMobile from '@/components/navigation/navbar-mobile';\n\n// Create a wrapper component with additional styles\nexport function CustomNavbarMobile() {\n  return (\n    <div className=\"custom-container\">\n      <NavbarMobile />\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,o.jsx)(n.p,{children:"To extend the component with custom navigation items, you would need to create a new component based on the original:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { FC } from \'react\';\nimport Link from \'next/link\';\nimport { usePathname } from \'next/navigation\';\nimport { Home, Settings, Users, CreditCard } from \'lucide-react\';\n\ninterface NavItemProps {\n  href: string;\n  icon: JSX.Element;\n  label: string;\n}\n\nconst NavItem: FC<NavItemProps> = ({ href, icon, label }) => {\n  const pathname = usePathname();\n  const isActive = pathname === href;\n\n  return (\n    <Link\n      href={href}\n      className="inline-flex flex-col items-center justify-center px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group"\n    >\n      <div\n        className={`w-5 h-5 mb-2 ${isActive ? \'text-blue-600 dark:text-blue-500\' : \'text-gray-500 dark:text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-500\'}`}\n      >\n        {icon}\n      </div>\n      <span\n        className={`text-sm ${isActive ? \'text-blue-600 dark:text-blue-500\' : \'text-gray-500 dark:text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-500\'}`}\n      >\n        {label}\n      </span>\n    </Link>\n  );\n};\n\n// Custom version with different navigation items\nconst CustomNavbarMobile: FC = () => {\n  return (\n    <div className="fixed bottom-0 left-0 z-50 w-full h-16 bg-white border-t border-gray-200 dark:bg-gray-700 dark:border-gray-600">\n      <div className="grid h-full max-w-lg grid-cols-4 mx-auto font-medium">\n        <NavItem\n          href="/"\n          icon={<Home className="w-full h-full" />}\n          label="Home"\n        />\n        <NavItem\n          href="/dashboard"\n          icon={<CreditCard className="w-full h-full" />}\n          label="Dashboard"\n        />\n        <NavItem\n          href="/team"\n          icon={<Users className="w-full h-full" />}\n          label="Team"\n        />\n        <NavItem\n          href="/settings"\n          icon={<Settings className="w-full h-full" />}\n          label="Settings"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CustomNavbarMobile;\n'})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{id:"integration-with-react-hook-form",children:"Integration with React Hook Form"}),"\n",(0,o.jsx)(n.p,{children:"The NavbarMobile component is a navigation element and doesn't directly integrate with forms. However, you can use it in a layout that contains forms:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import NavbarMobile from \'@/components/navigation/navbar-mobile\';\nimport { useForm } from \'react-hook-form\';\n\nexport default function FormPage() {\n  const { register, handleSubmit } = useForm();\n  \n  const onSubmit = (data) => {\n    console.log(data);\n  };\n  \n  return (\n    <>\n      <div className="p-4 pb-20"> {/* Add padding at the bottom to prevent form elements from being hidden by the navbar */}\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input {...register(\'name\')} className="w-full p-2 border rounded" />\n          <button type="submit" className="mt-4 p-2 bg-blue-500 text-white rounded">\n            Submit\n          </button>\n        </form>\n      </div>\n      <NavbarMobile />\n    </>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import NavbarMobile from '@/components/navigation/navbar-mobile';\nimport Header from '@/components/layout/header';\n\nexport default function MobileLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1 pb-16\"> {/* Add padding bottom to prevent content from being hidden by navbar */}\n        {children}\n      </main>\n      <NavbarMobile />\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,o.jsx)(n.p,{children:"The NavbarMobile component is specifically designed for mobile devices and is typically used in a mobile-specific layout. For a fully responsive navigation system, you would need to implement conditional rendering based on screen size:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useEffect, useState } from 'react';\nimport NavbarMobile from '@/components/navigation/navbar-mobile';\nimport DesktopNavbar from '@/components/navigation/desktop-navbar';\n\nexport default function ResponsiveLayout({ children }: { children: React.ReactNode }) {\n  const [isMobile, setIsMobile] = useState(false);\n  \n  useEffect(() => {\n    const checkIfMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    \n    // Initial check\n    checkIfMobile();\n    \n    // Add event listener\n    window.addEventListener('resize', checkIfMobile);\n    \n    // Cleanup\n    return () => window.removeEventListener('resize', checkIfMobile);\n  }, []);\n  \n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      {!isMobile && <DesktopNavbar />}\n      <main className={`flex-1 ${isMobile ? 'pb-16' : ''}`}>\n        {children}\n      </main>\n      {isMobile && <NavbarMobile />}\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"The component responds to different screen sizes in the following ways:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Mobile"}),": Fixed to the bottom of the screen with a height of 4rem (16px) and full width. Navigation items are displayed in a 4-column grid with icons and text labels."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tablet/Desktop"}),": The component is not intended for tablet or desktop views. You should conditionally render it based on screen size and provide alternative navigation for larger screens."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,o.jsx)(n.p,{children:"The component follows these accessibility best practices:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Clear Visual Indication"}),": Active navigation items are highlighted with a blue color to provide clear visual feedback."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Semantic HTML"}),": Uses proper HTML elements like ",(0,o.jsx)(n.code,{children:"nav"})," (implied in the parent component) and proper links with the Next.js ",(0,o.jsx)(n.code,{children:"Link"})," component."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Hover States"}),": Provides visual feedback on hover for interactive elements."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"SVG Icons with aria-hidden"}),": Icons are properly marked with ",(0,o.jsx)(n.code,{children:'aria-hidden="true"'})," to prevent screen readers from announcing them."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"For improved accessibility, consider the following enhancements:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Add ",(0,o.jsx)(n.code,{children:'aria-label="Mobile navigation"'})," to the main container div to provide context for screen readers."]}),"\n",(0,o.jsxs)(n.li,{children:["Ensure SVG icons have proper ",(0,o.jsx)(n.code,{children:'role="img"'})," and appropriate ",(0,o.jsx)(n.code,{children:"aria-label"})," attributes if they convey meaning."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,o.jsx)(n.p,{children:"The component:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Uses Next.js ",(0,o.jsx)(n.code,{children:"usePathname()"})," hook to determine the current active route."]}),"\n",(0,o.jsxs)(n.li,{children:["Implements a nested ",(0,o.jsx)(n.code,{children:"NavItem"})," component to encapsulate the logic for individual navigation items."]}),"\n",(0,o.jsx)(n.li,{children:"Handles both light and dark mode with appropriate color classes."}),"\n",(0,o.jsx)(n.li,{children:"Has fixed positioning to ensure the navigation remains accessible regardless of scroll position."}),"\n",(0,o.jsx)(n.li,{children:"Provides visual feedback for active and hover states."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Bottom Padding"}),": Content may be obscured by the fixed navbar. Always add appropriate bottom padding (pb-16 or 4rem) to your main content container."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Conflicting z-index"}),": The navbar uses ",(0,o.jsx)(n.code,{children:"z-50"})," - ensure other fixed elements don't use conflicting z-index values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Dark Mode Conflicts"}),": If using a custom dark mode implementation, you may need to adjust the dark mode classes."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Navigation State Management"}),": For more complex applications, you might need to integrate with state management like Redux or Context API for navigation state."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// Example test for the component\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport NavbarMobile from '@/components/navigation/navbar-mobile';\nimport { usePathname } from 'next/navigation';\n\n// Mock the usePathname hook\njest.mock('next/navigation', () => ({\n  usePathname: jest.fn(),\n}));\n\ndescribe('NavbarMobile', () => {\n  it('renders all navigation items', () => {\n    // Mock the usePathname to return '/' (home)\n    (usePathname as jest.Mock).mockReturnValue('/');\n    \n    render(<NavbarMobile />);\n    \n    expect(screen.getByText('Home')).toBeInTheDocument();\n    expect(screen.getByText('Wallet')).toBeInTheDocument();\n    expect(screen.getByText('Settings')).toBeInTheDocument();\n    expect(screen.getByText('Profile')).toBeInTheDocument();\n  });\n  \n  it('highlights the active navigation item', () => {\n    // Mock the usePathname to return '/profile'\n    (usePathname as jest.Mock).mockReturnValue('/profile');\n    \n    render(<NavbarMobile />);\n    \n    // The Profile link should have the active color class\n    const profileLink = screen.getByText('Profile');\n    const profileIcon = profileLink.previousSibling;\n    \n    expect(profileLink).toHaveClass('text-blue-600');\n    expect(profileIcon).toHaveClass('text-blue-600');\n    \n    // Other links should not have the active color class\n    const homeLink = screen.getByText('Home');\n    expect(homeLink).not.toHaveClass('text-blue-600');\n  });\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/layout/header",children:"Header"}),": Used for top navigation, typically in desktop layouts"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Sidebar"}),": Used for vertical navigation, typically in desktop layouts"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"NavLink"}),": A styled link component that can be used for navigation items"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(6540);const o={},a=i.createContext(o);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);