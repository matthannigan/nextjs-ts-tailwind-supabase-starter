"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[5925],{2755:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"components/forms/input","title":"Input Component","description":"A versatile form input component that provides a standardized text field for collecting user input with consistent styling and accessibility features.","source":"@site/docs/components/forms/input.md","sourceDirName":"components/forms","slug":"/components/forms/input","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/input","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/forms/input.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Input"},"sidebar":"components","previous":{"title":"Form","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/form"},"next":{"title":"Label","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/label"}}');var i=t(4848),r=t(8453);const l={sidebar_label:"Input"},o="Input Component",a={},d=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"With Labels and Form Elements",id:"with-labels-and-form-elements",level:3},{value:"Different Input Types",id:"different-input-types",level:3},{value:"Disabled State",id:"disabled-state",level:3},{value:"With Default Value",id:"with-default-value",level:3},{value:"File Input",id:"file-input",level:3},{value:"Props",id:"props",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Forms",id:"integration-with-forms",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"input-component",children:"Input Component"})}),"\n",(0,i.jsx)(n.p,{children:"A versatile form input component that provides a standardized text field for collecting user input with consistent styling and accessibility features."}),"\n",(0,i.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Input } from '@/components/ui/input';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Input placeholder="Enter your name" />\n'})}),"\n",(0,i.jsx)(n.h3,{id:"with-labels-and-form-elements",children:"With Labels and Form Elements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<div className="grid w-full max-w-sm gap-1.5">\n  <label htmlFor="email" className="text-sm font-medium">Email</label>\n  <Input \n    type="email" \n    id="email" \n    placeholder="Enter your email" \n    required \n  />\n</div>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"different-input-types",children:"Different Input Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<div className="flex flex-col gap-4">\n  <Input type="text" placeholder="Text input" />\n  <Input type="email" placeholder="Email input" />\n  <Input type="password" placeholder="Password input" />\n  <Input type="number" placeholder="Number input" />\n  <Input type="tel" placeholder="Telephone input" />\n  <Input type="url" placeholder="URL input" />\n  <Input type="date" />\n  <Input type="time" />\n  <Input type="search" placeholder="Search..." />\n</div>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"disabled-state",children:"Disabled State"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Input \n  disabled \n  placeholder="This input is disabled" \n  value="Disabled content" \n/>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"with-default-value",children:"With Default Value"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Input \n  defaultValue="Default text value" \n  onChange={(e) => console.log(e.target.value)}\n/>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"file-input",children:"File Input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Input \n  type="file" \n  accept="image/*" \n  onChange={(e) => console.log(e.target.files)}\n/>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Prop"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"type"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'text'"})}),(0,i.jsx)(n.td,{children:"Specifies the type of input field (text, email, password, etc.)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"className"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Additional CSS classes to apply to the input element"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"disabled"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"false"})}),(0,i.jsx)(n.td,{children:"Disables the input when true"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"required"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"false"})}),(0,i.jsx)(n.td,{children:"Makes the input field required when true"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"placeholder"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Placeholder text to display when input is empty"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"value"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Controlled value of the input element"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"defaultValue"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Default value for an uncontrolled input"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"onChange"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ChangeEventHandler<HTMLInputElement>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Function called when input value changes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"onFocus"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FocusEventHandler<HTMLInputElement>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Function called when input receives focus"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"onBlur"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FocusEventHandler<HTMLInputElement>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Function called when input loses focus"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"...props"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"React.ComponentProps<'input'>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"All other props are passed to the underlying input element"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import * as React from 'react';\n\n// Component Type Definition\ntype InputProps = React.ComponentProps<'input'>;\n\n// Usage with TypeScript\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type = 'text', ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={/* className implementation */}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,i.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,i.jsx)(n.p,{children:"The Input component can be customized using the following approaches:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Using the ",(0,i.jsx)(n.code,{children:"className"})," prop to add additional Tailwind classes:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Input \n  className="border-blue-500 focus-visible:ring-blue-500 px-4 py-3 text-lg"\n  placeholder="Custom styled input" \n/>\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Using the global CSS to target the Input component:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"/* In your global.css file */\ninput {\n  font-family: 'Your Custom Font', sans-serif;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Input } from '@/components/ui/input';\nimport { Search, X } from 'lucide-react';\nimport { useState } from 'react';\n\nexport function SearchInput({ onSearch, className, ...props }) {\n  const [value, setValue] = useState('');\n\n  const handleClear = () => {\n    setValue('');\n    if (props.onChange) {\n      const event = { target: { value: '' } } as React.ChangeEvent<HTMLInputElement>;\n      props.onChange(event);\n    }\n    if (onSearch) {\n      onSearch('');\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n    if (props.onChange) {\n      props.onChange(e);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && onSearch) {\n      onSearch(value);\n    }\n    if (props.onKeyDown) {\n      props.onKeyDown(e);\n    }\n  };\n\n  return (\n    <div className={`relative ${className || ''}`}>\n      <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n      <Input \n        {...props}\n        type=\"search\"\n        className=\"pl-8 pr-8\"\n        value={value}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n      {value && (\n        <button\n          type=\"button\"\n          onClick={handleClear}\n          className=\"absolute right-2.5 top-2.5 h-4 w-4 text-muted-foreground hover:text-foreground\"\n        >\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Clear</span>\n        </button>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-forms",children:"Integration with Forms"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { zodResolver } from \'@hookform/resolvers/zod\';\nimport { useForm } from \'react-hook-form\';\nimport * as z from \'zod\';\nimport { Button } from \'@/components/ui/button\';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \'@/components/ui/form\';\nimport { Input } from \'@/components/ui/input\';\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: "Username must be at least 2 characters.",\n  }),\n  email: z.string().email({\n    message: "Please enter a valid email address.",\n  }),\n});\n\nexport function ProfileForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: "",\n      email: "",\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    console.log(values);\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">\n        <FormField\n          control={form.control}\n          name="username"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder="Enter your username" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name="email"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input type="email" placeholder="Enter your email" {...field} />\n              </FormControl>\n              <FormDescription>\n                We\'ll never share your email with anyone else.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type="submit">Update Profile</Button>\n      </form>\n    </Form>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { useState } from \'react\';\n\nexport function SubscriptionCard() {\n  const [email, setEmail] = useState(\'\');\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Handle subscription logic\n    console.log(`Subscribing: ${email}`);\n    setEmail(\'\');\n  };\n  \n  return (\n    <Card className="w-full max-w-md">\n      <CardHeader>\n        <CardTitle>Subscribe to our Newsletter</CardTitle>\n      </CardHeader>\n      <form onSubmit={handleSubmit}>\n        <CardContent>\n          <div className="grid gap-4">\n            <div className="grid gap-2">\n              <label htmlFor="email" className="text-sm font-medium">\n                Email address\n              </label>\n              <Input\n                id="email"\n                type="email"\n                placeholder="name@example.com"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type="submit" className="w-full">Subscribe</Button>\n        </CardFooter>\n      </form>\n    </Card>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,i.jsx)(n.p,{children:"The Input component includes built-in responsive behavior through its Tailwind classes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Input \n  className="h-8 px-2 text-sm md:h-10 md:px-3 md:text-base lg:h-12 lg:px-4 lg:text-lg" \n  placeholder="Responsive input" \n/>\n'})}),"\n",(0,i.jsx)(n.p,{children:"The responsive behavior includes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mobile"}),": The component has a base text size and default height"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tablet and Desktop"}),": By default, the text size is adjusted to be smaller on larger screens (",(0,i.jsx)(n.code,{children:"md:text-sm"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom responsiveness"}),": Additional responsive classes can be added as shown in the example above to modify padding, height, and font size at different breakpoints"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,i.jsx)(n.p,{children:"The Input component follows these accessibility best practices:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Uses semantic HTML with the native ",(0,i.jsx)(n.code,{children:"<input>"})," element"]}),"\n",(0,i.jsx)(n.li,{children:"Supports all standard input attributes (required, disabled, aria-*, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Includes proper focus states with visible focus rings that follow keyboard navigation"}),"\n",(0,i.jsx)(n.li,{children:"Preserves browser-native validation for types like email, number, etc."}),"\n",(0,i.jsx)(n.li,{children:"Provides visible disabled states with reduced opacity"}),"\n",(0,i.jsxs)(n.li,{children:["Works with form labels and can be linked with ",(0,i.jsx)(n.code,{children:"id"})," and ",(0,i.jsx)(n.code,{children:"for"})," attributes"]}),"\n",(0,i.jsx)(n.li,{children:"Maintains proper contrast ratios for text against backgrounds"}),"\n",(0,i.jsx)(n.li,{children:"Supports screen readers with appropriate ARIA attributes"}),"\n",(0,i.jsx)(n.li,{children:"Is fully keyboard navigable"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For best accessibility, always use the Input component with proper labels:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<div className="grid w-full gap-1.5">\n  <label htmlFor="name" className="text-sm font-medium">Name</label>\n  <Input id="name" aria-describedby="name-description" />\n  <p id="name-description" className="text-xs text-muted-foreground">\n    Enter your full name as it appears on your ID.\n  </p>\n</div>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.p,{children:"The component:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Is built using a React.forwardRef to properly forward refs to the underlying input element"}),"\n",(0,i.jsxs)(n.li,{children:["Uses the ",(0,i.jsx)(n.code,{children:"cn"})," utility function to merge default styles with custom className props"]}),"\n",(0,i.jsx)(n.li,{children:"Applies consistent Tailwind CSS styles for various states (focus, disabled, file inputs)"}),"\n",(0,i.jsx)(n.li,{children:"Accepts all native input attributes through prop spreading"}),"\n",(0,i.jsx)(n.li,{children:"Has proper display name for better debugging"}),"\n",(0,i.jsx)(n.li,{children:"Uses responsive text sizing (smaller on larger screens) to maintain UI consistency"}),"\n",(0,i.jsx)(n.li,{children:"Includes proper ring styling for focus states"}),"\n",(0,i.jsx)(n.li,{children:"Provides special styling for file input types"}),"\n",(0,i.jsx)(n.li,{children:"Maintains the same height across various input types for consistent forms"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Missing form labels"}),": Always use proper ",(0,i.jsx)(n.code,{children:"<label>"})," elements with inputs for accessibility"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Incorrect type"}),": Ensure you use the appropriate ",(0,i.jsx)(n.code,{children:"type"})," (email, password, etc.) to leverage browser validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Controlled vs. uncontrolled"}),": Be consistent in using either ",(0,i.jsx)(n.code,{children:"value"})," with ",(0,i.jsx)(n.code,{children:"onChange"})," (controlled) or ",(0,i.jsx)(n.code,{children:"defaultValue"})," (uncontrolled)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spread order"}),": When extending the component, make sure to spread your custom props last to prevent overrides"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File inputs"}),": Be aware that file inputs have special styling and may need additional code for handling files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Autofill styling"}),": Browser autofill styling may not match your theme - use vendor-specific CSS rules if needed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mobile considerations"}),": On mobile, ensure inputs are large enough for touch targets (at least 44\xd744px)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Form validation"}),": When using client-side validation like React Hook Form, make sure to display errors appropriately near inputs"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Example test for the Input component\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Input } from '@/components/ui/input';\n\ndescribe('Input', () => {\n  it('renders correctly with placeholder', () => {\n    render(<Input placeholder=\"Enter text\" />);\n    expect(screen.getByPlaceholderText('Enter text')).toBeInTheDocument();\n  });\n  \n  it('accepts and updates value', async () => {\n    const user = userEvent.setup();\n    const handleChange = jest.fn();\n    \n    render(<Input onChange={handleChange} />);\n    const input = screen.getByRole('textbox');\n    \n    await user.type(input, 'Hello World');\n    \n    expect(input).toHaveValue('Hello World');\n    expect(handleChange).toHaveBeenCalledTimes(11); // Once per character\n  });\n  \n  it('renders as disabled when disabled prop is provided', () => {\n    render(<Input disabled placeholder=\"Disabled input\" />);\n    expect(screen.getByPlaceholderText('Disabled input')).toBeDisabled();\n  });\n  \n  it('applies custom className correctly', () => {\n    render(<Input className=\"test-class\" data-testid=\"custom-input\" />);\n    const input = screen.getByTestId('custom-input');\n    expect(input).toHaveClass('test-class');\n    // Should also have default classes\n    expect(input).toHaveClass('rounded-md');\n  });\n  \n  it('forwards ref to the underlying input element', () => {\n    const ref = jest.fn();\n    render(<Input ref={ref} />);\n    expect(ref).toHaveBeenCalled();\n    expect(ref.mock.calls[0][0]).toBeInstanceOf(HTMLInputElement);\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/form",children:"Form"}),": Container component for form elements including Input"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/button",children:"Button"}),": Often used alongside Input for form submissions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/select",children:"Select"}),": For selecting from predefined options instead of free text input"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea",children:"Textarea"}),": For multi-line text input"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox",children:"Checkbox"}),": For boolean/multiple choice inputs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input",children:"SearchInput"}),": Specialized input for search functionality"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);