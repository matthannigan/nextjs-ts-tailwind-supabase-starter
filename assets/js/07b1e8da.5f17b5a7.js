"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[2309],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const s={},d=r.createContext(s);function i(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(d.Provider,{value:n},e.children)}},9728:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"components/ui/card","title":"Card Component","description":"A versatile container component that provides a structured layout for displaying related content, with dedicated sections for header, content, and footer.","source":"@site/docs/components/ui/card.md","sourceDirName":"components/ui","slug":"/components/ui/card","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/card","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/ui/card.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Card"},"sidebar":"components","previous":{"title":"Calendar","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar"},"next":{"title":"Container","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/container"}}');var s=t(4848),d=t(8453);const i={sidebar_label:"Card"},a="Card Component",o={},l=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Simple Content Card",id:"simple-content-card",level:3},{value:"Card with Custom Styling",id:"card-with-custom-styling",level:3},{value:"Interactive Card",id:"interactive-card",level:3},{value:"Props",id:"props",level:2},{value:"Card Props",id:"card-props",level:3},{value:"CardHeader Props",id:"cardheader-props",level:3},{value:"CardTitle Props",id:"cardtitle-props",level:3},{value:"CardDescription Props",id:"carddescription-props",level:3},{value:"CardContent Props",id:"cardcontent-props",level:3},{value:"CardFooter Props",id:"cardfooter-props",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Forms",id:"integration-with-forms",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"card-component",children:"Card Component"})}),"\n",(0,s.jsx)(n.p,{children:"A versatile container component that provides a structured layout for displaying related content, with dedicated sections for header, content, and footer."}),"\n",(0,s.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter\n} from '@/components/ui/card';\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"<Card>\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Card Content</p>\n  </CardContent>\n  <CardFooter>\n    <p>Card Footer</p>\n  </CardFooter>\n</Card>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"simple-content-card",children:"Simple Content Card"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<Card>\n  <CardContent className="pt-6">\n    <p>A simple card with just content and no header or footer.</p>\n  </CardContent>\n</Card>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"card-with-custom-styling",children:"Card with Custom Styling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<Card className="border-primary/50 bg-primary/5">\n  <CardHeader className="pb-3">\n    <CardTitle className="text-primary">Highlighted Card</CardTitle>\n  </CardHeader>\n  <CardContent>\n    <p>This card has custom styling to make it stand out.</p>\n  </CardContent>\n</Card>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"interactive-card",children:"Interactive Card"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<Card className="transition-all hover:shadow-md hover:border-primary cursor-pointer">\n  <CardHeader>\n    <CardTitle>Interactive Card</CardTitle>\n  </CardHeader>\n  <CardContent>\n    <p>This card has hover effects to indicate interactivity.</p>\n  </CardContent>\n  <CardFooter className="text-sm text-muted-foreground">\n    Click to learn more\n  </CardFooter>\n</Card>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,s.jsx)(n.h3,{id:"card-props",children:"Card Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"className"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Additional CSS classes to apply to the card"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"children"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ReactNode"})}),(0,s.jsx)(n.td,{children:"Required"}),(0,s.jsx)(n.td,{children:"Content to display inside the card"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"...props"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"React.HTMLAttributes<HTMLDivElement>"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"All other props are passed to the underlying div element"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"cardheader-props",children:"CardHeader Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"className"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Additional CSS classes to apply to the card header"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"children"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ReactNode"})}),(0,s.jsx)(n.td,{children:"Required"}),(0,s.jsx)(n.td,{children:"Content to display inside the card header"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"...props"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"React.HTMLAttributes<HTMLDivElement>"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"All other props are passed to the underlying div element"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"cardtitle-props",children:"CardTitle Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"className"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Additional CSS classes to apply to the card title"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"children"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ReactNode"})}),(0,s.jsx)(n.td,{children:"Required"}),(0,s.jsx)(n.td,{children:"Content to display as the card title"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"...props"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"React.HTMLAttributes<HTMLDivElement>"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"All other props are passed to the underlying div element"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"carddescription-props",children:"CardDescription Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"className"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Additional CSS classes to apply to the card description"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"children"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ReactNode"})}),(0,s.jsx)(n.td,{children:"Required"}),(0,s.jsx)(n.td,{children:"Content to display as the card description"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"...props"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"React.HTMLAttributes<HTMLDivElement>"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"All other props are passed to the underlying div element"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"cardcontent-props",children:"CardContent Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"className"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Additional CSS classes to apply to the card content"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"children"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ReactNode"})}),(0,s.jsx)(n.td,{children:"Required"}),(0,s.jsx)(n.td,{children:"Content to display inside the card content area"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"...props"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"React.HTMLAttributes<HTMLDivElement>"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"All other props are passed to the underlying div element"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"cardfooter-props",children:"CardFooter Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"className"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Additional CSS classes to apply to the card footer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"children"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ReactNode"})}),(0,s.jsx)(n.td,{children:"Required"}),(0,s.jsx)(n.td,{children:"Content to display inside the card footer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"...props"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"React.HTMLAttributes<HTMLDivElement>"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"All other props are passed to the underlying div element"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Card Component Types\nimport * as React from 'react';\n\n// Card Props\ntype CardProps = React.HTMLAttributes<HTMLDivElement>;\n\n// CardHeader Props\ntype CardHeaderProps = React.HTMLAttributes<HTMLDivElement>;\n\n// CardTitle Props\ntype CardTitleProps = React.HTMLAttributes<HTMLDivElement>;\n\n// CardDescription Props\ntype CardDescriptionProps = React.HTMLAttributes<HTMLDivElement>;\n\n// CardContent Props\ntype CardContentProps = React.HTMLAttributes<HTMLDivElement>;\n\n// CardFooter Props\ntype CardFooterProps = React.HTMLAttributes<HTMLDivElement>;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,s.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,s.jsx)(n.p,{children:"The Card component and its sub-components can be customized using the following approaches:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Using the ",(0,s.jsx)(n.code,{children:"className"})," prop to add additional Tailwind classes to each component:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<Card className="max-w-md mx-auto bg-gradient-to-br from-card to-background">\n  <CardHeader className="bg-card/50 backdrop-blur-sm">\n    <CardTitle className="text-blue-500 dark:text-blue-400">Custom Title</CardTitle>\n    <CardDescription className="text-blue-700/70 dark:text-blue-300/70">Custom Description</CardDescription>\n  </CardHeader>\n  <CardContent className="space-y-4">\n    {/* Content */}\n  </CardContent>\n  <CardFooter className="justify-end border-t border-border/50 bg-muted/20">\n    {/* Footer content */}\n  </CardFooter>\n</Card>\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Customizing the spacing and padding within the card:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<Card>\n  <CardHeader className="p-4">\n    <CardTitle>Compact Header</CardTitle>\n  </CardHeader>\n  <CardContent className="p-4 pt-0">\n    {/* Content with custom padding */}\n  </CardContent>\n  <CardFooter className="p-4 pt-2">\n    {/* Footer with custom padding */}\n  </CardFooter>\n</Card>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { Card, CardProps, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n\ninterface ActionCardProps extends CardProps {\n  title: string;\n  description?: string;\n  actionLabel: string;\n  onAction: () => void;\n}\n\nexport function ActionCard({ \n  title,\n  description,\n  actionLabel,\n  onAction,\n  children,\n  className,\n  ...props \n}: ActionCardProps) {\n  return (\n    <Card \n      className={`hover:shadow-lg transition-shadow ${className || ''}`}\n      {...props}\n    >\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n        {description && <p className=\"text-sm text-muted-foreground\">{description}</p>}\n      </CardHeader>\n      <CardContent>\n        {children}\n      </CardContent>\n      <CardFooter className=\"flex justify-end\">\n        <Button onClick={onAction}>{actionLabel}</Button>\n      </CardFooter>\n    </Card>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"integration-with-forms",children:"Integration with Forms"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useForm } from \'react-hook-form\';\nimport { z } from \'zod\';\nimport { zodResolver } from \'@hookform/resolvers/zod\';\nimport { Card, CardHeader, CardTitle, CardContent, CardFooter } from \'@/components/ui/card\';\nimport { Form, FormField, FormItem, FormLabel, FormControl } from \'@/components/ui/form\';\nimport { Input } from \'@/components/ui/input\';\nimport { Button } from \'@/components/ui/button\';\n\nconst formSchema = z.object({\n  name: z.string().min(2, {\n    message: "Name must be at least 2 characters.",\n  }),\n  email: z.string().email({\n    message: "Please enter a valid email address.",\n  }),\n});\n\nexport function ContactForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: "",\n      email: "",\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    // Handle form submission\n    console.log(values);\n  }\n\n  return (\n    <Card className="w-full max-w-md mx-auto">\n      <CardHeader>\n        <CardTitle>Contact Us</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">\n            <FormField\n              control={form.control}\n              name="name"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder="Your name" {...field} />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name="email"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input placeholder="Your email" {...field} />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n            <Button type="submit" className="w-full">Submit</Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { Card, CardHeader, CardTitle, CardContent } from \'@/components/ui/card\';\nimport { Avatar, AvatarImage, AvatarFallback } from \'@/components/ui/avatar\';\nimport { Badge } from \'@/components/ui/badge\';\n\nexport function UserProfileCard({ user }) {\n  return (\n    <Card className="w-full max-w-sm">\n      <CardHeader className="flex flex-row items-center gap-4">\n        <Avatar>\n          <AvatarImage src={user.avatarUrl} alt={user.name} />\n          <AvatarFallback>{user.initials}</AvatarFallback>\n        </Avatar>\n        <div className="flex flex-col">\n          <CardTitle className="text-xl">{user.name}</CardTitle>\n          <div className="flex items-center gap-2 mt-1">\n            <Badge variant="outline">{user.role}</Badge>\n            {user.isVerified && (\n              <Badge variant="secondary">Verified</Badge>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className="space-y-2">\n        <div className="text-sm">\n          <span className="font-medium text-muted-foreground">Email:</span> {user.email}\n        </div>\n        {user.bio && (\n          <p className="text-sm text-muted-foreground">{user.bio}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,s.jsx)(n.p,{children:"The Card component can be made responsive using Tailwind's responsive modifiers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<Card className="w-full max-w-full sm:max-w-md md:max-w-lg lg:max-w-xl">\n  <CardHeader className="p-4 sm:p-6">\n    <CardTitle className="text-lg sm:text-xl md:text-2xl">Responsive Card</CardTitle>\n    <CardDescription className="text-xs sm:text-sm">\n      This card adjusts its size and spacing based on screen size\n    </CardDescription>\n  </CardHeader>\n  <CardContent className="p-4 sm:p-6 pt-0 sm:pt-0 text-sm sm:text-base">\n    <p>The content inside adapts to different screen sizes.</p>\n  </CardContent>\n  <CardFooter className="p-4 sm:p-6 pt-0 sm:pt-0 flex-col sm:flex-row justify-start sm:justify-end gap-2">\n    <Button size="sm" variant="outline" className="w-full sm:w-auto">Cancel</Button>\n    <Button size="sm" className="w-full sm:w-auto">Continue</Button>\n  </CardFooter>\n</Card>\n'})}),"\n",(0,s.jsx)(n.p,{children:"The responsive behavior includes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mobile"}),": Full width with smaller padding and text sizes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tablet"}),": Constrained width with medium padding and text sizes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Desktop"}),": Larger maximum width with standard padding and text sizes"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,s.jsx)(n.p,{children:"The Card component follows these accessibility best practices:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses semantic HTML structures to organize content"}),"\n",(0,s.jsx)(n.li,{children:"Maintains proper color contrast for text against background colors"}),"\n",(0,s.jsx)(n.li,{children:"CardTitle and CardDescription components are div elements, allowing you to use appropriate heading levels for proper document outline"}),"\n",(0,s.jsx)(n.li,{children:"Supports keyboard focus when used as interactive elements"}),"\n",(0,s.jsx)(n.li,{children:"Preserves parent-child relationships for screen readers"}),"\n",(0,s.jsx)(n.li,{children:"Allows for custom ARIA attributes to be passed through props where needed"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(n.p,{children:"The component:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Is built using a composition pattern with multiple sub-components for flexible layouts"}),"\n",(0,s.jsx)(n.li,{children:"Uses Tailwind CSS for styling with the ability to override via className"}),"\n",(0,s.jsx)(n.li,{children:"Applies subtle shadows and borders for visual clarity and separation from background"}),"\n",(0,s.jsx)(n.li,{children:"Maintains proper spacing between elements with a consistent padding system"}),"\n",(0,s.jsxs)(n.li,{children:["Uses the ",(0,s.jsx)(n.code,{children:"cn"})," utility to merge default and custom classNames"]}),"\n",(0,s.jsx)(n.li,{children:"Forwards refs to the underlying div elements for all sub-components"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Missing semantic structure"}),": When CardTitle and CardDescription are used, consider wrapping them with appropriate semantic HTML (like ",(0,s.jsx)(n.code,{children:"<h2>"})," or ",(0,s.jsx)(n.code,{children:"<h3>"}),") for proper document outline"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Overflow issues"}),": Content that is too wide for the card may cause layout issues; use proper text wrapping and overflow handling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Inconsistent padding"}),": When customizing padding on CardContent, remember that it has ",(0,s.jsx)(n.code,{children:"pt-0"})," by default to align with CardHeader, so you may need to adjust both"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interactive cards"}),": When making the entire card clickable, ensure proper keyboard accessibility and focus indicators"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Nested cards"}),": Be careful when nesting cards, as the visual hierarchy can become confusing; consider using different variants or styling"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Example test for the Card component\nimport { render, screen } from '@testing-library/react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\n\ndescribe('Card', () => {\n  it('renders correctly with basic content', () => {\n    render(\n      <Card>\n        <CardHeader>\n          <CardTitle>Test Card</CardTitle>\n        </CardHeader>\n        <CardContent>Card content</CardContent>\n      </Card>\n    );\n    \n    expect(screen.getByText('Test Card')).toBeInTheDocument();\n    expect(screen.getByText('Card content')).toBeInTheDocument();\n  });\n  \n  it('applies custom className to Card component', () => {\n    const { container } = render(\n      <Card className=\"custom-class\">\n        <CardContent>Content</CardContent>\n      </Card>\n    );\n    \n    const cardElement = container.firstChild;\n    expect(cardElement).toHaveClass('custom-class');\n    expect(cardElement).toHaveClass('rounded-lg'); // Default class\n  });\n  \n  it('forwards additional props to the underlying div', () => {\n    render(\n      <Card data-testid=\"card-test\" aria-label=\"Card example\">\n        <CardContent>Content</CardContent>\n      </Card>\n    );\n    \n    const card = screen.getByTestId('card-test');\n    expect(card).toHaveAttribute('aria-label', 'Card example');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/container",children:"Container"}),": Can be used to wrap cards in a consistent layout"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/style/typography",children:"Typography"}),": For consistent text styling within cards"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/button",children:"Button"}),": Commonly used in card footers for actions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://ui.shadcn.com/docs/components/hover-card",children:"HoverCard"}),": For displaying rich previews in a card-like popup"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card",children:"ContentCard"}),": A more specialized card implementation with predefined content structure"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);