"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[1009],{1588:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"components/layout/layout","title":"Layout System","description":"The Layout system in our Next.js TypeScript Tailwind Supabase starter provides a flexible structure for creating consistent page layouts throughout the application. It consists of a RootLayout component combined with Header and Footer components, plus utility layout components (Flex and Grid) for precise content arrangement.","source":"@site/docs/components/layout/layout.md","sourceDirName":"components/layout","slug":"/components/layout/","permalink":"/nextjs-ts-tailwind-supabase-starter/components/layout/","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/layout/layout.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"components","next":{"title":"Header Component","permalink":"/nextjs-ts-tailwind-supabase-starter/components/layout/header"}}');var i=s(4848),r=s(8453);const o={sidebar_position:1},l="Layout System",d={},a=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Page Content",id:"basic-page-content",level:3},{value:"Using Flex for Row Layout",id:"using-flex-for-row-layout",level:3},{value:"Using Flex for Column Layout",id:"using-flex-for-column-layout",level:3},{value:"Using Grid for Multi-Column Layout",id:"using-grid-for-multi-column-layout",level:3},{value:"Props",id:"props",level:2},{value:"Flex Component Props",id:"flex-component-props",level:3},{value:"Grid Component Props",id:"grid-component-props",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Flex Component",id:"extending-the-flex-component",level:3},{value:"Extending the Grid Component",id:"extending-the-grid-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Forms",id:"integration-with-forms",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"layout-system",children:"Layout System"})}),"\n",(0,i.jsx)(n.p,{children:"The Layout system in our Next.js TypeScript Tailwind Supabase starter provides a flexible structure for creating consistent page layouts throughout the application. It consists of a RootLayout component combined with Header and Footer components, plus utility layout components (Flex and Grid) for precise content arrangement."}),"\n",(0,i.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,i.jsx)(n.p,{children:"For the main application layout (automatically applied to all pages):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// This is handled by Next.js App Router\n// No import needed as it's applied automatically\n"})}),"\n",(0,i.jsx)(n.p,{children:"For layout utility components:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Flex, Grid } from '@/components/ui/layout';\n"})}),"\n",(0,i.jsx)(n.p,{children:"For direct access to layout parts (rarely needed):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"basic-page-content",children:"Basic Page Content"}),"\n",(0,i.jsx)(n.p,{children:"Content placed in any page component is automatically wrapped in the RootLayout:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// app/example-page/page.tsx\nexport default function ExamplePage() {\n  return (\n    <div className="container mx-auto py-8 px-4">\n      <h1 className="text-2xl font-bold mb-4">Page Title</h1>\n      <p>Your page content goes here...</p>\n    </div>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-flex-for-row-layout",children:"Using Flex for Row Layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Flex } from \'@/components/ui/layout\';\n\nexport default function FlexExample() {\n  return (\n    <Flex gap="md" align="center" justify="between">\n      <div className="bg-blue-100 p-4">Item 1</div>\n      <div className="bg-blue-100 p-4">Item 2</div>\n      <div className="bg-blue-100 p-4">Item 3</div>\n    </Flex>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-flex-for-column-layout",children:"Using Flex for Column Layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Flex } from \'@/components/ui/layout\';\n\nexport default function ColumnExample() {\n  return (\n    <Flex direction="column" gap="lg">\n      <div className="bg-blue-100 p-4">Section 1</div>\n      <div className="bg-blue-100 p-4">Section 2</div>\n      <div className="bg-blue-100 p-4">Section 3</div>\n    </Flex>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-grid-for-multi-column-layout",children:"Using Grid for Multi-Column Layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Grid } from \'@/components/ui/layout\';\n\nexport default function GridExample() {\n  return (\n    <Grid cols={3} gap="md">\n      <div className="bg-blue-100 p-4">Card 1</div>\n      <div className="bg-blue-100 p-4">Card 2</div>\n      <div className="bg-blue-100 p-4">Card 3</div>\n      <div className="bg-blue-100 p-4">Card 4</div>\n      <div className="bg-blue-100 p-4">Card 5</div>\n      <div className="bg-blue-100 p-4">Card 6</div>\n    </Grid>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,i.jsx)(n.h3,{id:"flex-component-props",children:"Flex Component Props"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Prop"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"direction"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'row' | 'column' | 'row-reverse' | 'column-reverse'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'row'"})}),(0,i.jsx)(n.td,{children:"Sets the direction of the flex container"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"align"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'start' | 'center' | 'end' | 'stretch' | 'baseline'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'start'"})}),(0,i.jsx)(n.td,{children:"Controls alignment of items on the cross axis"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"justify"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'start' | 'center' | 'end' | 'between' | 'around' | 'evenly'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'start'"})}),(0,i.jsx)(n.td,{children:"Controls alignment of items on the main axis"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"wrap"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'nowrap' | 'wrap' | 'wrap-reverse'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'nowrap'"})}),(0,i.jsx)(n.td,{children:"Controls whether items wrap to new lines"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"gap"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'none'"})}),(0,i.jsx)(n.td,{children:"Sets spacing between flex items"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"className"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Additional CSS classes to apply"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"data-testid"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Test ID for automated testing"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"children"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ReactNode"})}),(0,i.jsx)(n.td,{children:"Required"}),(0,i.jsx)(n.td,{children:"Content to be displayed within the flex container"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"grid-component-props",children:"Grid Component Props"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Prop"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"cols"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1 | 2 | 3 | 4 | 5 | 6 | 12"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})}),(0,i.jsx)(n.td,{children:"Number of columns in the grid"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"gap"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'md'"})}),(0,i.jsx)(n.td,{children:"Sets spacing between grid items"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"className"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Additional CSS classes to apply"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"data-testid"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Test ID for automated testing"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"children"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ReactNode"})}),(0,i.jsx)(n.td,{children:"Required"}),(0,i.jsx)(n.td,{children:"Content to be displayed within the grid"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Flex Component Type Definition\ntype FlexProps = {\n  children: ReactNode;\n  direction?: 'row' | 'column' | 'row-reverse' | 'column-reverse';\n  align?: 'start' | 'center' | 'end' | 'stretch' | 'baseline';\n  justify?: 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';\n  wrap?: 'nowrap' | 'wrap' | 'wrap-reverse';\n  gap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  className?: string;\n  'data-testid'?: string;\n};\n\n// Grid Component Type Definition\ntype GridProps = {\n  children: ReactNode;\n  cols?: 1 | 2 | 3 | 4 | 5 | 6 | 12;\n  gap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  className?: string;\n  'data-testid'?: string;\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,i.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,i.jsx)(n.p,{children:"The layout components can be customized using the following approaches:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Using the ",(0,i.jsx)(n.code,{children:"className"})," prop to add additional Tailwind classes"]}),"\n",(0,i.jsx)(n.li,{children:"Creating wrapper components with preset configurations"}),"\n",(0,i.jsxs)(n.li,{children:["For the RootLayout, modifying the ",(0,i.jsx)(n.code,{children:"app/layout.tsx"})," file directly"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"extending-the-flex-component",children:"Extending the Flex Component"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Flex } from '@/components/ui/layout';\n\nexport function CardContainer({ children, className, ...props }) {\n  return (\n    <Flex \n      direction=\"column\" \n      gap=\"md\" \n      className={`rounded-lg border border-border p-4 ${className || ''}`}\n      {...props}\n    >\n      {children}\n    </Flex>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"extending-the-grid-component",children:"Extending the Grid Component"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Grid } from '@/components/ui/layout';\n\nexport function ResponsiveCardGrid({ children, className, ...props }) {\n  return (\n    <Grid \n      cols={1} \n      gap=\"md\" \n      className={`sm:grid-cols-2 lg:grid-cols-3 ${className || ''}`}\n      {...props}\n    >\n      {children}\n    </Grid>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-forms",children:"Integration with Forms"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Flex } from \'@/components/ui/layout\';\nimport { useForm } from \'react-hook-form\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\n\nexport function ContactForm() {\n  const { register, handleSubmit } = useForm();\n  \n  const onSubmit = (data) => {\n    console.log(data);\n  };\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Flex direction="column" gap="md">\n        <Input {...register(\'name\')} placeholder="Your name" />\n        <Input {...register(\'email\')} type="email" placeholder="Your email" />\n        <textarea \n          {...register(\'message\')} \n          className="p-2 border rounded" \n          placeholder="Your message"\n          rows={4}\n        />\n        <Button type="submit">Send Message</Button>\n      </Flex>\n    </form>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Flex, Grid } from \'@/components/ui/layout\';\nimport { Card } from \'@/components/ui/card\';\n\nexport default function DashboardPage() {\n  return (\n    <Flex direction="column" gap="xl">\n      <h1 className="text-2xl font-bold">Dashboard</h1>\n      \n      <Grid cols={3} gap="lg" className="sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3">\n        <Card title="Analytics" content="Your analytics data..." />\n        <Card title="Recent Orders" content="Order information..." />\n        <Card title="User Statistics" content="User data..." />\n        <Card title="Revenue" content="Revenue information..." />\n      </Grid>\n      \n      <Flex gap="md" className="border-t pt-4 mt-6">\n        <Button variant="outline">Export Data</Button>\n        <Button>Refresh</Button>\n      </Flex>\n    </Flex>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,i.jsx)(n.p,{children:"The layout components respond to different screen sizes in the following ways:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Flex"}),": By default, Flex maintains its configured behavior across all screen sizes. For responsive behavior, use the ",(0,i.jsx)(n.code,{children:"className"})," prop with Tailwind responsive classes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Flex \n  direction="column" \n  className="md:flex-row lg:justify-between"\n  gap="md"\n>\n  {/* Content */}\n</Flex>\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Grid"}),": The ",(0,i.jsx)(n.code,{children:"cols"})," prop sets a fixed number of columns. For responsive grids, use the ",(0,i.jsx)(n.code,{children:"className"})," prop with Tailwind's responsive grid classes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Grid \n  cols={1}\n  gap="md" \n  className="sm:grid-cols-2 lg:grid-cols-4"\n>\n  {/* Content */}\n</Grid>\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"RootLayout"}),": Provides a responsive container that adjusts to screen size, with the Header and Footer adapting accordingly."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,i.jsx)(n.p,{children:"The layout components follow these accessibility best practices:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Semantic HTML elements used throughout the layout structure"}),"\n",(0,i.jsx)(n.li,{children:"Responsive design ensures content is accessible on various screen sizes"}),"\n",(0,i.jsx)(n.li,{children:"Header includes proper navigation landmarks for screen readers"}),"\n",(0,i.jsx)(n.li,{children:"Keyboard navigation is supported in the Header dropdown menu"}),"\n",(0,i.jsx)(n.li,{children:"Focus management for dropdown menu interaction"}),"\n",(0,i.jsx)(n.li,{children:"Color contrast meets WCAG AA standards"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.p,{children:"The layout system:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Uses Next.js 14's App Router for overall page structure"}),"\n",(0,i.jsxs)(n.li,{children:["Employs the ",(0,i.jsx)(n.code,{children:"cn()"})," utility for conditional class merging"]}),"\n",(0,i.jsxs)(n.li,{children:["Converts semantic props (like ",(0,i.jsx)(n.code,{children:'gap="md"'}),") to Tailwind classes"]}),"\n",(0,i.jsx)(n.li,{children:"Spread props to allow HTML attributes to pass through"}),"\n",(0,i.jsx)(n.li,{children:"Supports data-testid for testing components"}),"\n",(0,i.jsx)(n.li,{children:"Uses client-side components for interactive elements (Header) and server components for static parts"}),"\n",(0,i.jsx)(n.li,{children:"Implements theme switching via ThemeProvider context"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Incorrect gap values"}),": The ",(0,i.jsx)(n.code,{children:"gap"})," prop only accepts predefined values ('none', 'xs', 'sm', 'md', 'lg', 'xl'). For custom gaps, use the ",(0,i.jsx)(n.code,{children:"className"})," prop with Tailwind gap utilities."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// \u274c This won\'t work\n<Flex gap="2xl">...</Flex>\n\n// \u2705 Do this instead\n<Flex className="gap-10">...</Flex>\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Limited grid columns"}),": The ",(0,i.jsx)(n.code,{children:"cols"})," prop is limited to specific values (1-6, 12). For other values, use direct Tailwind classes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// \u274c This won\'t work\n<Grid cols={7}>...</Grid>\n\n// \u2705 Do this instead\n<Grid className="grid-cols-7">...</Grid>\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Missing RootLayout CSS"}),": The RootLayout depends on global styles from ",(0,i.jsx)(n.code,{children:"@/styles/globals.css"}),". Make sure this import is present in ",(0,i.jsx)(n.code,{children:"app/layout.tsx"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Theme compatibility"}),": When using dark mode, ensure components inside Flex/Grid containers use theme-compatible color classes (bg-background, text-foreground, etc.) rather than fixed colors."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Example test for the Flex component\nimport { render, screen } from '@testing-library/react';\nimport { Flex } from '@/components/ui/layout';\n\ndescribe('Flex', () => {\n  it('renders children correctly', () => {\n    render(\n      <Flex data-testid=\"flex-container\">\n        <div>Item 1</div>\n        <div>Item 2</div>\n      </Flex>\n    );\n    \n    const container = screen.getByTestId('flex-container');\n    expect(container).toHaveClass('flex');\n    expect(container).toHaveClass('flex-row');\n    expect(container.children.length).toBe(2);\n  });\n  \n  it('applies custom gap class correctly', () => {\n    render(\n      <Flex gap=\"lg\" data-testid=\"flex-container\">\n        <div>Content</div>\n      </Flex>\n    );\n    \n    const container = screen.getByTestId('flex-container');\n    expect(container).toHaveClass('gap-6');\n  });\n  \n  it('applies custom className prop', () => {\n    render(\n      <Flex className=\"custom-class\" data-testid=\"flex-container\">\n        <div>Content</div>\n      </Flex>\n    );\n    \n    const container = screen.getByTestId('flex-container');\n    expect(container).toHaveClass('custom-class');\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/layout/header",children:"Header"}),": The top navigation bar used in the RootLayout"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/layout/footer",children:"Footer"}),": The footer component used in the RootLayout"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/card",children:"Card"}),": Often used within Flex or Grid to display content blocks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/container",children:"Container"}),": Can be used with Flex or Grid for additional padding/margin constraints"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);