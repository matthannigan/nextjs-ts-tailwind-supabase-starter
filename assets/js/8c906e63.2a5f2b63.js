"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[4469],{3344:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"components/forms/form","title":"Form Component","description":"A comprehensive, accessible form handling component that wraps react-hook-form and provides a structured approach to building and validating forms in your application.","source":"@site/docs/components/forms/form.md","sourceDirName":"components/forms","slug":"/components/forms/form","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/form","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/forms/form.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Form"},"sidebar":"components","previous":{"title":"Checkbox","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox"},"next":{"title":"Input","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/input"}}');var t=r(4848),s=r(8453);const i={sidebar_label:"Form"},l="Form Component",a={},d=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Using with Multiple Fields and Different Input Types",id:"using-with-multiple-fields-and-different-input-types",level:3},{value:"Components",id:"components",level:2},{value:"Form",id:"form",level:3},{value:"FormField",id:"formfield",level:3},{value:"FormItem",id:"formitem",level:3},{value:"FormLabel",id:"formlabel",level:3},{value:"FormControl",id:"formcontrol",level:3},{value:"FormDescription",id:"formdescription",level:3},{value:"FormMessage",id:"formmessage",level:3},{value:"Props",id:"props",level:2},{value:"Form",id:"form-1",level:3},{value:"FormField",id:"formfield-1",level:3},{value:"FormItem",id:"formitem-1",level:3},{value:"FormLabel",id:"formlabel-1",level:3},{value:"FormControl",id:"formcontrol-1",level:3},{value:"FormDescription",id:"formdescription-1",level:3},{value:"FormMessage",id:"formmessage-1",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Creating Custom Form Controls",id:"creating-custom-form-controls",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Select Component",id:"integration-with-select-component",level:3},{value:"Using with Supabase",id:"using-with-supabase",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"form-component",children:"Form Component"})}),"\n",(0,t.jsx)(n.p,{children:"A comprehensive, accessible form handling component that wraps react-hook-form and provides a structured approach to building and validating forms in your application."}),"\n",(0,t.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { \n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage \n} from '@/components/ui/form';\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.p,{children:"The Form component works with react-hook-form to manage form state and validation. It integrates well with validation libraries like Zod."}),"\n",(0,t.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'"use client"\n\nimport { zodResolver } from "@hookform/resolvers/zod"\nimport { useForm } from "react-hook-form"\nimport * as z from "zod"\n\nimport { Button } from "@/components/ui/button"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from "@/components/ui/form"\nimport { Input } from "@/components/ui/input"\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: "Username must be at least 2 characters.",\n  }),\n})\n\nexport function ProfileForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: "",\n    },\n  })\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    console.log(values)\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">\n        <FormField\n          control={form.control}\n          name="username"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder="Enter username" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type="submit">Submit</Button>\n      </form>\n    </Form>\n  )\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"using-with-multiple-fields-and-different-input-types",children:"Using with Multiple Fields and Different Input Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'const formSchema = z.object({\n  username: z.string().min(2).max(50),\n  email: z.string().email(),\n  bio: z.string().max(160).optional(),\n  notifications: z.boolean().default(false),\n})\n\nexport function SettingsForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: "",\n      email: "",\n      bio: "",\n      notifications: false,\n    },\n  })\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    console.log(values)\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">\n        <FormField\n          control={form.control}\n          name="username"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder="johndoe" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name="email"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input type="email" placeholder="john@example.com" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name="bio"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Bio</FormLabel>\n              <FormControl>\n                <Textarea placeholder="Tell us about yourself" {...field} />\n              </FormControl>\n              <FormDescription>\n                Max 160 characters.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name="notifications"\n          render={({ field }) => (\n            <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">\n              <FormControl>\n                <Checkbox\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n              <div className="space-y-1 leading-none">\n                <FormLabel>Enable notifications</FormLabel>\n                <FormDescription>\n                  Receive email notifications for important updates.\n                </FormDescription>\n              </div>\n            </FormItem>\n          )}\n        />\n        \n        <Button type="submit">Save changes</Button>\n      </form>\n    </Form>\n  )\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,t.jsx)(n.p,{children:"The Form component is a collection of several sub-components that work together:"}),"\n",(0,t.jsx)(n.h3,{id:"form",children:"Form"}),"\n",(0,t.jsxs)(n.p,{children:["The root component that wraps around react-hook-form's ",(0,t.jsx)(n.code,{children:"FormProvider"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"formfield",children:"FormField"}),"\n",(0,t.jsxs)(n.p,{children:["A wrapper around react-hook-form's ",(0,t.jsx)(n.code,{children:"Controller"})," that provides context for form fields."]}),"\n",(0,t.jsx)(n.h3,{id:"formitem",children:"FormItem"}),"\n",(0,t.jsx)(n.p,{children:"A container for individual form fields that provides proper spacing and layout."}),"\n",(0,t.jsx)(n.h3,{id:"formlabel",children:"FormLabel"}),"\n",(0,t.jsx)(n.p,{children:"A label component that's automatically associated with its corresponding form control."}),"\n",(0,t.jsx)(n.h3,{id:"formcontrol",children:"FormControl"}),"\n",(0,t.jsx)(n.p,{children:"A component that provides the proper accessibility attributes to form inputs."}),"\n",(0,t.jsx)(n.h3,{id:"formdescription",children:"FormDescription"}),"\n",(0,t.jsx)(n.p,{children:"A description component for providing additional information about a form field."}),"\n",(0,t.jsx)(n.h3,{id:"formmessage",children:"FormMessage"}),"\n",(0,t.jsx)(n.p,{children:"A component for displaying validation error messages."}),"\n",(0,t.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,t.jsx)(n.h3,{id:"form-1",children:"Form"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Prop"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"...props"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"UseFormReturn<TFieldValues, TContext>"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsxs)(n.td,{children:["The return value from the ",(0,t.jsx)(n.code,{children:"useForm"})," hook"]})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"formfield-1",children:"FormField"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Prop"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"control"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Control<TFieldValues>"})}),(0,t.jsx)(n.td,{children:"Required"}),(0,t.jsx)(n.td,{children:"The form control from react-hook-form"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"name"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"FieldPath<TFieldValues>"})}),(0,t.jsx)(n.td,{children:"Required"}),(0,t.jsx)(n.td,{children:"The name of the form field"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"render"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"({ field, fieldState, formState }) => React.ReactElement"})}),(0,t.jsx)(n.td,{children:"Required"}),(0,t.jsx)(n.td,{children:"A render function that provides access to the field props"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"formitem-1",children:"FormItem"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Prop"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"className"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"Optional additional CSS classes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"...props"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"HTMLAttributes<HTMLDivElement>"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"HTML div attributes"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"formlabel-1",children:"FormLabel"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Prop"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"className"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"Optional additional CSS classes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"...props"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ComponentPropsWithoutRef<typeof LabelPrimitive.Root>"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"Radix UI Label props"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"formcontrol-1",children:"FormControl"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Prop"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"...props"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ComponentPropsWithoutRef<typeof Slot>"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"Radix UI Slot props"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"formdescription-1",children:"FormDescription"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Prop"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"className"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"Optional additional CSS classes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"...props"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"HTMLAttributes<HTMLParagraphElement>"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"HTML paragraph attributes"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"formmessage-1",children:"FormMessage"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Prop"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"className"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"Optional additional CSS classes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"children"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ReactNode"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"Optional content to display when there's no error"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"...props"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"HTMLAttributes<HTMLParagraphElement>"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"HTML paragraph attributes"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// Form Field Context Type\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\n// Form Item Context Type\ntype FormItemContextValue = {\n  id: string\n}\n\n// useFormField Return Type\ntype FormFieldInfo = {\n  id: string;\n  name: string;\n  formItemId: string;\n  formDescriptionId: string;\n  formMessageId: string;\n  error?: FieldError;\n  isDirty: boolean;\n  isTouched: boolean;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,t.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,t.jsxs)(n.p,{children:["All form components accept a ",(0,t.jsx)(n.code,{children:"className"})," prop that allows you to add additional Tailwind CSS classes:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<FormItem className="grid grid-cols-4 items-start gap-4">\n  <FormLabel className="mt-2 text-right">Username</FormLabel>\n  <div className="col-span-3">\n    <FormControl>\n      <Input {...field} />\n    </FormControl>\n    <FormDescription className="text-xs">\n      Your public display name.\n    </FormDescription>\n    <FormMessage className="text-xs font-bold" />\n  </div>\n</FormItem>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"creating-custom-form-controls",children:"Creating Custom Form Controls"}),"\n",(0,t.jsxs)(n.p,{children:["You can easily create custom form controls by wrapping them with ",(0,t.jsx)(n.code,{children:"FormControl"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<FormField\n  control={form.control}\n  name="amount"\n  render={({ field }) => (\n    <FormItem>\n      <FormLabel>Amount</FormLabel>\n      <FormControl>\n        <div className="relative">\n          <span className="absolute left-2 top-2">$</span>\n          <Input \n            className="pl-6" \n            type="number" \n            {...field} \n            onChange={(e) => field.onChange(parseFloat(e.target.value))}\n          />\n        </div>\n      </FormControl>\n      <FormMessage />\n    </FormItem>\n  )}\n/>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.h3,{id:"integration-with-select-component",children:"Integration with Select Component"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"\n\n<FormField\n  control={form.control}\n  name="country"\n  render={({ field }) => (\n    <FormItem>\n      <FormLabel>Country</FormLabel>\n      <Select onValueChange={field.onChange} defaultValue={field.value}>\n        <FormControl>\n          <SelectTrigger>\n            <SelectValue placeholder="Select a country" />\n          </SelectTrigger>\n        </FormControl>\n        <SelectContent>\n          <SelectItem value="us">United States</SelectItem>\n          <SelectItem value="ca">Canada</SelectItem>\n          <SelectItem value="uk">United Kingdom</SelectItem>\n        </SelectContent>\n      </Select>\n      <FormMessage />\n    </FormItem>\n  )}\n/>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"using-with-supabase",children:"Using with Supabase"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'"use client"\n\nimport { zodResolver } from "@hookform/resolvers/zod"\nimport { useForm } from "react-hook-form"\nimport * as z from "zod"\nimport { useRouter } from "next/navigation"\nimport { createClientComponentClient } from "@supabase/auth-helpers-nextjs"\n\nimport { Button } from "@/components/ui/button"\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"\nimport { Input } from "@/components/ui/input"\n\nconst formSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n})\n\nexport function LoginForm() {\n  const router = useRouter()\n  const supabase = createClientComponentClient()\n  \n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: "",\n      password: "",\n    },\n  })\n  \n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    try {\n      const { error } = await supabase.auth.signInWithPassword({\n        email: values.email,\n        password: values.password,\n      })\n      \n      if (error) {\n        form.setError("root", { message: error.message })\n        return\n      }\n      \n      router.push("/dashboard")\n      router.refresh()\n    } catch (error) {\n      console.error(error)\n      form.setError("root", { message: "An unexpected error occurred" })\n    }\n  }\n  \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">\n        <FormField\n          control={form.control}\n          name="email"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input type="email" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name="password"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <Input type="password" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        {form.formState.errors.root && (\n          <p className="text-sm font-medium text-destructive">\n            {form.formState.errors.root.message}\n          </p>\n        )}\n        <Button type="submit" className="w-full" disabled={form.formState.isSubmitting}>\n          {form.formState.isSubmitting ? "Logging in..." : "Log in"}\n        </Button>\n      </form>\n    </Form>\n  )\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,t.jsx)(n.p,{children:"The Form components are designed to be responsive by default and can be customized with Tailwind's responsive classes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<FormItem className="sm:grid sm:grid-cols-4 sm:items-start sm:gap-4">\n  <FormLabel className="sm:text-right sm:mt-1">Name</FormLabel>\n  <div className="sm:col-span-3 sm:mt-0 mt-1">\n    <FormControl>\n      <Input {...field} />\n    </FormControl>\n    <FormMessage />\n  </div>\n</FormItem>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,t.jsx)(n.p,{children:"The Form components follow these accessibility best practices:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["FormLabel is properly associated with its corresponding form control using the ",(0,t.jsx)(n.code,{children:"htmlFor"})," attribute"]}),"\n",(0,t.jsx)(n.li,{children:"FormControl adds appropriate ARIA attributes to form inputs (aria-describedby, aria-invalid)"}),"\n",(0,t.jsx)(n.li,{children:"Error messages are properly linked to inputs using IDs"}),"\n",(0,t.jsx)(n.li,{children:"Form descriptions are properly associated with inputs using IDs"}),"\n",(0,t.jsx)(n.li,{children:"Error states are properly indicated visually with color changes and programmatically with aria-invalid"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsx)(n.p,{children:"The Form component:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Uses React Context to provide communication between nested form components"}),"\n",(0,t.jsx)(n.li,{children:"Leverages react-hook-form for state management and validation"}),"\n",(0,t.jsx)(n.li,{children:"Uses Radix UI's Slot component to enable passing props to arbitrary components"}),"\n",(0,t.jsx)(n.li,{children:"Generates unique IDs automatically using React's useId hook"}),"\n",(0,t.jsx)(n.li,{children:"Handles error states and messages automatically"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Missing Control Prop"}),": Always make sure to pass the form.control to FormField, otherwise the form will not be properly controlled."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Using Without Field Render Function"}),": The render function is required for FormField to work properly."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Forgetting FormControl"}),": Always wrap your input components with FormControl to ensure proper accessibility."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Not Providing Default Values"}),": Since FormField uses a controlled component approach, you should provide default values for all fields in your form."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validation Errors Not Showing"}),": Make sure you've included the FormMessage component in your FormItem."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\n\nconst formSchema = z.object({\n  username: z.string().min(2),\n});\n\nfunction TestForm() {\n  const form = useForm({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  });\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(() => {})}>\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input {...field} data-testid=\"username-input\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n\ndescribe('Form', () => {\n  it('renders form elements correctly', () => {\n    render(<TestForm />);\n    expect(screen.getByLabelText(/username/i)).toBeInTheDocument();\n    expect(screen.getByTestId('username-input')).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument();\n  });\n  \n  it('shows validation error for too short username', async () => {\n    render(<TestForm />);\n    const user = userEvent.setup();\n    \n    await user.type(screen.getByTestId('username-input'), 'a');\n    await user.click(screen.getByRole('button', { name: /submit/i }));\n    \n    // Wait for the validation error to appear\n    expect(await screen.findByText(/must be at least 2/i)).toBeInTheDocument();\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/input",children:"Input"}),": Text input component that works with FormControl"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/select",children:"Select"}),": Selection input component that works with FormControl"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox",children:"Checkbox"}),": Toggle input component that works with FormControl"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group",children:"RadioGroup"}),": Radio button group component that works with FormControl"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea",children:"Textarea"}),": Multi-line text input component that works with FormControl"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/button",children:"Button"}),": Button component typically used for form submission"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var o=r(6540);const t={},s=o.createContext(t);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);