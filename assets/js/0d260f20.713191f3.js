"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9947],{5587:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"components/forms/label","title":"Label Component","description":"The Label component renders an accessible label element that can be associated with form controls, providing proper labeling for improved user experience and accessibility.","source":"@site/docs/components/forms/label.md","sourceDirName":"components/forms","slug":"/components/forms/label","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/label","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/forms/label.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Label"},"sidebar":"components","previous":{"title":"Input","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/input"},"next":{"title":"Radio Group","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group"}}');var i=t(4848),r=t(8453);const l={sidebar_label:"Label"},o="Label Component",a={},d=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"With Form Controls",id:"with-form-controls",level:3},{value:"With Required Fields",id:"with-required-fields",level:3},{value:"Disabled State",id:"disabled-state",level:3},{value:"Props",id:"props",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Forms",id:"integration-with-forms",level:3},{value:"Integration with react-hook-form using Regular Label",id:"integration-with-react-hook-form-using-regular-label",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"label-component",children:"Label Component"})}),"\n",(0,i.jsx)(n.p,{children:"The Label component renders an accessible label element that can be associated with form controls, providing proper labeling for improved user experience and accessibility."}),"\n",(0,i.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Label } from '@/components/ui/label';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Label htmlFor="email">Email address</Label>\n<Input id="email" type="email" />\n'})}),"\n",(0,i.jsx)(n.h3,{id:"with-form-controls",children:"With Form Controls"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<div className="grid w-full max-w-sm items-center gap-1.5">\n  <Label htmlFor="username">Username</Label>\n  <Input id="username" placeholder="Enter your username" />\n</div>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"with-required-fields",children:"With Required Fields"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Label htmlFor="password" className="flex items-center gap-1">\n  Password <span className="text-destructive">*</span>\n</Label>\n<Input id="password" type="password" required />\n'})}),"\n",(0,i.jsx)(n.h3,{id:"disabled-state",children:"Disabled State"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Label htmlFor="disabled-input" className="cursor-not-allowed opacity-70">\n  Disabled Field\n</Label>\n<Input id="disabled-input" disabled />\n'})}),"\n",(0,i.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Prop"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"htmlFor"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"The ID of the form element the label is associated with"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"className"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Additional CSS classes to apply"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"children"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ReactNode"})}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Content to display inside the label"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"...props"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>"})}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"All other props are passed to the underlying Radix UI Label component"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import * as React from "react"\nimport * as LabelPrimitive from "@radix-ui/react-label"\nimport { cva, type VariantProps } from "class-variance-authority"\n\nconst labelVariants = cva(\n  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n'})}),"\n",(0,i.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,i.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,i.jsx)(n.p,{children:"The Label component can be customized using the following approaches:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Using the ",(0,i.jsx)(n.code,{children:"className"})," prop to add additional Tailwind classes:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Label htmlFor="custom" className="text-primary text-base font-bold">\n  Custom Label\n</Label>\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Using peer modifiers for connected form elements:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<div className="grid gap-1.5">\n  <Label \n    htmlFor="input-with-error" \n    className="peer-invalid:text-destructive" // Applies when the peer (input) is invalid\n  >\n    Full Name\n  </Label>\n  <Input id="input-with-error" required />\n</div>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Label } from '@/components/ui/label';\n\nexport function RequiredFieldLabel({ children, ...props }) {\n  return (\n    <Label \n      {...props} \n      className={`flex items-center gap-1 ${props.className || ''}`}\n    >\n      {children}\n      <span className=\"text-destructive text-sm\">*</span>\n    </Label>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-forms",children:"Integration with Forms"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\n\nconst formSchema = z.object({\n  email: z.string().email(),\n});\n\nexport function SubscribeForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    console.log(values);\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email Address</FormLabel>\n              <FormControl>\n                <Input placeholder=\"example@email.com\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Subscribe</Button>\n      </form>\n    </Form>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-react-hook-form-using-regular-label",children:"Integration with react-hook-form using Regular Label"}),"\n",(0,i.jsx)(n.p,{children:"If you prefer using the Label component directly with react-hook-form:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { useForm } from \'react-hook-form\';\nimport { Label } from \'@/components/ui/label\';\nimport { Input } from \'@/components/ui/input\';\nimport { Button } from \'@/components/ui/button\';\n\nexport function SimpleForm() {\n  const { register, handleSubmit, formState: { errors } } = useForm();\n\n  const onSubmit = (data) => {\n    console.log(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">\n      <div className="space-y-2">\n        <Label \n          htmlFor="name" \n          className={errors.name ? "text-destructive" : ""}\n        >\n          Name\n        </Label>\n        <Input \n          id="name"\n          {...register("name", { required: "Name is required" })} \n        />\n        {errors.name && (\n          <p className="text-sm text-destructive">\n            {errors.name.message}\n          </p>\n        )}\n      </div>\n      <Button type="submit">Submit</Button>\n    </form>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Label } from \'@/components/ui/label\';\nimport { Checkbox } from \'@/components/ui/checkbox\';\nimport { RadioGroup, RadioGroupItem } from \'@/components/ui/radio-group\';\nimport { Switch } from \'@/components/ui/switch\';\n\nexport function FormControls() {\n  return (\n    <div className="space-y-6">\n      {/* With Checkbox */}\n      <div className="flex items-center space-x-2">\n        <Checkbox id="terms" />\n        <Label htmlFor="terms">Accept terms and conditions</Label>\n      </div>\n      \n      {/* With RadioGroup */}\n      <RadioGroup defaultValue="option-one">\n        <div className="flex items-center space-x-2">\n          <RadioGroupItem value="option-one" id="option-one" />\n          <Label htmlFor="option-one">Option One</Label>\n        </div>\n        <div className="flex items-center space-x-2">\n          <RadioGroupItem value="option-two" id="option-two" />\n          <Label htmlFor="option-two">Option Two</Label>\n        </div>\n      </RadioGroup>\n      \n      {/* With Switch */}\n      <div className="flex items-center space-x-2">\n        <Switch id="airplane-mode" />\n        <Label htmlFor="airplane-mode">Airplane Mode</Label>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,i.jsx)(n.p,{children:"The Label component is designed to work responsively with different form controls:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<div className="grid gap-2 sm:gap-4">\n  <Label \n    htmlFor="responsive-input" \n    className="text-xs sm:text-sm md:text-base"\n  >\n    Responsive Label\n  </Label>\n  <Input id="responsive-input" className="h-8 sm:h-10 md:h-12" />\n</div>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,i.jsx)(n.p,{children:"The Label component follows these accessibility best practices:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Uses the native HTML ",(0,i.jsx)(n.code,{children:"<label>"})," element through Radix UI's Label primitive"]}),"\n",(0,i.jsxs)(n.li,{children:["Properly associates labels with form controls using the ",(0,i.jsx)(n.code,{children:"htmlFor"})," attribute"]}),"\n",(0,i.jsx)(n.li,{children:"Maintains proper styling for disabled states"}),"\n",(0,i.jsx)(n.li,{children:"Supports keyboard navigation through the associated form element"}),"\n",(0,i.jsx)(n.li,{children:"Uses appropriate font size and weight for readability"}),"\n",(0,i.jsx)(n.li,{children:"Enables screen readers to announce the label when the associated control receives focus"}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"peer-disabled"})," class automatically styles the label when associated input is disabled"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.p,{children:"The component:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Is built using Radix UI's Label primitive for proper accessibility"}),"\n",(0,i.jsx)(n.li,{children:"Uses Class Variance Authority (CVA) for maintaining consistent styling"}),"\n",(0,i.jsx)(n.li,{children:"Applies appropriate text sizing and font weight for legibility"}),"\n",(0,i.jsx)(n.li,{children:"Includes styling support for disabled states through the peer modifier"}),"\n",(0,i.jsx)(n.li,{children:"Forwards refs to the underlying Radix UI component"}),"\n",(0,i.jsx)(n.li,{children:"Preserves all native label attributes and event handlers"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Missing ",(0,i.jsx)(n.code,{children:"htmlFor"})," attribute"]}),": Always include the ",(0,i.jsx)(n.code,{children:"htmlFor"})," attribute that matches the ",(0,i.jsx)(n.code,{children:"id"})," of the associated form control"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inconsistent label-control pairing"}),": Ensure that every interactive form element has an associated label"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hidden labels"}),": Avoid hiding labels, as this reduces accessibility. If space is a concern, use appropriate visually-hidden techniques that maintain screen reader access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unclear labeling"}),": Labels should be concise but descriptive of what information is required"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Missing required field indicators"}),': Use visual indicators for required fields, but don\'t rely solely on color (use an asterisk or "Required" text)']}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Example test for the Label component\nimport { render, screen } from '@testing-library/react';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\n\ndescribe('Label', () => {\n  it('renders correctly with the provided text', () => {\n    render(<Label htmlFor=\"test\">Test Label</Label>);\n    expect(screen.getByText('Test Label')).toBeInTheDocument();\n  });\n  \n  it('associates with the correct form control', () => {\n    render(\n      <>\n        <Label htmlFor=\"test-input\">Email Address</Label>\n        <Input id=\"test-input\" placeholder=\"Enter email\" />\n      </>\n    );\n    \n    const label = screen.getByText('Email Address');\n    expect(label).toHaveAttribute('for', 'test-input');\n  });\n  \n  it('applies custom class names', () => {\n    render(\n      <Label htmlFor=\"test\" className=\"custom-class\">\n        Custom Label\n      </Label>\n    );\n    \n    const label = screen.getByText('Custom Label');\n    expect(label).toHaveClass('custom-class');\n  });\n  \n  it('applies proper styling for disabled state', () => {\n    render(\n      <div>\n        <Label htmlFor=\"disabled-input\">Disabled Input</Label>\n        <Input id=\"disabled-input\" disabled />\n      </div>\n    );\n    \n    // Note: Testing peer classes might require additional assertions based on your styling implementation\n    const label = screen.getByText('Disabled Input');\n    expect(label).toBeInTheDocument();\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/input",children:"Input"}),": Text input field that works with Label"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox",children:"Checkbox"}),": Checkbox input that works with Label"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group",children:"RadioGroup"}),": Radio inputs that work with Label"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/select",children:"Select"}),": Select input that works with Label"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/form",children:"Form"}),": Form components that use Label internally with FormLabel"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);