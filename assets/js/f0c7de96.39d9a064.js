"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6935],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},9627:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"components/style/theme-switch","title":"ThemeSwitch Component","description":"A toggle button component that enables users to switch between light, dark, and system color themes. The component displays sun and moon icons that animate smoothly during transitions.","source":"@site/docs/components/style/theme-switch.md","sourceDirName":"components/style","slug":"/components/style/theme-switch","permalink":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/style/theme-switch.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Theme Switch"},"sidebar":"components","previous":{"title":"Typography","permalink":"/nextjs-ts-tailwind-supabase-starter/components/style/typography"}}');var i=t(4848),o=t(8453);const r={sidebar_label:"Theme Switch"},c="ThemeSwitch Component",a={},l=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Within Layout Components",id:"within-layout-components",level:3},{value:"With Custom Positioning",id:"with-custom-positioning",level:3},{value:"Props",id:"props",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Navbar",id:"integration-with-navbar",level:3},{value:"Integration with Settings Form",id:"integration-with-settings-form",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"themeswitch-component",children:"ThemeSwitch Component"})}),"\n",(0,i.jsx)(n.p,{children:"A toggle button component that enables users to switch between light, dark, and system color themes. The component displays sun and moon icons that animate smoothly during transitions."}),"\n",(0,i.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { ThemeSwitch } from '@/components/ui/theme-switch';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"<ThemeSwitch />\n"})}),"\n",(0,i.jsx)(n.p,{children:"The component doesn't require any props as it uses the theme context internally."}),"\n",(0,i.jsx)(n.h3,{id:"within-layout-components",children:"Within Layout Components"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { ThemeSwitch } from \'@/components/ui/theme-switch\';\n\nexport function Header() {\n  return (\n    <header className="flex items-center justify-between p-4 border-b">\n      <Logo />\n      <nav className="flex items-center gap-4">\n        {/* Other navigation items */}\n        <ThemeSwitch />\n      </nav>\n    </header>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"with-custom-positioning",children:"With Custom Positioning"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<div className="fixed bottom-4 right-4 z-50">\n  <ThemeSwitch />\n</div>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,i.jsx)(n.p,{children:"The ThemeSwitch component doesn't accept any props as it's designed to be a self-contained component that works with the ThemeProvider context."}),"\n",(0,i.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,i.jsx)(n.p,{children:"The component doesn't have a specific props interface since it doesn't accept any props."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// The component uses the theme context internally\nimport { useTheme } from '@/contexts/theme-provider';\n\n// Theme type from the context\ntype Theme = 'dark' | 'light' | 'system';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,i.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,i.jsxs)(n.p,{children:["Since ThemeSwitch is based on the ",(0,i.jsx)(n.code,{children:"Button"})," component, you can extend it by creating a custom wrapper:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { ThemeSwitch } from '@/components/ui/theme-switch';\n\nexport function CustomThemeSwitch() {\n  return (\n    <div className=\"p-2 bg-accent rounded-full\">\n      <ThemeSwitch />\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,i.jsx)(n.p,{children:"If you need to add functionality or change the behavior:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useTheme } from '@/contexts/theme-provider';\nimport { Button } from '@/components/ui/button';\nimport { Sun, Moon, Laptop } from 'lucide-react';\n\nexport function ExtendedThemeSwitch() {\n  const { theme, setTheme } = useTheme();\n\n  // Added cycling through all three theme options\n  const cycleTheme = () => {\n    if (theme === 'dark') {\n      setTheme('system');\n    } else if (theme === 'light') {\n      setTheme('dark');\n    } else {\n      setTheme('light');\n    }\n  };\n\n  return (\n    <Button variant=\"ghost\" size=\"icon\" onClick={cycleTheme}>\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:scale-0 dark:-rotate-90\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <Laptop className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all data-[theme=system]:rotate-0 data-[theme=system]:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-navbar",children:"Integration with Navbar"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { ThemeSwitch } from \'@/components/ui/theme-switch\';\n\nexport function Navbar() {\n  return (\n    <nav className="flex items-center justify-between px-4 py-3 border-b">\n      <div className="flex items-center gap-6">\n        <Logo />\n        <NavLinks />\n      </div>\n      <div className="flex items-center gap-4">\n        <UserDropdown />\n        <ThemeSwitch />\n      </div>\n    </nav>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-settings-form",children:"Integration with Settings Form"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { ThemeSwitch } from \'@/components/ui/theme-switch\';\nimport { useTheme } from \'@/contexts/theme-provider\';\n\nexport function UserSettingsForm() {\n  const { theme } = useTheme();\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div className="space-y-4">\n        {/* Other form fields */}\n        <div className="flex items-center justify-between">\n          <div>\n            <h4 className="text-sm font-medium">Theme Preference</h4>\n            <p className="text-sm text-muted-foreground">\n              Current theme: {theme.charAt(0).toUpperCase() + theme.slice(1)}\n            </p>\n          </div>\n          <ThemeSwitch />\n        </div>\n        <Button type="submit">Save Settings</Button>\n      </div>\n    </form>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,i.jsx)(n.p,{children:"The component is designed to work well across all device sizes without special responsiveness considerations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mobile"}),": Works well as a compact icon button"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tablet & Desktop"}),": Same compact appearance, fits well in navigation bars"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Positioning"}),": Can be placed in headers, settings panels, or as a floating button"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,i.jsx)(n.p,{children:"The ThemeSwitch component follows these accessibility best practices:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Screen reader support"}),": Uses ",(0,i.jsx)(n.code,{children:"sr-only"})," class for descriptive text that is visible to screen readers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keyboard navigation"}),": Fully operable via keyboard as it's based on the Button component"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ARIA attributes"}),": Inherits appropriate button ARIA attributes from the Button component"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Motion preferences"}),": Animations respect ",(0,i.jsx)(n.code,{children:"prefers-reduced-motion"})," media query via Tailwind's defaults"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Color contrast"}),": Works with the theme system to ensure proper contrast in both light and dark modes"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.p,{children:"The component:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Uses the ",(0,i.jsx)(n.code,{children:"useTheme"})," hook from the ThemeProvider context to access and update the current theme"]}),"\n",(0,i.jsx)(n.li,{children:"Toggles between 'light' and 'dark' themes (doesn't include 'system' in the toggle cycle)"}),"\n",(0,i.jsx)(n.li,{children:"Leverages CSS transitions for smooth icon animations when switching themes"}),"\n",(0,i.jsx)(n.li,{children:"Uses absolute positioning to overlay the sun and moon icons in the same space"}),"\n",(0,i.jsxs)(n.li,{children:["Utilizes the ",(0,i.jsx)(n.code,{children:"ghost"})," button variant for a minimal appearance that works in various UI contexts"]}),"\n",(0,i.jsx)(n.li,{children:"Handles theme persistence through localStorage in the ThemeProvider"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Missing ThemeProvider"}),": The component must be used within a ",(0,i.jsx)(n.code,{children:"ThemeProvider"})," context or it will throw an error"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Theme Initialization Flicker"}),": To prevent theme flickering on page load, ensure the ThemeProvider is properly set up with server-side rendering considerations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Icon Sizing"}),": The component uses fixed icon sizes, which may need adjustment if used in contexts with different spacing requirements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dark Mode Class"}),": Ensure your Tailwind configuration includes the ",(0,i.jsx)(n.code,{children:"darkMode: 'class'"})," setting for the component to work correctly"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Example test for the ThemeSwitch component\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { ThemeSwitch } from '@/components/ui/theme-switch';\nimport { ThemeProvider } from '@/contexts/theme-provider';\n\ndescribe('ThemeSwitch', () => {\n  it('renders correctly', () => {\n    render(\n      <ThemeProvider>\n        <ThemeSwitch />\n      </ThemeProvider>\n    );\n    expect(screen.getByRole('button')).toBeInTheDocument();\n    expect(screen.getByText('Toggle theme')).toBeInTheDocument();\n  });\n  \n  it('toggles theme when clicked', async () => {\n    const user = userEvent.setup();\n    render(\n      <ThemeProvider defaultTheme=\"light\">\n        <ThemeSwitch />\n      </ThemeProvider>\n    );\n    \n    // Initial state check\n    const documentElement = document.documentElement;\n    expect(documentElement).toHaveClass('light');\n    \n    // Click the button\n    await user.click(screen.getByRole('button'));\n    \n    // Check if theme changed\n    expect(documentElement).toHaveClass('dark');\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/button",children:"Button"}),": The base component that ThemeSwitch extends"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu",children:"Dropdown Menu"}),": Often used alongside ThemeSwitch in navigation components"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);