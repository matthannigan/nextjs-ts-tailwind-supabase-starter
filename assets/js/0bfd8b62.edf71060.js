"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[1281],{1409:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"components/forms/radio-group","title":"RadioGroup Component","description":"A set of checkable buttons\u2014known as radio buttons\u2014where no more than one of the buttons can be checked at a time. The RadioGroup component provides an accessible way to create a group of mutually exclusive options.","source":"@site/docs/components/forms/radio-group.md","sourceDirName":"components/forms","slug":"/components/forms/radio-group","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/forms/radio-group.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Radio Group"},"sidebar":"components","previous":{"title":"Label","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/label"},"next":{"title":"Select","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/select"}}');var t=o(4848),s=o(8453);const r={sidebar_label:"Radio Group"},l="RadioGroup Component",d={},a=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"With Default Selection",id:"with-default-selection",level:3},{value:"Disabled Options",id:"disabled-options",level:3},{value:"Props",id:"props",level:2},{value:"RadioGroup",id:"radiogroup",level:3},{value:"RadioGroupItem",id:"radiogroupitem",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Customizing the Indicator",id:"customizing-the-indicator",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with React Hook Form",id:"integration-with-react-hook-form",level:3},{value:"Card-Based Radio Options",id:"card-based-radio-options",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2},{value:"Installation",id:"installation",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"radiogroup-component",children:"RadioGroup Component"})}),"\n",(0,t.jsx)(n.p,{children:"A set of checkable buttons\u2014known as radio buttons\u2014where no more than one of the buttons can be checked at a time. The RadioGroup component provides an accessible way to create a group of mutually exclusive options."}),"\n",(0,t.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<RadioGroup defaultValue="option-1">\n  <div className="flex items-center space-x-2">\n    <RadioGroupItem value="option-1" id="option-1" />\n    <Label htmlFor="option-1">Option 1</Label>\n  </div>\n  <div className="flex items-center space-x-2">\n    <RadioGroupItem value="option-2" id="option-2" />\n    <Label htmlFor="option-2">Option 2</Label>\n  </div>\n</RadioGroup>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"with-default-selection",children:"With Default Selection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<RadioGroup defaultValue="option-2">\n  <div className="flex items-center space-x-2">\n    <RadioGroupItem value="option-1" id="option-1" />\n    <Label htmlFor="option-1">Option 1</Label>\n  </div>\n  <div className="flex items-center space-x-2">\n    <RadioGroupItem value="option-2" id="option-2" />\n    <Label htmlFor="option-2">Option 2</Label>\n  </div>\n</RadioGroup>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"disabled-options",children:"Disabled Options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<RadioGroup defaultValue="option-1">\n  <div className="flex items-center space-x-2">\n    <RadioGroupItem value="option-1" id="option-1" />\n    <Label htmlFor="option-1">Option 1</Label>\n  </div>\n  <div className="flex items-center space-x-2">\n    <RadioGroupItem value="option-2" id="option-2" disabled />\n    <Label htmlFor="option-2" className="text-muted-foreground">\n      Option 2 (Disabled)\n    </Label>\n  </div>\n</RadioGroup>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,t.jsx)(n.h3,{id:"radiogroup",children:"RadioGroup"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Prop"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"value"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"undefined"})}),(0,t.jsxs)(n.td,{children:["The controlled value of the radio item to check. Must be used with ",(0,t.jsx)(n.code,{children:"onValueChange"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"defaultValue"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"undefined"})}),(0,t.jsx)(n.td,{children:"The value of the radio item that should be checked by default."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"onValueChange"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"(value: string) => void"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"undefined"})}),(0,t.jsx)(n.td,{children:"Event handler called when the value changes."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"disabled"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})}),(0,t.jsxs)(n.td,{children:["When ",(0,t.jsx)(n.code,{children:"true"}),", prevents user interaction with all radio items in the group."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"name"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"undefined"})}),(0,t.jsx)(n.td,{children:"The name of the group. Submitted with its owning form as part of a name/value pair."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"required"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})}),(0,t.jsxs)(n.td,{children:["When ",(0,t.jsx)(n.code,{children:"true"}),", indicates that the user must check a radio item before the owning form can be submitted."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"orientation"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"horizontal" | "vertical"'})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"vertical"'})}),(0,t.jsx)(n.td,{children:"The orientation of the component."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dir"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"ltr" | "rtl"'})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"undefined"})}),(0,t.jsxs)(n.td,{children:["The reading direction of the radio group. If not specified, inherits globally from ",(0,t.jsx)(n.code,{children:"DirectionProvider"})," or assumes LTR (left-to-right) reading mode."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"loop"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})}),(0,t.jsxs)(n.td,{children:["When ",(0,t.jsx)(n.code,{children:"true"}),", keyboard navigation will loop from last item to first, and vice versa."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"className"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"undefined"})}),(0,t.jsx)(n.td,{children:"Additional CSS classes to add to the radio group."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"radiogroupitem",children:"RadioGroupItem"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Prop"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"value"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Required"}),(0,t.jsx)(n.td,{children:"The value of the radio item. Must be unique within the group."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"disabled"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})}),(0,t.jsxs)(n.td,{children:["When ",(0,t.jsx)(n.code,{children:"true"}),", prevents user interaction with this radio item."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"required"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})}),(0,t.jsxs)(n.td,{children:["When ",(0,t.jsx)(n.code,{children:"true"}),", indicates that the user must check this radio item before the owning form can be submitted."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"className"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"undefined"})}),(0,t.jsx)(n.td,{children:"Additional CSS classes to add to the radio item."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"id"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"undefined"})}),(0,t.jsx)(n.td,{children:"The unique ID for the radio item. This should be used to associate the radio with a label."})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// RadioGroup Component Types\nimport * as React from 'react';\nimport * as RadioGroupPrimitive from '@radix-ui/react-radio-group';\n\ntype RadioGroupProps = React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>;\ntype RadioGroupItemProps = React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,t.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,t.jsx)(n.p,{children:"The RadioGroup and RadioGroupItem components can be customized using the following approaches:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Using the ",(0,t.jsx)(n.code,{children:"className"})," prop to add additional Tailwind classes:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<RadioGroup className="flex flex-col space-y-4">\n  {/* ... */}\n</RadioGroup>\n\n<RadioGroupItem className="h-5 w-5 border-blue-500" />\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Using the ",(0,t.jsx)(n.code,{children:"cn"})," utility for conditional styling:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { cn } from '@/lib/utils';\n\n<RadioGroupItem \n  className={cn(\n    'custom-base-styles',\n    isSpecialCase && 'special-case-styles'\n  )} \n/>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"customizing-the-indicator",children:"Customizing the Indicator"}),"\n",(0,t.jsxs)(n.p,{children:["The indicator (the dot inside the radio button) is implemented using the ",(0,t.jsx)(n.code,{children:"Circle"})," component from ",(0,t.jsx)(n.code,{children:"lucide-react"}),". You can customize its appearance by wrapping the RadioGroupItem:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<div className="custom-radio-wrapper">\n  <RadioGroupItem value="custom" id="custom" />\n  {/* Custom styling around the radio */}\n</div>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.h3,{id:"integration-with-react-hook-form",children:"Integration with React Hook Form"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { useForm } from \'react-hook-form\';\nimport { zodResolver } from \'@hookform/resolvers/zod\';\nimport * as z from \'zod\';\nimport { \n  Form, \n  FormControl, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \'@/components/ui/form\';\nimport { RadioGroup, RadioGroupItem } from \'@/components/ui/radio-group\';\n\n// Define your form schema\nconst formSchema = z.object({\n  plan: z.enum([\'free\', \'pro\', \'enterprise\'], {\n    required_error: \'Please select a plan.\',\n  }),\n});\n\n// Create your form component\nfunction PlanForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n  });\n\n  function onSubmit(data: z.infer<typeof formSchema>) {\n    console.log(data);\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">\n        <FormField\n          control={form.control}\n          name="plan"\n          render={({ field }) => (\n            <FormItem className="space-y-3">\n              <FormLabel>Subscription Plan</FormLabel>\n              <FormControl>\n                <RadioGroup\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                  className="flex flex-col space-y-1"\n                >\n                  <FormItem className="flex items-center space-x-3 space-y-0">\n                    <FormControl>\n                      <RadioGroupItem value="free" id="free" />\n                    </FormControl>\n                    <FormLabel htmlFor="free" className="font-normal">\n                      Free\n                    </FormLabel>\n                  </FormItem>\n                  <FormItem className="flex items-center space-x-3 space-y-0">\n                    <FormControl>\n                      <RadioGroupItem value="pro" id="pro" />\n                    </FormControl>\n                    <FormLabel htmlFor="pro" className="font-normal">\n                      Pro\n                    </FormLabel>\n                  </FormItem>\n                  <FormItem className="flex items-center space-x-3 space-y-0">\n                    <FormControl>\n                      <RadioGroupItem value="enterprise" id="enterprise" />\n                    </FormControl>\n                    <FormLabel htmlFor="enterprise" className="font-normal">\n                      Enterprise\n                    </FormLabel>\n                  </FormItem>\n                </RadioGroup>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <button type="submit">Submit</button>\n      </form>\n    </Form>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"card-based-radio-options",children:"Card-Based Radio Options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Card } from '@/components/ui/card';\n\nfunction CardRadioGroup() {\n  const [selectedValue, setSelectedValue] = React.useState('option-1');\n  \n  return (\n    <RadioGroup \n      defaultValue=\"option-1\" \n      onValueChange={setSelectedValue}\n      className=\"grid grid-cols-3 gap-4\"\n    >\n      {['option-1', 'option-2', 'option-3'].map((option) => (\n        <label\n          key={option}\n          htmlFor={option}\n          className=\"cursor-pointer\"\n        >\n          <Card \n            className={`p-4 transition-all hover:border-primary ${\n              selectedValue === option ? 'border-primary bg-primary/5' : ''\n            }`}\n          >\n            <div className=\"flex items-start space-x-4\">\n              <RadioGroupItem \n                value={option} \n                id={option} \n                className=\"mt-1\"\n              />\n              <div>\n                <h3 className=\"font-medium\">Option {option.split('-')[1]}</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Description for option {option.split('-')[1]}\n                </p>\n              </div>\n            </div>\n          </Card>\n        </label>\n      ))}\n    </RadioGroup>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,t.jsx)(n.p,{children:"The RadioGroup responds to different screen sizes in the following ways:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Mobile"}),": By default, RadioGroup renders with a vertical layout (stacked). For a horizontal layout on mobile, use flexbox with wrapping:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<RadioGroup className="flex flex-wrap gap-4">\n  {/* Radio items */}\n</RadioGroup>\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Tablet and Desktop"}),": For a horizontal layout on larger screens, you can use utility classes for responsive behavior:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<RadioGroup className="flex flex-col space-y-2 md:flex-row md:space-x-4 md:space-y-0">\n  {/* Radio items */}\n</RadioGroup>\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,t.jsx)(n.p,{children:"The RadioGroup component follows these accessibility best practices:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Implements the ",(0,t.jsx)(n.a,{href:"https://www.w3.org/WAI/ARIA/apg/patterns/radio/",children:"WAI-ARIA Radio Group pattern"})]}),"\n",(0,t.jsx)(n.li,{children:"Uses the roving tabindex pattern for keyboard navigation within the group"}),"\n",(0,t.jsxs)(n.li,{children:["Includes support for the following keyboard interactions:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Tab"}),": Moves focus to the checked radio button or the first radio button in the group"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Space"}),": Selects the radio button that currently has focus"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Arrow Up/Left"}),": Moves focus to and selects the previous radio button"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Arrow Down/Right"}),": Moves focus to and selects the next radio button"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Supports proper labeling through standard HTML label elements"}),"\n",(0,t.jsx)(n.li,{children:"When used with the FormLabel component, ensures association between labels and controls"}),"\n",(0,t.jsxs)(n.li,{children:["Enables the use of ",(0,t.jsx)(n.code,{children:"required"})," and ",(0,t.jsx)(n.code,{children:"disabled"})," states that are properly communicated to screen readers"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsx)(n.p,{children:"The component:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Is built on top of Radix UI's RadioGroup primitive, which ensures accessibility"}),"\n",(0,t.jsx)(n.li,{children:"Uses standard SVG circles from the Lucide icon library for the radio indicator"}),"\n",(0,t.jsx)(n.li,{children:"Applies default styles that are easily customizable using Tailwind CSS"}),"\n",(0,t.jsx)(n.li,{children:"Includes focus states for keyboard navigation with visible focus rings"}),"\n",(0,t.jsx)(n.li,{children:"Supports directional awareness for both LTR and RTL layouts"}),"\n",(0,t.jsx)(n.li,{children:"Uses a forward ref pattern to maintain proper ref behavior when used within forms"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Missing Value Attribute"}),": Each RadioGroupItem must have a unique ",(0,t.jsx)(n.code,{children:"value"})," prop, or the component won't work correctly."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Incorrect Form Integration"}),": When using with React Hook Form, make sure to use the ",(0,t.jsx)(n.code,{children:"onValueChange"})," handler for RadioGroup (not ",(0,t.jsx)(n.code,{children:"onChange"}),") and set the ",(0,t.jsx)(n.code,{children:"defaultValue"})," properly."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Missing ID/htmlFor Connection"}),": Each RadioGroupItem should have an ",(0,t.jsx)(n.code,{children:"id"})," that matches the ",(0,t.jsx)(n.code,{children:"htmlFor"})," attribute of its corresponding Label."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Styling Indicator State"}),": The checked state is handled by the component; don't try to handle it manually with pseudo-classes like ",(0,t.jsx)(n.code,{children:":checked"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Next.js App Router"}),": When using with Next.js App Router, ensure the component is properly client-side rendered with 'use client' directive at the top of your component file."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// Example test for the RadioGroup component\nimport { render, screen } from \'@testing-library/react\';\nimport userEvent from \'@testing-library/user-event\';\nimport { RadioGroup, RadioGroupItem } from \'@/components/ui/radio-group\';\nimport { Label } from \'@/components/ui/label\';\n\ndescribe(\'RadioGroup\', () => {\n  it(\'renders correctly\', () => {\n    render(\n      <RadioGroup defaultValue="option-1">\n        <div className="flex items-center space-x-2">\n          <RadioGroupItem value="option-1" id="option-1" />\n          <Label htmlFor="option-1">Option 1</Label>\n        </div>\n        <div className="flex items-center space-x-2">\n          <RadioGroupItem value="option-2" id="option-2" />\n          <Label htmlFor="option-2">Option 2</Label>\n        </div>\n      </RadioGroup>\n    );\n    \n    expect(screen.getByText(\'Option 1\')).toBeInTheDocument();\n    expect(screen.getByText(\'Option 2\')).toBeInTheDocument();\n    expect(screen.getByLabelText(\'Option 1\')).toBeChecked();\n    expect(screen.getByLabelText(\'Option 2\')).not.toBeChecked();\n  });\n  \n  it(\'allows changing the selected value\', async () => {\n    const user = userEvent.setup();\n    const onValueChangeMock = jest.fn();\n    \n    render(\n      <RadioGroup defaultValue="option-1" onValueChange={onValueChangeMock}>\n        <div className="flex items-center space-x-2">\n          <RadioGroupItem value="option-1" id="option-1" />\n          <Label htmlFor="option-1">Option 1</Label>\n        </div>\n        <div className="flex items-center space-x-2">\n          <RadioGroupItem value="option-2" id="option-2" />\n          <Label htmlFor="option-2">Option 2</Label>\n        </div>\n      </RadioGroup>\n    );\n    \n    await user.click(screen.getByLabelText(\'Option 2\'));\n    expect(onValueChangeMock).toHaveBeenCalledWith(\'option-2\');\n    expect(screen.getByLabelText(\'Option 2\')).toBeChecked();\n  });\n  \n  it(\'respects the disabled state\', async () => {\n    const user = userEvent.setup();\n    const onValueChangeMock = jest.fn();\n    \n    render(\n      <RadioGroup defaultValue="option-1" onValueChange={onValueChangeMock}>\n        <div className="flex items-center space-x-2">\n          <RadioGroupItem value="option-1" id="option-1" />\n          <Label htmlFor="option-1">Option 1</Label>\n        </div>\n        <div className="flex items-center space-x-2">\n          <RadioGroupItem value="option-2" id="option-2" disabled />\n          <Label htmlFor="option-2">Option 2</Label>\n        </div>\n      </RadioGroup>\n    );\n    \n    await user.click(screen.getByLabelText(\'Option 2\'));\n    expect(onValueChangeMock).not.toHaveBeenCalled();\n    expect(screen.getByLabelText(\'Option 1\')).toBeChecked();\n    expect(screen.getByLabelText(\'Option 2\')).not.toBeChecked();\n  });\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/form",children:"Form"}),": Used together with RadioGroup for form validation and submission"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/label",children:"Label"}),": Used to create accessible labels for RadioGroupItems"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox",children:"Checkbox"}),": Used for multiple selection where users can select multiple options"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/select",children:"Select"}),": Used for selecting a single option from a dropdown menu"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"This component requires the following dependencies:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# For the RadioGroup component\nnpm install @radix-ui/react-radio-group lucide-react\n"})}),"\n",(0,t.jsx)(n.p,{children:"These dependencies are already included in the starter project, so no additional installation is needed unless starting a new project."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var i=o(6540);const t={},s=i.createContext(t);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);