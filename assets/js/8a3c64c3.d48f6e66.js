"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9216],{3851:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"components/ui/badge","title":"Badge Component","description":"The Badge component displays a small visual indicator that helps highlight status, categories, or counts with different styling variants that can be applied to text or used as labels.","source":"@site/docs/components/ui/badge.md","sourceDirName":"components/ui","slug":"/components/ui/badge","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/ui/badge.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Badge"},"sidebar":"components","previous":{"title":"Avatar","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar"},"next":{"title":"Button","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/button"}}');var i=t(4848),a=t(8453);const r={sidebar_label:"Badge"},d="Badge Component",l={},o=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Variants",id:"variants",level:3},{value:"Default",id:"default",level:4},{value:"Secondary",id:"secondary",level:4},{value:"Destructive",id:"destructive",level:4},{value:"Outline",id:"outline",level:4},{value:"Using badgeVariants for Links or Custom Elements",id:"using-badgevariants-for-links-or-custom-elements",level:3},{value:"Props",id:"props",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Cards",id:"integration-with-cards",level:3},{value:"Integration with Forms",id:"integration-with-forms",level:3},{value:"Integration with Buttons",id:"integration-with-buttons",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"badge-component",children:"Badge Component"})}),"\n",(0,i.jsx)(n.p,{children:"The Badge component displays a small visual indicator that helps highlight status, categories, or counts with different styling variants that can be applied to text or used as labels."}),"\n",(0,i.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Badge } from '@/components/ui/badge';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"<Badge>New</Badge>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"variants",children:"Variants"}),"\n",(0,i.jsx)(n.h4,{id:"default",children:"Default"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Badge variant="default">Default</Badge>\n'})}),"\n",(0,i.jsx)(n.h4,{id:"secondary",children:"Secondary"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Badge variant="secondary">Secondary</Badge>\n'})}),"\n",(0,i.jsx)(n.h4,{id:"destructive",children:"Destructive"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Badge variant="destructive">Destructive</Badge>\n'})}),"\n",(0,i.jsx)(n.h4,{id:"outline",children:"Outline"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Badge variant="outline">Outline</Badge>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-badgevariants-for-links-or-custom-elements",children:"Using badgeVariants for Links or Custom Elements"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.code,{children:"badgeVariants"})," helper to apply badge styling to other elements:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { badgeVariants } from '@/components/ui/badge';\nimport Link from 'next/link';\n\n<Link href=\"/categories/new\" className={badgeVariants({ variant: 'outline' })}>\n  View Category\n</Link>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Prop"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"variant"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'default' | 'secondary' | 'destructive' | 'outline'"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"'default'"})}),(0,i.jsx)(n.td,{children:"The visual style variant of the badge"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"className"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Additional CSS classes to apply to the badge"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"children"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ReactNode"})}),(0,i.jsx)(n.td,{children:"Required"}),(0,i.jsx)(n.td,{children:"The content to display inside the badge"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Component Type Definition\ntype BadgeProps = {\n  variant?: 'default' | 'secondary' | 'destructive' | 'outline';\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>; \n"})}),"\n",(0,i.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,i.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,i.jsx)(n.p,{children:"The Badge component can be customized using the following approaches:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Using the ",(0,i.jsx)(n.code,{children:"className"})," prop to add additional Tailwind classes:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Badge className="px-4 py-1 text-sm">Custom Sized</Badge>\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Extending with custom colors:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Badge className="bg-blue-500 hover:bg-blue-600 text-white">Custom Color</Badge>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,i.jsx)(n.p,{children:"For project-specific badge variants, you can extend the base Badge component:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Badge, badgeVariants } from '@/components/ui/badge';\nimport { cn } from '@/lib/utils';\n\nconst SuccessBadge = ({ children, className, ...props }) => {\n  return (\n    <Badge \n      {...props} \n      className={cn(\n        'bg-green-500 text-white hover:bg-green-600',\n        className\n      )}\n    >\n      {children}\n    </Badge>\n  );\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-cards",children:"Integration with Cards"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\n\n<Card>\n  <CardHeader>\n    <div className=\"flex items-center justify-between\">\n      <CardTitle>Project Status</CardTitle>\n      <Badge variant=\"secondary\">In Progress</Badge>\n    </div>\n  </CardHeader>\n  <CardContent>\n    Project details here...\n  </CardContent>\n</Card>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-forms",children:"Integration with Forms"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useForm } from 'react-hook-form';\nimport { Form, FormField, FormItem, FormLabel, FormControl } from '@/components/forms/form';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\n\nconst TaggedFormField = () => {\n  const form = useForm();\n  \n  return (\n    <Form {...form}>\n      <form>\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <div className=\"flex items-center gap-2\">\n                <FormLabel>Email</FormLabel>\n                <Badge variant=\"outline\">Required</Badge>\n              </div>\n              <FormControl>\n                <Input placeholder=\"you@example.com\" {...field} />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n      </form>\n    </Form>\n  );\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"integration-with-buttons",children:"Integration with Buttons"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Button } from \'@/components/ui/button\';\nimport { Badge } from \'@/components/ui/badge\';\n\n<div className="flex items-center gap-2">\n  <Button variant="outline">\n    Notifications\n    <Badge className="ml-2" variant="secondary">5</Badge>\n  </Button>\n</div>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,i.jsx)(n.p,{children:"The Badge component is inherently responsive with its default styling. Here's how it behaves across different screen sizes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mobile"}),": Badges maintain their compact size for mobile interfaces"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tablet/Desktop"}),": Badges scale naturally with their container elements without requiring specific responsive adjustments"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For custom responsive behaviors:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Badge className="px-2 md:px-3 py-0.5 md:py-1 text-xs md:text-sm">\n  Responsive Badge\n</Badge>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,i.jsx)(n.p,{children:"The Badge component follows these accessibility best practices:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Uses appropriate color contrast ratios for all variants to ensure readability"}),"\n",(0,i.jsx)(n.li,{children:"Maintains readable text sizes in the default styling"}),"\n",(0,i.jsx)(n.li,{children:"When used for status indicators, should be paired with appropriate ARIA attributes for screen readers"}),"\n",(0,i.jsx)(n.li,{children:"For interactive badges, ensure they receive focus styles and keyboard interaction support"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example with enhanced accessibility:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Badge \n  role="status" \n  aria-label="3 unread notifications"\n>\n  3\n</Badge>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.p,{children:"The Badge component:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Renders as a ",(0,i.jsx)(n.code,{children:"<div>"})," element by default"]}),"\n",(0,i.jsx)(n.li,{children:"Uses the class-variance-authority (CVA) utility for variant management"}),"\n",(0,i.jsx)(n.li,{children:"Applies TailwindCSS utility classes for styling"}),"\n",(0,i.jsx)(n.li,{children:"Supports standard HTML div attributes through React HTMLAttributes spreading"}),"\n",(0,i.jsx)(n.li,{children:"Uses a rounded-full design by default for the classic badge appearance"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Crowding with content"}),": Avoid placing badges too close to other UI elements without adequate spacing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Overusing variants"}),": Use variants consistently to maintain their meaning throughout the application"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inaccessible color combinations"}),": Be cautious when overriding colors to maintain sufficient contrast"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Example test for the Badge component\nimport { render, screen } from '@testing-library/react';\nimport { Badge } from '@/components/ui/badge';\n\ndescribe('Badge', () => {\n  it('renders with default variant correctly', () => {\n    render(<Badge>Test Badge</Badge>);\n    const badge = screen.getByText('Test Badge');\n    expect(badge).toBeInTheDocument();\n    expect(badge).toHaveClass('bg-primary'); // Check for default variant class\n  });\n  \n  it('applies custom className', () => {\n    render(<Badge className=\"test-class\">Test Badge</Badge>);\n    const badge = screen.getByText('Test Badge');\n    expect(badge).toHaveClass('test-class');\n  });\n  \n  it('renders with different variants', () => {\n    const { rerender } = render(<Badge variant=\"secondary\">Secondary</Badge>);\n    expect(screen.getByText('Secondary')).toHaveClass('bg-secondary');\n    \n    rerender(<Badge variant=\"destructive\">Destructive</Badge>);\n    expect(screen.getByText('Destructive')).toHaveClass('bg-destructive');\n    \n    rerender(<Badge variant=\"outline\">Outline</Badge>);\n    expect(screen.getByText('Outline')).toHaveClass('text-foreground');\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/button",children:"Button"}),": Often used together with badges to show counts or status"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/card",children:"Card"}),": Badges can be used in card headers to indicate status or categories"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/alert",children:"Alert"}),": Similar to badges but for more prominent notifications or messages"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);