"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[4531],{2781:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"components/ui/dialog","title":"Dialog Component","description":"A modal overlay component that displays content on top of the main application window, rendering the underlying content inert until the dialog is dismissed.","source":"@site/docs/components/ui/dialog.md","sourceDirName":"components/ui","slug":"/components/ui/dialog","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/ui/dialog.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Dialog"},"sidebar":"components","previous":{"title":"Content Card","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card"},"next":{"title":"Dropdown Menu","permalink":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu"}}');var o=t(4848),l=t(8453);const s={sidebar_label:"Dialog"},r="Dialog Component",a={},d=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Custom Trigger",id:"custom-trigger",level:3},{value:"Custom Close Button",id:"custom-close-button",level:3},{value:"Controlled Dialog",id:"controlled-dialog",level:3},{value:"Props",id:"props",level:2},{value:"Dialog Props",id:"dialog-props",level:3},{value:"DialogTrigger Props",id:"dialogtrigger-props",level:3},{value:"DialogContent Props",id:"dialogcontent-props",level:3},{value:"DialogHeader Props",id:"dialogheader-props",level:3},{value:"DialogFooter Props",id:"dialogfooter-props",level:3},{value:"DialogTitle Props",id:"dialogtitle-props",level:3},{value:"DialogDescription Props",id:"dialogdescription-props",level:3},{value:"DialogClose Props",id:"dialogclose-props",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with Forms",id:"integration-with-forms",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"dialog-component",children:"Dialog Component"})}),"\n",(0,o.jsx)(n.p,{children:"A modal overlay component that displays content on top of the main application window, rendering the underlying content inert until the dialog is dismissed."}),"\n",(0,o.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  DialogClose\n} from '@/components/ui/dialog';\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<Dialog>\n  <DialogTrigger>Open Dialog</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Dialog Title</DialogTitle>\n      <DialogDescription>This is a description of the dialog content.</DialogDescription>\n    </DialogHeader>\n    <p>Main content goes here.</p>\n    <DialogFooter>\n      <Button variant="outline" onClick={() => {}}>Cancel</Button>\n      <Button onClick={() => {}}>Save</Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"custom-trigger",children:"Custom Trigger"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<Dialog>\n  <DialogTrigger asChild>\n    <Button variant="outline">Custom Trigger Button</Button>\n  </DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Custom Trigger</DialogTitle>\n      <DialogDescription>A dialog triggered by a custom button element.</DialogDescription>\n    </DialogHeader>\n    <p>You can use any component as a trigger with the asChild prop.</p>\n  </DialogContent>\n</Dialog>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"custom-close-button",children:"Custom Close Button"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<Dialog>\n  <DialogTrigger>Open Dialog</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Custom Close</DialogTitle>\n      <DialogDescription>This dialog has a custom close button.</DialogDescription>\n    </DialogHeader>\n    <div className="py-4">Dialog content here.</div>\n    <DialogFooter>\n      <DialogClose asChild>\n        <Button variant="outline">Close Dialog</Button>\n      </DialogClose>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"controlled-dialog",children:"Controlled Dialog"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"'use client';\n\nimport { useState } from 'react';\n\nexport function ControlledDialog() {\n  const [open, setOpen] = useState(false);\n  \n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger>Open Controlled Dialog</DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Controlled Dialog</DialogTitle>\n          <DialogDescription>This dialog's state is controlled programmatically.</DialogDescription>\n        </DialogHeader>\n        <p>You can control the open state with your own state management.</p>\n        <DialogFooter>\n          <Button onClick={() => setOpen(false)}>Close</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,o.jsx)(n.h3,{id:"dialog-props",children:"Dialog Props"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Prop"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"open"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boolean"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Controls the open state when used as a controlled component"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"defaultOpen"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boolean"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"false"})}),(0,o.jsx)(n.td,{children:"The default open state when uncontrolled"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"onOpenChange"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"(open: boolean) => void"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Callback fired when the open state changes"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"modal"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boolean"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"true"})}),(0,o.jsx)(n.td,{children:"Whether to render as a modal dialog"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"children"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ReactNode"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"The dialog trigger and content components"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"dialogtrigger-props",children:"DialogTrigger Props"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Prop"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"asChild"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boolean"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"false"})}),(0,o.jsx)(n.td,{children:"When true, the component will render its child instead of a default button"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"children"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ReactNode"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"The element that triggers the dialog"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"dialogcontent-props",children:"DialogContent Props"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Prop"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"className"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Additional CSS classes to apply to the dialog content"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"children"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ReactNode"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"The content to display inside the dialog"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"forceMount"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boolean"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"false"})}),(0,o.jsx)(n.td,{children:"Force the dialog to mount even when it's not open"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"onEscapeKeyDown"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"(event: KeyboardEvent) => void"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Event handler called when the escape key is pressed"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"onPointerDownOutside"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"(event: PointerDownOutsideEvent) => void"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Event handler called when a pointer event occurs outside the dialog"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"onInteractOutside"})}),(0,o.jsx)(n.td,{children:"`(event: React.MouseEvent"}),(0,o.jsx)(n.td,{children:"React.TouchEvent) => void`"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"...props"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>"})}),(0,o.jsx)(n.td,{children:"-"}),(0,o.jsx)(n.td,{children:"All other props are passed to the underlying Radix UI Dialog Content"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"dialogheader-props",children:"DialogHeader Props"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Prop"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"className"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Additional CSS classes to apply to the dialog header"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"children"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ReactNode"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"The content to display inside the dialog header"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"...props"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"React.HTMLAttributes<HTMLDivElement>"})}),(0,o.jsx)(n.td,{children:"-"}),(0,o.jsx)(n.td,{children:"All other props are passed to the underlying div element"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"dialogfooter-props",children:"DialogFooter Props"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Prop"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"className"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Additional CSS classes to apply to the dialog footer"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"children"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ReactNode"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"The content to display inside the dialog footer"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"...props"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"React.HTMLAttributes<HTMLDivElement>"})}),(0,o.jsx)(n.td,{children:"-"}),(0,o.jsx)(n.td,{children:"All other props are passed to the underlying div element"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"dialogtitle-props",children:"DialogTitle Props"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Prop"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"className"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Additional CSS classes to apply to the dialog title"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"children"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ReactNode"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"The content to display as the dialog title"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"...props"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>"})}),(0,o.jsx)(n.td,{children:"-"}),(0,o.jsx)(n.td,{children:"All other props are passed to the underlying Radix UI Dialog Title"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"dialogdescription-props",children:"DialogDescription Props"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Prop"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"className"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Additional CSS classes to apply to the dialog description"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"children"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ReactNode"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"The content to display as the dialog description"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"...props"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>"})}),(0,o.jsx)(n.td,{children:"-"}),(0,o.jsx)(n.td,{children:"All other props are passed to the underlying Radix UI Dialog Description"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"dialogclose-props",children:"DialogClose Props"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Prop"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"asChild"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boolean"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"false"})}),(0,o.jsx)(n.td,{children:"When true, the component will render its child instead of a default button"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"children"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ReactNode"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"<X />"})}),(0,o.jsx)(n.td,{children:"The element used to close the dialog"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"...props"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"React.ComponentPropsWithoutRef<typeof DialogPrimitive.Close>"})}),(0,o.jsx)(n.td,{children:"-"}),(0,o.jsx)(n.td,{children:"All other props are passed to the underlying Radix UI Dialog Close"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import * as React from 'react';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\n\n// Dialog Props\ntype DialogProps = React.ComponentProps<typeof DialogPrimitive.Root>;\n\n// DialogTrigger Props\ntype DialogTriggerProps = React.ComponentProps<typeof DialogPrimitive.Trigger>;\n\n// DialogContent Props\ntype DialogContentProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>;\n\n// DialogHeader Props\ntype DialogHeaderProps = React.HTMLAttributes<HTMLDivElement>;\n\n// DialogFooter Props\ntype DialogFooterProps = React.HTMLAttributes<HTMLDivElement>;\n\n// DialogTitle Props\ntype DialogTitleProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>;\n\n// DialogDescription Props\ntype DialogDescriptionProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>;\n\n// DialogClose Props\ntype DialogCloseProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Close>;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,o.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,o.jsx)(n.p,{children:"The Dialog component can be customized using the following approaches:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Using the ",(0,o.jsx)(n.code,{children:"className"})," prop to add additional Tailwind classes to each sub-component:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<Dialog>\n  <DialogTrigger>Open Dialog</DialogTrigger>\n  <DialogContent className="max-w-md rounded-xl bg-slate-50 dark:bg-slate-900">\n    <DialogHeader className="border-b pb-4">\n      <DialogTitle className="text-xl text-primary">Custom Title</DialogTitle>\n      <DialogDescription className="text-primary/70">\n        This dialog has custom styling.\n      </DialogDescription>\n    </DialogHeader>\n    <div className="py-4">Content with custom styling.</div>\n    <DialogFooter className="border-t pt-4 gap-2">\n      <Button variant="outline" className="flex-1">Cancel</Button>\n      <Button className="flex-1">Save</Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Customizing the animation and transition properties:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<DialogContent\n  className=\"data-[state=open]:animate-customFadeIn data-[state=closed]:animate-customFadeOut\"\n  style={{ animationDuration: '400ms' }}\n>\n  {/* Dialog content */}\n</DialogContent>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"'use client';\n\nimport { ReactNode } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\n\ninterface ConfirmDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  title: string;\n  description?: string;\n  confirmLabel?: string;\n  cancelLabel?: string;\n  onConfirm: () => void;\n  onCancel?: () => void;\n  children?: ReactNode;\n  variant?: 'default' | 'destructive';\n}\n\nexport function ConfirmDialog({\n  open,\n  onOpenChange,\n  title,\n  description,\n  confirmLabel = 'Confirm',\n  cancelLabel = 'Cancel',\n  onConfirm,\n  onCancel,\n  children,\n  variant = 'default'\n}: ConfirmDialogProps) {\n  const handleCancel = () => {\n    onOpenChange(false);\n    onCancel?.();\n  };\n\n  const handleConfirm = () => {\n    onConfirm();\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          {description && <DialogDescription>{description}</DialogDescription>}\n        </DialogHeader>\n        {children}\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={handleCancel}>\n            {cancelLabel}\n          </Button>\n          <Button \n            variant={variant === 'destructive' ? 'destructive' : 'default'} \n            onClick={handleConfirm}\n          >\n            {confirmLabel}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{id:"integration-with-forms",children:"Integration with Forms"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport * as z from 'zod';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\n\nconst formSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters' }),\n  email: z.string().email({ message: 'Please enter a valid email address' }),\n});\n\nexport function FormDialog() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    console.log(values);\n    // Handle form submission\n  }\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button>Open Form Dialog</Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Edit Profile</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter your name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter your email\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => form.reset()}>\n                Cancel\n              </Button>\n              <Button type=\"submit\">Save</Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'\'use client\';\n\nimport { useState } from \'react\';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  DialogTrigger\n} from \'@/components/ui/dialog\';\nimport { Button } from \'@/components/ui/button\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \'@/components/ui/tabs\';\nimport { Input } from \'@/components/ui/input\';\n\nexport function ComplexDialog() {\n  const [activeTab, setActiveTab] = useState(\'details\');\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button>View Product Options</Button>\n      </DialogTrigger>\n      <DialogContent className="sm:max-w-[600px]">\n        <DialogHeader>\n          <DialogTitle>Product Configuration</DialogTitle>\n          <DialogDescription>\n            Configure product options and save your preferences.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Tabs defaultValue="details" onValueChange={setActiveTab}>\n          <TabsList className="grid w-full grid-cols-2">\n            <TabsTrigger value="details">Details</TabsTrigger>\n            <TabsTrigger value="preferences">Preferences</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value="details">\n            <Card>\n              <CardHeader>\n                <CardTitle>Product Details</CardTitle>\n                <CardDescription>Configure basic product information.</CardDescription>\n              </CardHeader>\n              <CardContent className="space-y-4">\n                <div className="space-y-2">\n                  <label htmlFor="name" className="text-sm font-medium">Name</label>\n                  <Input id="name" placeholder="Product name" />\n                </div>\n                <div className="space-y-2">\n                  <label htmlFor="description" className="text-sm font-medium">Description</label>\n                  <Input id="description" placeholder="Product description" />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value="preferences">\n            <Card>\n              <CardHeader>\n                <CardTitle>User Preferences</CardTitle>\n                <CardDescription>Configure your personal preferences.</CardDescription>\n              </CardHeader>\n              <CardContent className="space-y-4">\n                <div className="space-y-2">\n                  <label htmlFor="theme" className="text-sm font-medium">Theme</label>\n                  <Input id="theme" placeholder="Choose theme" />\n                </div>\n                <div className="space-y-2">\n                  <label htmlFor="language" className="text-sm font-medium">Language</label>\n                  <Input id="language" placeholder="Select language" />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n        \n        <DialogFooter>\n          <Button variant="outline">Cancel</Button>\n          <Button>Save Changes</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,o.jsx)(n.p,{children:"The Dialog component is responsive by default, but you can enhance its behavior across different device sizes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<Dialog>\n  <DialogTrigger>Open Dialog</DialogTrigger>\n  <DialogContent className="w-[90vw] max-w-[90vw] md:w-auto md:max-w-md lg:max-w-lg">\n    <DialogHeader className="text-center sm:text-left">\n      <DialogTitle className="text-xl sm:text-2xl">Responsive Dialog</DialogTitle>\n      <DialogDescription className="text-sm sm:text-base">\n        This dialog adjusts its size and layout based on screen size.\n      </DialogDescription>\n    </DialogHeader>\n    <div className="py-4">\n      <p className="text-sm sm:text-base">\n        Content will reflow and resize based on the viewport.\n      </p>\n    </div>\n    <DialogFooter className="flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2">\n      <Button variant="outline" className="w-full sm:w-auto">Cancel</Button>\n      <Button className="w-full sm:w-auto">Continue</Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\n'})}),"\n",(0,o.jsx)(n.p,{children:"The responsive behavior includes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Mobile"}),": Full-width dialog with stacked footer buttons"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tablet"}),": Constrained width with horizontal footer buttons"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Desktop"}),": Larger maximum width with standard layout"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,o.jsx)(n.p,{children:"The Dialog component follows these accessibility best practices:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Implements the ",(0,o.jsx)(n.a,{href:"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/",children:"WAI-ARIA Dialog Pattern"})]}),"\n",(0,o.jsxs)(n.li,{children:["Uses appropriate ARIA roles (",(0,o.jsx)(n.code,{children:"dialog"})," and ",(0,o.jsx)(n.code,{children:"alertdialog"}),") based on content"]}),"\n",(0,o.jsx)(n.li,{children:"Traps focus within the dialog when open"}),"\n",(0,o.jsx)(n.li,{children:"Supports keyboard navigation (Tab, Shift+Tab) for interactive elements"}),"\n",(0,o.jsx)(n.li,{children:"Closes on Escape key press by default"}),"\n",(0,o.jsx)(n.li,{children:"Prevents interaction with content behind the dialog when open"}),"\n",(0,o.jsx)(n.li,{children:"Includes a visible close button with screen reader accessible label"}),"\n",(0,o.jsx)(n.li,{children:"Has properly associated DialogTitle and DialogDescription elements"}),"\n",(0,o.jsx)(n.li,{children:"Automatically manages focus restoration when the dialog is closed"}),"\n",(0,o.jsx)(n.li,{children:"Announces dialog content to screen readers when opened"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,o.jsx)(n.p,{children:"The component:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Is built on Radix UI's Dialog primitive for robust accessibility and keyboard handling"}),"\n",(0,o.jsx)(n.li,{children:"Uses a Portal to render outside the normal DOM hierarchy, preventing stacking issues"}),"\n",(0,o.jsx)(n.li,{children:"Applies smooth animations for opening and closing transitions"}),"\n",(0,o.jsx)(n.li,{children:"Renders with a semi-transparent backdrop that prevents interaction with content underneath"}),"\n",(0,o.jsx)(n.li,{children:"Centers content in the viewport with proper positioning"}),"\n",(0,o.jsx)(n.li,{children:"Includes responsive styling using Tailwind CSS with breakpoint adaptations"}),"\n",(0,o.jsxs)(n.li,{children:["Handles both controlled (with ",(0,o.jsx)(n.code,{children:"open"})," and ",(0,o.jsx)(n.code,{children:"onOpenChange"}),") and uncontrolled usage patterns"]}),"\n",(0,o.jsx)(n.li,{children:"Includes specialized layout components (Header, Footer) for consistent structure"}),"\n",(0,o.jsx)(n.li,{children:"Implements a close button in the top right corner by default"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Z-index conflicts"}),": The Dialog uses ",(0,o.jsx)(n.code,{children:"z-50"})," by default. If it appears behind other elements, you may need to adjust z-index values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Scrolling behavior"}),": Long dialog content can cause issues. Use max-height constraints and enable overflow scrolling on the content section where needed."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Controlled state management"}),": When using the controlled pattern, ensure state updates are properly handled to avoid the dialog getting stuck in an open or closed state."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Focus management"}),": Custom implementations should maintain proper focus handling for accessibility."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Using within Context Menu or Dropdown Menu"}),": To activate a Dialog from these components, ensure you wrap the Menu component with the Dialog component as noted in the Shadcn documentation."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Server components"}),": The Dialog component uses client-side features and must be used within client components or with the 'use client' directive."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// Example test for the Dialog component\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Dialog, DialogTrigger, DialogContent, DialogTitle } from '@/components/ui/dialog';\n\ndescribe('Dialog', () => {\n  it('opens when trigger is clicked', async () => {\n    render(\n      <Dialog>\n        <DialogTrigger>Open Dialog</DialogTrigger>\n        <DialogContent>\n          <DialogTitle>Test Dialog</DialogTitle>\n          <p>Dialog content</p>\n        </DialogContent>\n      </Dialog>\n    );\n    \n    // Check that dialog is not initially in the document\n    expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\n    \n    // Click the trigger button\n    await userEvent.click(screen.getByText('Open Dialog'));\n    \n    // Check that dialog is now in the document\n    await waitFor(() => {\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\n      expect(screen.getByText('Test Dialog')).toBeInTheDocument();\n      expect(screen.getByText('Dialog content')).toBeInTheDocument();\n    });\n  });\n  \n  it('closes when close button is clicked', async () => {\n    render(\n      <Dialog>\n        <DialogTrigger>Open Dialog</DialogTrigger>\n        <DialogContent>\n          <DialogTitle>Test Dialog</DialogTitle>\n          <p>Dialog content</p>\n        </DialogContent>\n      </Dialog>\n    );\n    \n    // Open the dialog\n    await userEvent.click(screen.getByText('Open Dialog'));\n    \n    // Check that dialog is open\n    await waitFor(() => {\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\n    });\n    \n    // Click the close button (X in the corner)\n    const closeButton = screen.getByRole('button', { name: /close/i });\n    await userEvent.click(closeButton);\n    \n    // Check that dialog is closed\n    await waitFor(() => {\n      expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\n    });\n  });\n  \n  it('supports controlled open state', async () => {\n    const ControlledDialogTest = () => {\n      const [open, setOpen] = React.useState(false);\n      return (\n        <div>\n          <button onClick={() => setOpen(true)}>Open Controlled</button>\n          <Dialog open={open} onOpenChange={setOpen}>\n            <DialogContent>\n              <DialogTitle>Controlled Dialog</DialogTitle>\n              <button onClick={() => setOpen(false)}>Close</button>\n            </DialogContent>\n          </Dialog>\n        </div>\n      );\n    };\n    \n    render(<ControlledDialogTest />);\n    \n    // Open dialog with external button\n    await userEvent.click(screen.getByText('Open Controlled'));\n    \n    // Check dialog is open\n    await waitFor(() => {\n      expect(screen.getByRole('dialog')).toBeInTheDocument();\n    });\n    \n    // Close with internal button\n    await userEvent.click(screen.getByText('Close'));\n    \n    // Check dialog is closed\n    await waitFor(() => {\n      expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\n    });\n  });\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://ui.shadcn.com/docs/components/alert-dialog",children:"AlertDialog"}),": Similar to Dialog, but for critical confirmations that interrupt the user"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://ui.shadcn.com/docs/components/sheet",children:"Sheet"}),": Extends the Dialog component to create a slide-in panel from the edge of the screen"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/popover",children:"Popover"}),": For smaller, non-modal overlays that don't block the main content"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu",children:"DropdownMenu"}),": For dropdown menus that can trigger dialogs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://ui.shadcn.com/docs/components/drawer",children:"Drawer"}),": Alternative to Dialog for mobile-friendly slide-in panels"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(6540);const o={},l=i.createContext(o);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);