"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[5599],{7078:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"developer-guide/tools/playwright","title":"Playwright Configuration and Usage","description":"Playwright is a powerful end-to-end testing framework that enables reliable testing for modern web apps. This document covers how Playwright is configured and used in this project for end-to-end testing.","source":"@site/docs/developer-guide/tools/playwright.md","sourceDirName":"developer-guide/tools","slug":"/developer-guide/tools/playwright","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/developer-guide/tools/playwright.md","tags":[],"version":"current","sidebarPosition":45,"frontMatter":{"sidebar_position":45,"sidebar_label":"Playwright"},"sidebar":"start","previous":{"title":"Repomix","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix"},"next":{"title":"Contributing","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing"}}');var i=n(4848),a=n(8453);const r={sidebar_position:45,sidebar_label:"Playwright"},o="Playwright Configuration and Usage",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Setting Up Playwright",id:"setting-up-playwright",level:2},{value:"Directory Structure",id:"directory-structure",level:2},{value:"Writing Tests",id:"writing-tests",level:2},{value:"1. Basic Test",id:"1-basic-test",level:3},{value:"2. Using Page Object Model Pattern",id:"2-using-page-object-model-pattern",level:3},{value:"3. Testing API and UI Together",id:"3-testing-api-and-ui-together",level:3},{value:"Running Tests",id:"running-tests",level:2},{value:"Visual Testing",id:"visual-testing",level:2},{value:"Authentication Helpers",id:"authentication-helpers",level:2},{value:"Best Practices",id:"best-practices",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"playwright-configuration-and-usage",children:"Playwright Configuration and Usage"})}),"\n",(0,i.jsx)(t.p,{children:"Playwright is a powerful end-to-end testing framework that enables reliable testing for modern web apps. This document covers how Playwright is configured and used in this project for end-to-end testing."}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Version"}),": 1.5x"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Capabilities"}),": Cross-browser testing, mobile viewport testing, visual testing, and more"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Browsers"}),": Chrome, Firefox, WebKit (Safari)"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(t.p,{children:["The project should have a Playwright configuration file. If not created yet, you can create a ",(0,i.jsx)(t.code,{children:"playwright.config.ts"})," file at the project root with the following configuration:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"import { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './e2e-tests',\n  timeout: 30000,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: 'html',\n  use: {\n    baseURL: 'http://localhost:3000',\n    trace: 'on-first-retry',\n    screenshot: 'only-on-failure',\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n    {\n      name: 'Mobile Safari',\n      use: { ...devices['iPhone 12'] },\n    },\n  ],\n  webServer: {\n    command: 'npm run dev',\n    port: 3000,\n    reuseExistingServer: !process.env.CI,\n  },\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"setting-up-playwright",children:"Setting Up Playwright"}),"\n",(0,i.jsx)(t.p,{children:"If not already set up, you can initialize Playwright with:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npx playwright install\n"})}),"\n",(0,i.jsx)(t.p,{children:"This installs required browsers and dependencies."}),"\n",(0,i.jsx)(t.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,i.jsxs)(t.p,{children:["Create an ",(0,i.jsx)(t.code,{children:"e2e-tests"})," directory at the project root with the following structure:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"e2e-tests/\n\u251c\u2500\u2500 fixtures/         # Test data and fixtures\n\u251c\u2500\u2500 helpers/          # Helper functions for tests\n\u251c\u2500\u2500 pages/            # Page object models\n\u2502   \u251c\u2500\u2500 HomePage.ts\n\u2502   \u251c\u2500\u2500 LoginPage.ts\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 specs/            # Test specifications\n    \u251c\u2500\u2500 auth.spec.ts\n    \u251c\u2500\u2500 navigation.spec.ts\n    \u2514\u2500\u2500 ...\n"})}),"\n",(0,i.jsx)(t.h2,{id:"writing-tests",children:"Writing Tests"}),"\n",(0,i.jsx)(t.h3,{id:"1-basic-test",children:"1. Basic Test"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e-tests/specs/home.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest('homepage has title and links', async ({ page }) => {\n  await page.goto('/');\n  \n  // Verify title\n  await expect(page).toHaveTitle(/Next.js Starter/);\n  \n  // Check for navigation links\n  await expect(page.getByRole('link', { name: 'Dashboard' })).toBeVisible();\n  await expect(page.getByRole('link', { name: 'Login' })).toBeVisible();\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"2-using-page-object-model-pattern",children:"2. Using Page Object Model Pattern"}),"\n",(0,i.jsx)(t.p,{children:"Create page object models to encapsulate page interactions:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e-tests/pages/LoginPage.ts\nimport { Page, Locator } from '@playwright/test';\n\nexport class LoginPage {\n  readonly page: Page;\n  readonly emailInput: Locator;\n  readonly passwordInput: Locator;\n  readonly loginButton: Locator;\n  \n  constructor(page: Page) {\n    this.page = page;\n    this.emailInput = page.getByLabel('Email');\n    this.passwordInput = page.getByLabel('Password');\n    this.loginButton = page.getByRole('button', { name: 'Login' });\n  }\n  \n  async goto() {\n    await this.page.goto('/login');\n  }\n  \n  async login(email: string, password: string) {\n    await this.emailInput.fill(email);\n    await this.passwordInput.fill(password);\n    await this.loginButton.click();\n  }\n}\n\n// Use in test\n// e2e-tests/specs/auth.spec.ts\nimport { test, expect } from '@playwright/test';\nimport { LoginPage } from '../pages/LoginPage';\n\ntest('user can login', async ({ page }) => {\n  const loginPage = new LoginPage(page);\n  await loginPage.goto();\n  await loginPage.login('test@example.com', 'password123');\n  \n  // Verify successful login\n  await expect(page.getByText('Welcome back')).toBeVisible();\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"3-testing-api-and-ui-together",children:"3. Testing API and UI Together"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e-tests/specs/profile.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest('user can update profile', async ({ page, request }) => {\n  // Login via API for speed\n  const loginResponse = await request.post('/api/auth/login', {\n    data: {\n      email: 'test@example.com',\n      password: 'password123'\n    }\n  });\n  \n  // Extract cookies from response\n  const cookies = loginResponse.headers()['set-cookie'];\n  if (cookies) {\n    await page.context().addCookies(\n      cookies.map(c => {\n        const [name, value] = c.split('=');\n        return { name, value, domain: 'localhost', path: '/' };\n      })\n    );\n  }\n  \n  // Navigate to profile page\n  await page.goto('/profile');\n  \n  // Update profile\n  await page.getByLabel('Display Name').fill('Updated Name');\n  await page.getByRole('button', { name: 'Save Changes' }).click();\n  \n  // Verify success message\n  await expect(page.getByText('Profile updated successfully')).toBeVisible();\n  \n  // Verify data was actually updated\n  await page.reload();\n  await expect(page.getByLabel('Display Name')).toHaveValue('Updated Name');\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsxs)(t.p,{children:["Add the following scripts to your ",(0,i.jsx)(t.code,{children:"package.json"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'"scripts": {\n  "test:e2e": "playwright test",\n  "test:e2e:ui": "playwright test --ui",\n  "test:e2e:debug": "playwright test --debug",\n  "test:e2e:report": "playwright show-report"\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Default commands:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Run all tests"}),": Run all Playwright tests headlessly"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run test:e2e\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Run with UI mode"}),": Run tests with the UI mode for debugging"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run test:e2e:ui\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Debug tests"}),": Run tests in debug mode with browser window"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run test:e2e:debug\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Show report"}),": Open the HTML report after tests complete"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run test:e2e:report\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"visual-testing",children:"Visual Testing"}),"\n",(0,i.jsx)(t.p,{children:"Playwright supports visual comparison testing:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e-tests/specs/visual.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest('homepage visual regression', async ({ page }) => {\n  await page.goto('/');\n  \n  // Take a screenshot and compare with baseline\n  await expect(page).toHaveScreenshot('homepage.png', {\n    maxDiffPixelRatio: 0.01\n  });\n});\n"})}),"\n",(0,i.jsx)(t.p,{children:"To update snapshots when UI changes:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npx playwright test --update-snapshots\n"})}),"\n",(0,i.jsx)(t.h2,{id:"authentication-helpers",children:"Authentication Helpers"}),"\n",(0,i.jsx)(t.p,{children:"Create helpers for common authentication scenarios:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e-tests/helpers/auth.ts\nimport { Page, APIRequestContext } from '@playwright/test';\n\nexport async function loginViaApi(request: APIRequestContext, page: Page) {\n  const response = await request.post('/api/auth/login', {\n    data: {\n      email: 'test@example.com',\n      password: 'password123'\n    }\n  });\n  \n  // Store authentication state\n  await page.context().storageState({ path: './e2e-tests/fixtures/auth-state.json' });\n  \n  return response;\n}\n\n// Use in tests\n// e2e-tests/specs/protected-page.spec.ts\nimport { test } from '@playwright/test';\nimport { loginViaApi } from '../helpers/auth';\n\ntest.beforeEach(async ({ page, request }) => {\n  await loginViaApi(request, page);\n});\n\ntest('authenticated user can access protected page', async ({ page }) => {\n  await page.goto('/dashboard');\n  // Test protected content\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Use data-testid attributes"}),": Add ",(0,i.jsx)(t.code,{children:"data-testid"})," attributes to elements for stable selectors"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Isolate tests"}),": Make tests independent of each other"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Clean up after tests"}),": Reset state between tests, especially database state"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Use API for setup"}),": Set up test data via API calls rather than UI interactions when possible"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Run in CI"}),": Include Playwright tests in your CI workflow"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Wait for right events"}),": Use proper waiting mechanisms instead of arbitrary delays"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Use the Page Object Model"}),": Encapsulate page interactions in page objects"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Take screenshots for debugging"}),": Use screenshots to debug test failures"]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);