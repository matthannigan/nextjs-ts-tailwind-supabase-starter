"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[1385],{8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},8568:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"developer-guide/tools/prettier","title":"Prettier Configuration and Usage","description":"Prettier is an opinionated code formatter that enforces a consistent code style across your entire codebase. This document covers how Prettier is configured and used in this project.","source":"@site/docs/developer-guide/tools/prettier.md","sourceDirName":"developer-guide/tools","slug":"/developer-guide/tools/prettier","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/developer-guide/tools/prettier.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Prettier"},"sidebar":"start","previous":{"title":"Development Tools","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/"},"next":{"title":"Jest","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest"}}');var r=i(4848),s=i(8453);const o={sidebar_position:2,sidebar_label:"Prettier"},l="Prettier Configuration and Usage",d={},a=[{value:"Overview",id:"overview",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Default Commands",id:"default-commands",level:2},{value:"Integration with Git Hooks",id:"integration-with-git-hooks",level:2},{value:"Editor Integration",id:"editor-integration",level:2},{value:"VS Code",id:"vs-code",level:3},{value:"Ignoring Files",id:"ignoring-files",level:2},{value:"Customizing Formatting Rules",id:"customizing-formatting-rules",level:2},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"prettier-configuration-and-usage",children:"Prettier Configuration and Usage"})}),"\n",(0,r.jsx)(n.p,{children:"Prettier is an opinionated code formatter that enforces a consistent code style across your entire codebase. This document covers how Prettier is configured and used in this project."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Version"}),": 3.x"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration"}),": Works alongside ESLint with ",(0,r.jsx)(n.code,{children:"eslint-config-prettier"})," to avoid conflicts"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["The project potentially uses a ",(0,r.jsx)(n.code,{children:".prettierrc.json"})," file for configuration. If not yet created, you can create one with the following default configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "semi": true,\n  "singleQuote": true,\n  "tabWidth": 2,\n  "printWidth": 80,\n  "trailingComma": "es5",\n  "arrowParens": "avoid",\n  "endOfLine": "lf"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"To customize the Prettier configuration, modify this file or create it if it doesn't exist."}),"\n",(0,r.jsx)(n.h2,{id:"default-commands",children:"Default Commands"}),"\n",(0,r.jsx)(n.p,{children:"The following npm scripts are available for formatting:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Format all files"}),": Formats all files in the project"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run format\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Check formatting"}),": Checks if files are formatted correctly without modifying them"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run format:check\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-git-hooks",children:"Integration with Git Hooks"}),"\n",(0,r.jsx)(n.p,{children:"Prettier is integrated with Git hooks through Husky and lint-staged. When you commit changes, Prettier will automatically format the staged files."}),"\n",(0,r.jsxs)(n.p,{children:["The configuration in ",(0,r.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"lint-staged": {\n  "*.{js,jsx,ts,tsx,mjs}": [\n    "eslint --fix",\n    "prettier --write"\n  ],\n  "*.{json,css}": [\n    "prettier --write"\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"editor-integration",children:"Editor Integration"}),"\n",(0,r.jsx)(n.p,{children:"For the best development experience, integrate Prettier with your code editor:"}),"\n",(0,r.jsx)(n.h3,{id:"vs-code",children:"VS Code"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Install the Prettier extension"}),"\n",(0,r.jsx)(n.li,{children:"Add the following configuration to your VS Code settings:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "editor.defaultFormatter": "esbenp.prettier-vscode",\n  "editor.formatOnSave": true,\n  "prettier.requireConfig": true\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"ignoring-files",children:"Ignoring Files"}),"\n",(0,r.jsxs)(n.p,{children:["To exclude files from formatting, create a ",(0,r.jsx)(n.code,{children:".prettierignore"})," file in the project root. Example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"node_modules\n.next\nbuild\ndist\nout\ncoverage\npublic\n"})}),"\n",(0,r.jsx)(n.h2,{id:"customizing-formatting-rules",children:"Customizing Formatting Rules"}),"\n",(0,r.jsx)(n.p,{children:"While Prettier is opinionated by design, you can customize certain aspects:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Line Width"}),": Adjust ",(0,r.jsx)(n.code,{children:"printWidth"})," for longer or shorter lines"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quotes"}),": Toggle ",(0,r.jsx)(n.code,{children:"singleQuote"})," to use double quotes instead"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Semicolons"}),": Set ",(0,r.jsx)(n.code,{children:"semi"})," to false to remove semicolons"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trailing Commas"}),": Configure ",(0,r.jsx)(n.code,{children:"trailingComma"})," to your preference"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Run format checks in CI"}),": Include ",(0,r.jsx)(n.code,{children:"npm run format:check"})," in your CI workflow"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Format on save"}),": Configure your editor to format on save"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistent configuration"}),": Ensure all team members use the same Prettier configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Avoid over-customization"}),": The power of Prettier is in its consistency with minimal configuration"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);