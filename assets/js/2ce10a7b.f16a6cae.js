"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3434],{5553:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"developer-guide/prompts/documentation-prompts","title":"Documentation Prompts","description":"Components","source":"@site/docs/developer-guide/prompts/documentation-prompts.md","sourceDirName":"developer-guide/prompts","slug":"/developer-guide/prompts/documentation-prompts","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/documentation-prompts","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/developer-guide/prompts/documentation-prompts.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Documentation"},"sidebar":"start","previous":{"title":"Setup","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/setup-prompts"},"next":{"title":"Testing","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing"}}');var s=n(4848),i=n(8453);const a={sidebar_position:2,sidebar_label:"Documentation"},r="Documentation Prompts",c={},p=[{value:"Components",id:"components",level:2},{value:"Compound Components",id:"compound-components",level:2},{value:"Tools",id:"tools",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"documentation-prompts",children:"Documentation Prompts"})}),"\n",(0,s.jsx)(t.h2,{id:"components",children:"Components"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"# Documentation Creation Task for `[Component Name]`\n\n## Background\nI need to create comprehensive documentation for the `[ComponentName]` component that follows our project's standardized format. This component was integrated from shadcn/ui into our Next.js TypeScript TailwindCSS Supabase starter project.\n\n## Component Research\n1. First, use the fetch MCP server to the fetch the official Shadcn UI [Component Name] documentation from `https://ui.shadcn.com/docs/components/[component-name]` and then conduct a targeted web search to understand:\n   - The component's purpose and core functionality\n   - Available props and their default values\n   - Variants and styling options\n   - Accessibility considerations\n   - Known limitations\n\n2. Then, examine our project's implementation:\n   - Use the filesystem MCP server to look at our source code at `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/src/components/[path]/[component-name].tsx`\n   - Note any customizations we've made to the original shadcn component\n   - Identify any project-specific usage patterns\n   - Check existing imports in other components to see real usage examples\n\n## Documentation Creation\n1. Use the filesystem MCP server to copy our template at `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/docs-website/docs/developer-guide/templates/component-template.md` as your base structure.\n\n2. Complete each section of the template with specific information:\n   - Write a clear, concise component description (1-2 sentences)\n   - Include correct import statements using our project's path conventions\n   - Show basic usage examples with minimal props\n   - Demonstrate all major variants and prop combinations\n   - Create a complete props table with accurate types, defaults, and descriptions\n   - Include TypeScript type definitions that match our implementation\n   - Show realistic customization examples using TailwindCSS classes\n   - Provide integration examples with other components in our library\n   - Document responsive behavior across device sizes\n   - Detail any accessibility features or considerations\n\n3. Add react-hook-form integration examples where applicable, as our project uses this library.\n\n4. Include any shadcn/ui installation commands if the component requires additional dependencies.\n\n## Special Considerations\n- Focus on our project's specific implementation, not just generic shadcn/ui usage\n- Include common pitfalls specific to our tech stack (Next.js + TypeScript + TailwindCSS)\n- Reference related components from our library when appropriate\n- Add testing examples using our project's testing setup (React Testing Library)\n- Use consistent code formatting matching our project style\n\n## Deliverable\nA comprehensive markdown document that follows our template structure and provides detailed, accurate guidance for developers in our specific project context.\n"})}),"\n",(0,s.jsx)(t.h2,{id:"compound-components",children:"Compound Components"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"# Documentation Creation Task for `Search Input`\n\n## Background\nI need to create comprehensive documentation for the `SearchInput` component that follows our project's standardized format. This compound component was created from the shadcn/ui `Input` and `Button` components for our Next.js TypeScript TailwindCSS Supabase starter project.\n\n## Component Research\n1. First, examine our project's implementation:\n   - Use the filesystem MCP server to look at our source code at `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/src/components/[path]/search-input.tsx`\n   - Note any customizations we've made to the original shadcn component\n   - Identify any project-specific usage patterns\n   - Check existing imports in other components to see real usage examples\n\n2. Then, then conduct a targeted web search to understand:\n   - The component's purpose and core functionality\n   - Available props and their default values\n   - Variants and styling options\n   - Accessibility considerations\n   - Known limitations\n\n## Documentation Creation\n1. Use the filesystem MCP server to copy our template at `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/docs-website/docs/developer-guide/templates/component-template.md` as your base structure.\n\n2. Complete each section of the template with specific information:\n   - Write a clear, concise component description (1-2 sentences)\n   - Include correct import statements using our project's path conventions\n   - Show basic usage examples with minimal props\n   - Demonstrate all major variants and prop combinations\n   - Create a complete props table with accurate types, defaults, and descriptions\n   - Include TypeScript type definitions that match our implementation\n   - Show realistic customization examples using TailwindCSS classes\n   - Provide integration examples with other components in our library\n   - Document responsive behavior across device sizes\n   - Detail any accessibility features or considerations\n\n3. Add react-hook-form integration examples where applicable, as our project uses this library.\n\n4. Include any shadcn/ui installation commands if the component requires additional dependencies.\n\n## Special Considerations\n- Focus on our project's specific implementation, not just generic shadcn/ui usage\n- Include common pitfalls specific to our tech stack (Next.js + TypeScript + TailwindCSS)\n- Reference related components from our library when appropriate\n- Add testing examples using our project's testing setup (React Testing Library)\n- Use consistent code formatting matching our project style\n\n## Deliverable\nA comprehensive markdown document that follows our template structure and provides detailed, accurate guidance for developers in our specific project context.\n"})}),"\n",(0,s.jsx)(t.h2,{id:"tools",children:"Tools"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"# Documentation Creation Task for [Tool Name]\n\n## Background\nI need to create comprehensive documentation for [Tool Name] that follows our project's standardized format.\n\n## Steps\n1. First, review the official documentation at [URL to README.md or official docs] to understand the tool's purpose, features, configuration options, and best practices.\n\n2. Examine our existing template at `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/docs-website/docs/developer-guide/templates/tool-template.md` to understand the required structure.\n\n3. Create a new markdown file called `[tool-name].md` in the `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/docs-website/docs/developer-guide/tools` directory that follows our template format.\n\n4. When filling in the template:\n   - Replace all placeholders in [brackets] with accurate, tool-specific information\n   - Include the current version we're using in our project (check package.json)\n   - Document all npm scripts related to this tool that exist in our package.json\n   - Provide clear, working code examples specifically tailored to our project structure\n   - Remove any sections that aren't relevant to this particular tool\n   - Add any tool-specific sections that aren't covered by the template but are important\n\n5. Pay special attention to:\n   - Integration with our existing tools and workflow\n   - Common issues our team might encounter and their solutions\n   - Best practices specific to our project's use of the tool\n\n## Deliverable\nA clear, comprehensive markdown file that would help a new developer understand how to use [Tool Name] effectively within our project.\n"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var o=n(6540);const s={},i=o.createContext(s);function a(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);