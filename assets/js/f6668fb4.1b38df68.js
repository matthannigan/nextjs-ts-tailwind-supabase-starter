"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9871],{6022:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"developer-guide/testing","title":"Testing","description":"This starter template includes a comprehensive testing setup using Jest 29.x, React Testing Library 14.x, and Playwright 1.40+ for end-to-end testing.","source":"@site/docs/developer-guide/testing.md","sourceDirName":"developer-guide","slug":"/developer-guide/testing","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/developer-guide/testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"start","previous":{"title":"Documentation","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/documentation-prompts"},"next":{"title":"Deployment","permalink":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment"}}');var i=n(4848),r=n(8453);const o={},a="Testing",l={},c=[{value:"Testing Structure",id:"testing-structure",level:2},{value:"Unit and Integration Testing with Jest",id:"unit-and-integration-testing-with-jest",level:2},{value:"Component Testing",id:"component-testing",level:3},{value:"Testing Hooks",id:"testing-hooks",level:3},{value:"Testing with Supabase",id:"testing-with-supabase",level:3},{value:"End-to-End Testing with Playwright",id:"end-to-end-testing-with-playwright",level:2},{value:"Testing Protected Routes",id:"testing-protected-routes",level:2},{value:"Mock Providers",id:"mock-providers",level:2},{value:"Running Tests",id:"running-tests",level:2},{value:"Test Coverage",id:"test-coverage",level:2},{value:"Testing Best Practices",id:"testing-best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"testing",children:"Testing"})}),"\n",(0,i.jsx)(t.p,{children:"This starter template includes a comprehensive testing setup using Jest 29.x, React Testing Library 14.x, and Playwright 1.40+ for end-to-end testing."}),"\n",(0,i.jsx)(t.h2,{id:"testing-structure",children:"Testing Structure"}),"\n",(0,i.jsx)(t.p,{children:"Tests are organized in the following structure:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"nextjs-ts-tailwind-supabase-starter/\n\u251c\u2500\u2500 __tests__/                   # Jest tests\n\u2502   \u251c\u2500\u2500 components/              # Component tests\n\u2502   \u251c\u2500\u2500 hooks/                   # Hook tests\n\u2502   \u251c\u2500\u2500 pages/                   # Page tests\n\u2502   \u2514\u2500\u2500 utils/                   # Utility function tests\n\u251c\u2500\u2500 e2e/                         # End-to-end tests with Playwright\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 utils/                   # Test utilities and mocks\n"})}),"\n",(0,i.jsx)(t.h2,{id:"unit-and-integration-testing-with-jest",children:"Unit and Integration Testing with Jest"}),"\n",(0,i.jsx)(t.p,{children:"Jest 29.x is configured for unit and integration testing of components, hooks, pages, and utility functions."}),"\n",(0,i.jsx)(t.h3,{id:"component-testing",children:"Component Testing"}),"\n",(0,i.jsx)(t.p,{children:"Components are tested using React Testing Library 14.x, which encourages testing components as users would interact with them:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"// __tests__/components/ui/Button.test.tsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Button } from '@/components/ui/Button';\n\ndescribe('Button', () => {\n  it('renders correctly', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument();\n  });\n\n  it('calls onClick handler when clicked', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    fireEvent.click(screen.getByRole('button', { name: /click me/i }));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('can be disabled', () => {\n    render(<Button disabled>Click me</Button>);\n    expect(screen.getByRole('button', { name: /click me/i })).toBeDisabled();\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"testing-hooks",children:"Testing Hooks"}),"\n",(0,i.jsxs)(t.p,{children:["Custom hooks are tested using ",(0,i.jsx)(t.code,{children:"@testing-library/react-hooks"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"// __tests__/hooks/useAuth.test.tsx\nimport { renderHook, act } from '@testing-library/react-hooks';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { AuthProvider } from '@/contexts/AuthContext';\n\n// Mock the Supabase client\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    auth: {\n      signUp: jest.fn(),\n      signInWithPassword: jest.fn(),\n      signOut: jest.fn(),\n      getSession: jest.fn(() => Promise.resolve({ data: { session: null } })),\n    },\n  },\n}));\n\ndescribe('useAuth', () => {\n  it('provides authentication methods', () => {\n    const wrapper = ({ children }) => <AuthProvider>{children}</AuthProvider>;\n    const { result } = renderHook(() => useAuth(), { wrapper });\n\n    expect(result.current.user).toBeNull();\n    expect(result.current.signUp).toBeDefined();\n    expect(result.current.signIn).toBeDefined();\n    expect(result.current.signOut).toBeDefined();\n  });\n\n  // More tests...\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"testing-with-supabase",children:"Testing with Supabase"}),"\n",(0,i.jsx)(t.p,{children:"To test components that interact with Supabase, the template provides mock implementations:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// tests/utils/supabaseMock.ts\nexport const createSupabaseMock = () => ({\n  auth: {\n    signUp: jest.fn(() => Promise.resolve({ data: { user: { id: 'mock-user-id' } }, error: null })),\n    signInWithPassword: jest.fn(() => Promise.resolve({ data: { session: { user: { id: 'mock-user-id' } } }, error: null })),\n    signOut: jest.fn(() => Promise.resolve({ error: null })),\n    getSession: jest.fn(() => Promise.resolve({ data: { session: null }, error: null })),\n    onAuthStateChange: jest.fn(() => ({\n      data: { subscription: { unsubscribe: jest.fn() } },\n    })),\n  },\n  from: jest.fn(() => ({\n    select: jest.fn(() => ({\n      eq: jest.fn(() => ({\n        single: jest.fn(() => Promise.resolve({ data: {}, error: null })),\n      })),\n    })),\n    insert: jest.fn(() => ({\n      select: jest.fn(() => Promise.resolve({ data: {}, error: null })),\n    })),\n    update: jest.fn(() => ({\n      eq: jest.fn(() => ({\n        select: jest.fn(() => Promise.resolve({ data: {}, error: null })),\n      })),\n    })),\n    delete: jest.fn(() => ({\n      eq: jest.fn(() => Promise.resolve({ data: {}, error: null })),\n    })),\n  })),\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"end-to-end-testing-with-playwright",children:"End-to-End Testing with Playwright"}),"\n",(0,i.jsx)(t.p,{children:"The starter template includes Playwright 1.40+ for end-to-end testing of user flows:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e/auth.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Authentication Flow', () => {\n  test('user can register', async ({ page }) => {\n    await page.goto('/register');\n    \n    // Fill out the registration form\n    await page.fill('input[name=\"email\"]', 'test@example.com');\n    await page.fill('input[name=\"password\"]', 'Password123!');\n    await page.fill('input[name=\"confirmPassword\"]', 'Password123!');\n    \n    // Submit the form\n    await page.click('button[type=\"submit\"]');\n    \n    // Verify redirect to dashboard or confirmation page\n    await expect(page).toHaveURL(/dashboard|confirm/);\n  });\n  \n  test('user can login', async ({ page }) => {\n    await page.goto('/login');\n    \n    // Fill out the login form\n    await page.fill('input[name=\"email\"]', 'test@example.com');\n    await page.fill('input[name=\"password\"]', 'Password123!');\n    \n    // Submit the form\n    await page.click('button[type=\"submit\"]');\n    \n    // Verify redirect to dashboard\n    await expect(page).toHaveURL(/dashboard/);\n  });\n  \n  test('user can logout', async ({ page }) => {\n    // First log in\n    await page.goto('/login');\n    await page.fill('input[name=\"email\"]', 'test@example.com');\n    await page.fill('input[name=\"password\"]', 'Password123!');\n    await page.click('button[type=\"submit\"]');\n    await expect(page).toHaveURL(/dashboard/);\n    \n    // Click logout button\n    await page.click('button:has-text(\"Logout\")');\n    \n    // Verify redirect to home page\n    await expect(page).toHaveURL(/\\//);\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"testing-protected-routes",children:"Testing Protected Routes"}),"\n",(0,i.jsx)(t.p,{children:"The template includes utilities for testing protected routes:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// __tests__/pages/dashboard.test.tsx\nimport { render, screen } from '@testing-library/react';\nimport { useRouter } from 'next/router';\nimport Dashboard from '@/app/dashboard/page';\nimport { useAuth } from '@/contexts/AuthContext';\n\n// Mock the auth hook\njest.mock('@/contexts/AuthContext', () => ({\n  useAuth: jest.fn(),\n}));\n\n// Mock the router\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(),\n}));\n\ndescribe('Dashboard Page', () => {\n  it('redirects to login when not authenticated', () => {\n    const mockPush = jest.fn();\n    (useRouter as jest.Mock).mockReturnValue({\n      push: mockPush,\n    });\n    \n    (useAuth as jest.Mock).mockReturnValue({\n      user: null,\n      isLoading: false,\n    });\n    \n    render(<Dashboard />);\n    expect(mockPush).toHaveBeenCalledWith('/login?redirectedFrom=/dashboard');\n  });\n  \n  it('displays dashboard content when authenticated', () => {\n    (useAuth as jest.Mock).mockReturnValue({\n      user: { id: 'mock-user-id', email: 'test@example.com' },\n      isLoading: false,\n    });\n    \n    render(<Dashboard />);\n    expect(screen.getByText(/welcome to your dashboard/i)).toBeInTheDocument();\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"mock-providers",children:"Mock Providers"}),"\n",(0,i.jsx)(t.p,{children:"The template includes mock providers for testing components that depend on context:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// tests/utils/providers.tsx\nimport { ReactNode } from 'react';\nimport { AuthContext } from '@/contexts/AuthContext';\n\ninterface MockAuthProviderProps {\n  user?: any;\n  isLoading?: boolean;\n  children: ReactNode;\n}\n\nexport const MockAuthProvider = ({ \n  user = null, \n  isLoading = false, \n  children \n}: MockAuthProviderProps) => {\n  const mockAuthValue = {\n    user,\n    isLoading,\n    session: user ? { user } : null,\n    signUp: jest.fn(),\n    signIn: jest.fn(),\n    signInAnonymously: jest.fn(),\n    signOut: jest.fn(),\n    updateProfile: jest.fn(),\n  };\n  \n  return (\n    <AuthContext.Provider value={mockAuthValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Usage in tests\n// render(\n//   <MockAuthProvider user={{ id: 'test-id', email: 'test@example.com' }}>\n//     <ComponentToTest />\n//   </MockAuthProvider>\n// );\n"})}),"\n",(0,i.jsx)(t.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(t.p,{children:"The starter template includes scripts to run different types of tests:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'// package.json (excerpt)\n{\n  "scripts": {\n    "test": "jest",\n    "test:watch": "jest --watch",\n    "test:coverage": "jest --coverage",\n    "e2e": "playwright test",\n    "e2e:ui": "playwright test --ui"\n  }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"test-coverage",children:"Test Coverage"}),"\n",(0,i.jsx)(t.p,{children:"Jest is configured to generate code coverage reports. Aim for at least 80% coverage for production code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm run test:coverage\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This generates a detailed coverage report in the ",(0,i.jsx)(t.code,{children:"coverage"})," directory."]}),"\n",(0,i.jsx)(t.h2,{id:"testing-best-practices",children:"Testing Best Practices"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Test Behavior, Not Implementation"})," - Focus on what the component does, not how it does it."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Mock External Dependencies"})," - Use the provided mock utilities for Supabase and other external services."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Test Edge Cases"})," - Include tests for error handling, loading states, and edge cases."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Group Tests Logically"})," - Use ",(0,i.jsx)(t.code,{children:"describe"})," to group related tests."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Keep Tests Independent"})," - Each test should be able to run on its own."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Use Data-Test Attributes"})," - Use ",(0,i.jsx)(t.code,{children:"data-testid"})," for stable test selectors."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Read the ",(0,i.jsx)(t.a,{href:"./deployment",children:"Deployment"})," guide to learn how to deploy the application"]}),"\n",(0,i.jsxs)(t.li,{children:["Check the ",(0,i.jsx)(t.a,{href:"./contributing",children:"Contributing"})," documentation for guidelines on contributing to the project"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);