"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3405],{5067:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"components/forms/textarea","title":"Textarea Component","description":"A customizable textarea input field for multiline text entry with full support for form integration. The component extends the native HTML textarea with consistent styling that matches the design system.","source":"@site/docs/components/forms/textarea.md","sourceDirName":"components/forms","slug":"/components/forms/textarea","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea","draft":false,"unlisted":false,"editUrl":"https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter/tree/main/docs-website/docs/components/forms/textarea.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Textarea"},"sidebar":"components","previous":{"title":"Switch","permalink":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch"},"next":{"title":"Typography","permalink":"/nextjs-ts-tailwind-supabase-starter/components/style/typography"}}');var r=t(4848),i=t(8453);const a={sidebar_label:"Textarea"},l="Textarea Component",o={},d=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Disabled State",id:"disabled-state",level:3},{value:"With Label",id:"with-label",level:3},{value:"With Helper Text",id:"with-helper-text",level:3},{value:"With Button",id:"with-button",level:3},{value:"Props",id:"props",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Customization",id:"customization",level:2},{value:"Style Overrides",id:"style-overrides",level:3},{value:"Extending the Component",id:"extending-the-component",level:3},{value:"Examples",id:"examples",level:2},{value:"Integration with React Hook Form",id:"integration-with-react-hook-form",level:3},{value:"Integration with Other Components",id:"integration-with-other-components",level:3},{value:"Responsive Behavior",id:"responsive-behavior",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"textarea-component",children:"Textarea Component"})}),"\n",(0,r.jsx)(n.p,{children:"A customizable textarea input field for multiline text entry with full support for form integration. The component extends the native HTML textarea with consistent styling that matches the design system."}),"\n",(0,r.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Textarea } from '@/components/ui/textarea';\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Textarea placeholder="Type your message here." />\n'})}),"\n",(0,r.jsx)(n.h3,{id:"disabled-state",children:"Disabled State"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Textarea\n  disabled\n  placeholder="This textarea is disabled"\n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"with-label",children:"With Label"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Label } from \'@/components/ui/label\';\n\n<div className="grid w-full gap-1.5">\n  <Label htmlFor="message">Your message</Label>\n  <Textarea placeholder="Type your message here." id="message" />\n</div>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"with-helper-text",children:"With Helper Text"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Label } from \'@/components/ui/label\';\n\n<div className="grid w-full gap-1.5">\n  <Label htmlFor="message">Your message</Label>\n  <Textarea placeholder="Type your message here." id="message" />\n  <p className="text-sm text-muted-foreground">\n    Your message will be copied to the support team.\n  </p>\n</div>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"with-button",children:"With Button"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Button } from \'@/components/ui/button\';\n\n<div className="grid w-full gap-2">\n  <Textarea placeholder="Type your message here." />\n  <Button>Send message</Button>\n</div>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Prop"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"className"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),(0,r.jsx)(n.td,{children:"Additional CSS classes to apply to the textarea"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"placeholder"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),(0,r.jsx)(n.td,{children:"Placeholder text displayed when textarea is empty"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"disabled"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})}),(0,r.jsx)(n.td,{children:"When true, prevents the user from interacting with the textarea"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rows"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),(0,r.jsx)(n.td,{children:"Specifies the visible number of lines"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"value"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),(0,r.jsx)(n.td,{children:"The value of the textarea"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"defaultValue"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),(0,r.jsx)(n.td,{children:"The default value of the textarea"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"onChange"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"function"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),(0,r.jsx)(n.td,{children:"Function called when the value changes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"name"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),(0,r.jsx)(n.td,{children:"The name attribute for the textarea"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),(0,r.jsx)(n.td,{children:"The id attribute for the textarea"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"required"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})}),(0,r.jsx)(n.td,{children:"Specifies that the textarea field must be filled out"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"readOnly"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})}),(0,r.jsx)(n.td,{children:"When true, makes the textarea not editable"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"All standard HTML textarea attributes are also supported."}),"\n",(0,r.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Textarea } from '@/components/ui/textarea';\n\n// The Textarea component is typed using React.ComponentProps<'textarea'>\n// which includes all standard HTML textarea attributes\n"})}),"\n",(0,r.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,r.jsx)(n.h3,{id:"style-overrides",children:"Style Overrides"}),"\n",(0,r.jsx)(n.p,{children:"The component can be customized using the following approaches:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Using the ",(0,r.jsx)(n.code,{children:"className"})," prop to add additional Tailwind classes"]}),"\n",(0,r.jsx)(n.li,{children:"Modifying the base styles in the component implementation"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The default styles for the Textarea component include:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Textarea } from '@/components/ui/textarea';\nimport { cn } from '@/lib/utils';\n\nexport function AutoResizeTextarea({ className, ...props }) {\n  const textareaRef = React.useRef<HTMLTextAreaElement>(null);\n  \n  React.useEffect(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      const adjustHeight = () => {\n        textarea.style.height = 'auto';\n        textarea.style.height = `${textarea.scrollHeight}px`;\n      };\n      \n      textarea.addEventListener('input', adjustHeight);\n      adjustHeight(); // Initial adjustment\n      \n      return () => textarea.removeEventListener('input', adjustHeight);\n    }\n  }, []);\n  \n  return (\n    <Textarea \n      ref={textareaRef}\n      {...props} \n      className={cn('overflow-hidden', className)}\n    />\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"integration-with-react-hook-form",children:"Integration with React Hook Form"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\n\nconst formSchema = z.object({\n  message: z.string().min(10, {\n    message: 'Message must be at least 10 characters.',\n  }),\n});\n\nexport function MessageForm() {\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      message: '',\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    console.log(values);\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"message\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Message</FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"Type your message here...\" {...field} />\n              </FormControl>\n              <FormDescription>\n                Please provide a detailed message.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Card, CardContent, CardFooter, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Label } from \'@/components/ui/label\';\nimport { Button } from \'@/components/ui/button\';\nimport { Textarea } from \'@/components/ui/textarea\';\n\nexport function FeedbackCard() {\n  return (\n    <Card className="w-full max-w-md">\n      <CardHeader>\n        <CardTitle>Provide Feedback</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className="grid w-full gap-4">\n          <div className="grid grid-cols-4 items-center gap-4">\n            <Label htmlFor="feedback" className="text-right">\n              Feedback\n            </Label>\n            <Textarea\n              id="feedback"\n              placeholder="Tell us what you think..."\n              className="col-span-3"\n            />\n          </div>\n        </div>\n      </CardContent>\n      <CardFooter className="flex justify-end">\n        <Button>Submit</Button>\n      </CardFooter>\n    </Card>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"responsive-behavior",children:"Responsive Behavior"}),"\n",(0,r.jsx)(n.p,{children:"The component responds to different screen sizes in the following ways:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mobile"}),": Uses text-base font size with standard padding for touch targets"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tablet/Desktop"}),": Uses text-sm font size (applied with the md: breakpoint) while maintaining the same padding and layout"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"All Devices"}),": Maintains full width and consistent padding to ensure usability across devices"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,r.jsx)(n.p,{children:"The component follows these accessibility best practices:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Supports proper labeling when used with the ",(0,r.jsx)(n.code,{children:"Label"})," component"]}),"\n",(0,r.jsx)(n.li,{children:"Maintains proper contrast ratios for text and borders"}),"\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"disabled"})," attribute for disabled state which is correctly announced by screen readers"]}),"\n",(0,r.jsx)(n.li,{children:"Provides visual focus styles for keyboard navigation"}),"\n",(0,r.jsx)(n.li,{children:"Supports aria attributes through spread props"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,r.jsx)(n.p,{children:"The component:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses React's ",(0,r.jsx)(n.code,{children:"forwardRef"})," to properly forward refs to the underlying textarea element"]}),"\n",(0,r.jsxs)(n.li,{children:["Leverages the ",(0,r.jsx)(n.code,{children:"cn"})," utility for className merging with Tailwind"]}),"\n",(0,r.jsx)(n.li,{children:"Extends the native HTML textarea attributes through React.ComponentProps"}),"\n",(0,r.jsx)(n.li,{children:"Provides a responsive design with different text sizes for mobile and desktop"}),"\n",(0,r.jsx)(n.li,{children:"Applies consistent focus styles that match other form components in the library"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Missing Labels"}),": Always associate a ",(0,r.jsx)(n.code,{children:"Label"})," component with your Textarea for accessibility"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fixed Height Issues"}),": The default minimum height might cause layout issues in some contexts; use the ",(0,r.jsx)(n.code,{children:"className"})," prop to override if needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Form Integration"}),": When using with React Hook Form, ensure you spread the entire ",(0,r.jsx)(n.code,{children:"field"})," object to properly connect validation and state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Overflowing Content"}),": For very large text inputs, consider using ",(0,r.jsx)(n.code,{children:"overflow-auto"})," or implementing the AutoResizeTextarea example"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// Example test for the Textarea component\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Textarea } from '@/components/ui/textarea';\n\ndescribe('Textarea', () => {\n  it('renders correctly', () => {\n    render(<Textarea placeholder=\"Test placeholder\" />);\n    expect(screen.getByPlaceholderText('Test placeholder')).toBeInTheDocument();\n  });\n  \n  it('handles user input', async () => {\n    const user = userEvent.setup();\n    const handleChange = jest.fn();\n    \n    render(<Textarea onChange={handleChange} />);\n    const textarea = screen.getByRole('textbox');\n    \n    await user.type(textarea, 'Hello, world!');\n    expect(handleChange).toHaveBeenCalled();\n    expect(textarea).toHaveValue('Hello, world!');\n  });\n\n  it('respects disabled state', async () => {\n    const user = userEvent.setup();\n    const handleChange = jest.fn();\n    \n    render(<Textarea disabled onChange={handleChange} />);\n    const textarea = screen.getByRole('textbox');\n    \n    expect(textarea).toBeDisabled();\n    await user.type(textarea, 'Test');\n    expect(handleChange).not.toHaveBeenCalled();\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/input",children:"Input"}),": For single-line text input fields"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/form",children:"Form"}),": For creating cohesive forms with validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/nextjs-ts-tailwind-supabase-starter/components/forms/label",children:"Label"}),": For labeling form elements including textarea"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);