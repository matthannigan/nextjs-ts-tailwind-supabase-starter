{"searchDocs":[{"title":"Discovered Docusaurus","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/blog/2025/03/25/discovered-docusaurus","content":"Was having too many problems deploying to Github Pages with plain Jekyll because React component code examples were trying to be processed by Liquid. Searched and found Docusaurus as a more contemporary alternative. Converted old /docs folder in repo to subfolder of new docs-website.","keywords":"","version":null},{"title":"Unit Testing","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/blog/2025/03/26/unit-testing","content":"Asked Gemini Deep Resarch to create report Help me understand React unit testing. What is its role in test-driven development? How has its approach and tools changed over the years for React developers? How do I construct good React component tests? How can I make sure when debugging tests that I’m not “teaching to the test”—making edits to the test simply based on knowledge of the component code? How does unit testing fit into other good practices like linting and automated end-to-end testing. What are some good resources if I want to further develop my knowledge in this area? ","keywords":"","version":null},{"title":"Form Components","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/","content":"","keywords":"","version":"Next"},{"title":"Components in this section​","type":1,"pageTitle":"Form Components","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/#components-in-this-section","content":" Form - A comprehensive form component that uses React Hook FormInput - Text input componentCheckbox - Checkbox componentLabel - Form label componentRadio Group - Radio button group componentSelect - Dropdown select componentSwitch - Toggle switch componentTextarea - Multi-line text input component ","version":"Next","tagName":"h2"},{"title":"Label Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#import","content":" import { Label } from '@/components/ui/label';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#basic-usage","content":" &lt;Label htmlFor=&quot;email&quot;&gt;Email address&lt;/Label&gt; &lt;Input id=&quot;email&quot; type=&quot;email&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"With Form Controls​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#with-form-controls","content":" &lt;div className=&quot;grid w-full max-w-sm items-center gap-1.5&quot;&gt; &lt;Label htmlFor=&quot;username&quot;&gt;Username&lt;/Label&gt; &lt;Input id=&quot;username&quot; placeholder=&quot;Enter your username&quot; /&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"With Required Fields​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#with-required-fields","content":" &lt;Label htmlFor=&quot;password&quot; className=&quot;flex items-center gap-1&quot;&gt; Password &lt;span className=&quot;text-destructive&quot;&gt;*&lt;/span&gt; &lt;/Label&gt; &lt;Input id=&quot;password&quot; type=&quot;password&quot; required /&gt;   ","version":"Next","tagName":"h3"},{"title":"Disabled State​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#disabled-state","content":" &lt;Label htmlFor=&quot;disabled-input&quot; className=&quot;cursor-not-allowed opacity-70&quot;&gt; Disabled Field &lt;/Label&gt; &lt;Input id=&quot;disabled-input&quot; disabled /&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#props","content":" Prop\tType\tDefault\tDescriptionhtmlFor\tstring\t-\tThe ID of the form element the label is associated with className\tstring\t-\tAdditional CSS classes to apply children\tReactNode\t-\tContent to display inside the label ...props\tReact.ComponentPropsWithoutRef&lt;typeof LabelPrimitive.Root&gt;\t-\tAll other props are passed to the underlying Radix UI Label component  ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#typescript","content":" import * as React from &quot;react&quot; import * as LabelPrimitive from &quot;@radix-ui/react-label&quot; import { cva, type VariantProps } from &quot;class-variance-authority&quot; const labelVariants = cva( &quot;text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70&quot; ) const Label = React.forwardRef&lt; React.ElementRef&lt;typeof LabelPrimitive.Root&gt;, React.ComponentPropsWithoutRef&lt;typeof LabelPrimitive.Root&gt; &amp; VariantProps&lt;typeof labelVariants&gt; &gt;(({ className, ...props }, ref) =&gt; ( &lt;LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} /&gt; )) Label.displayName = LabelPrimitive.Root.displayName   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#style-overrides","content":" The Label component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes:  &lt;Label htmlFor=&quot;custom&quot; className=&quot;text-primary text-base font-bold&quot;&gt; Custom Label &lt;/Label&gt;   Using peer modifiers for connected form elements:  &lt;div className=&quot;grid gap-1.5&quot;&gt; &lt;Label htmlFor=&quot;input-with-error&quot; className=&quot;peer-invalid:text-destructive&quot; // Applies when the peer (input) is invalid &gt; Full Name &lt;/Label&gt; &lt;Input id=&quot;input-with-error&quot; required /&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#extending-the-component","content":" import { Label } from '@/components/ui/label'; export function RequiredFieldLabel({ children, ...props }) { return ( &lt;Label {...props} className={`flex items-center gap-1 ${props.className || ''}`} &gt; {children} &lt;span className=&quot;text-destructive text-sm&quot;&gt;*&lt;/span&gt; &lt;/Label&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#integration-with-forms","content":" import { useForm } from 'react-hook-form'; import { z } from 'zod'; import { zodResolver } from '@hookform/resolvers/zod'; import { Button } from '@/components/ui/button'; import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form'; import { Input } from '@/components/ui/input'; const formSchema = z.object({ email: z.string().email(), }); export function SubscribeForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { email: '', }, }); function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { console.log(values); } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-6&quot;&gt; &lt;FormField control={form.control} name=&quot;email&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Email Address&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;example@email.com&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Subscribe&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with react-hook-form using Regular Label​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#integration-with-react-hook-form-using-regular-label","content":" If you prefer using the Label component directly with react-hook-form:  import { useForm } from 'react-hook-form'; import { Label } from '@/components/ui/label'; import { Input } from '@/components/ui/input'; import { Button } from '@/components/ui/button'; export function SimpleForm() { const { register, handleSubmit, formState: { errors } } = useForm(); const onSubmit = (data) =&gt; { console.log(data); }; return ( &lt;form onSubmit={handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt; &lt;div className=&quot;space-y-2&quot;&gt; &lt;Label htmlFor=&quot;name&quot; className={errors.name ? &quot;text-destructive&quot; : &quot;&quot;} &gt; Name &lt;/Label&gt; &lt;Input id=&quot;name&quot; {...register(&quot;name&quot;, { required: &quot;Name is required&quot; })} /&gt; {errors.name &amp;&amp; ( &lt;p className=&quot;text-sm text-destructive&quot;&gt; {errors.name.message} &lt;/p&gt; )} &lt;/div&gt; &lt;Button type=&quot;submit&quot;&gt;Submit&lt;/Button&gt; &lt;/form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#integration-with-other-components","content":" import { Label } from '@/components/ui/label'; import { Checkbox } from '@/components/ui/checkbox'; import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'; import { Switch } from '@/components/ui/switch'; export function FormControls() { return ( &lt;div className=&quot;space-y-6&quot;&gt; {/* With Checkbox */} &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;Checkbox id=&quot;terms&quot; /&gt; &lt;Label htmlFor=&quot;terms&quot;&gt;Accept terms and conditions&lt;/Label&gt; &lt;/div&gt; {/* With RadioGroup */} &lt;RadioGroup defaultValue=&quot;option-one&quot;&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-one&quot; id=&quot;option-one&quot; /&gt; &lt;Label htmlFor=&quot;option-one&quot;&gt;Option One&lt;/Label&gt; &lt;/div&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-two&quot; id=&quot;option-two&quot; /&gt; &lt;Label htmlFor=&quot;option-two&quot;&gt;Option Two&lt;/Label&gt; &lt;/div&gt; &lt;/RadioGroup&gt; {/* With Switch */} &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;Switch id=&quot;airplane-mode&quot; /&gt; &lt;Label htmlFor=&quot;airplane-mode&quot;&gt;Airplane Mode&lt;/Label&gt; &lt;/div&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#responsive-behavior","content":" The Label component is designed to work responsively with different form controls:  &lt;div className=&quot;grid gap-2 sm:gap-4&quot;&gt; &lt;Label htmlFor=&quot;responsive-input&quot; className=&quot;text-xs sm:text-sm md:text-base&quot; &gt; Responsive Label &lt;/Label&gt; &lt;Input id=&quot;responsive-input&quot; className=&quot;h-8 sm:h-10 md:h-12&quot; /&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#accessibility","content":" The Label component follows these accessibility best practices:  Uses the native HTML &lt;label&gt; element through Radix UI's Label primitiveProperly associates labels with form controls using the htmlFor attributeMaintains proper styling for disabled statesSupports keyboard navigation through the associated form elementUses appropriate font size and weight for readabilityEnables screen readers to announce the label when the associated control receives focusThe peer-disabled class automatically styles the label when associated input is disabled  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#implementation-details","content":" The component:  Is built using Radix UI's Label primitive for proper accessibilityUses Class Variance Authority (CVA) for maintaining consistent stylingApplies appropriate text sizing and font weight for legibilityIncludes styling support for disabled states through the peer modifierForwards refs to the underlying Radix UI componentPreserves all native label attributes and event handlers  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#common-pitfalls","content":" Missing htmlFor attribute: Always include the htmlFor attribute that matches the id of the associated form controlInconsistent label-control pairing: Ensure that every interactive form element has an associated labelHidden labels: Avoid hiding labels, as this reduces accessibility. If space is a concern, use appropriate visually-hidden techniques that maintain screen reader accessUnclear labeling: Labels should be concise but descriptive of what information is requiredMissing required field indicators: Use visual indicators for required fields, but don't rely solely on color (use an asterisk or &quot;Required&quot; text)  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#testing","content":" // Example test for the Label component import { render, screen } from '@testing-library/react'; import { Label } from '@/components/ui/label'; import { Input } from '@/components/ui/input'; describe('Label', () =&gt; { it('renders correctly with the provided text', () =&gt; { render(&lt;Label htmlFor=&quot;test&quot;&gt;Test Label&lt;/Label&gt;); expect(screen.getByText('Test Label')).toBeInTheDocument(); }); it('associates with the correct form control', () =&gt; { render( &lt;&gt; &lt;Label htmlFor=&quot;test-input&quot;&gt;Email Address&lt;/Label&gt; &lt;Input id=&quot;test-input&quot; placeholder=&quot;Enter email&quot; /&gt; &lt;/&gt; ); const label = screen.getByText('Email Address'); expect(label).toHaveAttribute('for', 'test-input'); }); it('applies custom class names', () =&gt; { render( &lt;Label htmlFor=&quot;test&quot; className=&quot;custom-class&quot;&gt; Custom Label &lt;/Label&gt; ); const label = screen.getByText('Custom Label'); expect(label).toHaveClass('custom-class'); }); it('applies proper styling for disabled state', () =&gt; { render( &lt;div&gt; &lt;Label htmlFor=&quot;disabled-input&quot;&gt;Disabled Input&lt;/Label&gt; &lt;Input id=&quot;disabled-input&quot; disabled /&gt; &lt;/div&gt; ); // Note: Testing peer classes might require additional assertions based on your styling implementation const label = screen.getByText('Disabled Input'); expect(label).toBeInTheDocument(); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Label Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/label#related-components","content":" Input: Text input field that works with LabelCheckbox: Checkbox input that works with LabelRadioGroup: Radio inputs that work with LabelSelect: Select input that works with LabelForm: Form components that use Label internally with FormLabel ","version":"Next","tagName":"h2"},{"title":"Input Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#import","content":" import { Input } from '@/components/ui/input';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#basic-usage","content":" &lt;Input placeholder=&quot;Enter your name&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"With Labels and Form Elements​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#with-labels-and-form-elements","content":" &lt;div className=&quot;grid w-full max-w-sm gap-1.5&quot;&gt; &lt;label htmlFor=&quot;email&quot; className=&quot;text-sm font-medium&quot;&gt;Email&lt;/label&gt; &lt;Input type=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;Enter your email&quot; required /&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Different Input Types​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#different-input-types","content":" &lt;div className=&quot;flex flex-col gap-4&quot;&gt; &lt;Input type=&quot;text&quot; placeholder=&quot;Text input&quot; /&gt; &lt;Input type=&quot;email&quot; placeholder=&quot;Email input&quot; /&gt; &lt;Input type=&quot;password&quot; placeholder=&quot;Password input&quot; /&gt; &lt;Input type=&quot;number&quot; placeholder=&quot;Number input&quot; /&gt; &lt;Input type=&quot;tel&quot; placeholder=&quot;Telephone input&quot; /&gt; &lt;Input type=&quot;url&quot; placeholder=&quot;URL input&quot; /&gt; &lt;Input type=&quot;date&quot; /&gt; &lt;Input type=&quot;time&quot; /&gt; &lt;Input type=&quot;search&quot; placeholder=&quot;Search...&quot; /&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Disabled State​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#disabled-state","content":" &lt;Input disabled placeholder=&quot;This input is disabled&quot; value=&quot;Disabled content&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"With Default Value​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#with-default-value","content":" &lt;Input defaultValue=&quot;Default text value&quot; onChange={(e) =&gt; console.log(e.target.value)} /&gt;   ","version":"Next","tagName":"h3"},{"title":"File Input​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#file-input","content":" &lt;Input type=&quot;file&quot; accept=&quot;image/*&quot; onChange={(e) =&gt; console.log(e.target.files)} /&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#props","content":" Prop\tType\tDefault\tDescriptiontype\tstring\t'text'\tSpecifies the type of input field (text, email, password, etc.) className\tstring\tundefined\tAdditional CSS classes to apply to the input element disabled\tboolean\tfalse\tDisables the input when true required\tboolean\tfalse\tMakes the input field required when true placeholder\tstring\tundefined\tPlaceholder text to display when input is empty value\tstring\tundefined\tControlled value of the input element defaultValue\tstring\tundefined\tDefault value for an uncontrolled input onChange\tChangeEventHandler&lt;HTMLInputElement&gt;\tundefined\tFunction called when input value changes onFocus\tFocusEventHandler&lt;HTMLInputElement&gt;\tundefined\tFunction called when input receives focus onBlur\tFocusEventHandler&lt;HTMLInputElement&gt;\tundefined\tFunction called when input loses focus ...props\tReact.ComponentProps&lt;'input'&gt;\tundefined\tAll other props are passed to the underlying input element  ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#typescript","content":" import * as React from 'react'; // Component Type Definition type InputProps = React.ComponentProps&lt;'input'&gt;; // Usage with TypeScript const Input = React.forwardRef&lt;HTMLInputElement, InputProps&gt;( ({ className, type = 'text', ...props }, ref) =&gt; { return ( &lt;input type={type} className={/* className implementation */} ref={ref} {...props} /&gt; ); } );   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#style-overrides","content":" The Input component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes:  &lt;Input className=&quot;border-blue-500 focus-visible:ring-blue-500 px-4 py-3 text-lg&quot; placeholder=&quot;Custom styled input&quot; /&gt;   Using the global CSS to target the Input component:  /* In your global.css file */ input { font-family: 'Your Custom Font', sans-serif; }   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#extending-the-component","content":" import { Input } from '@/components/ui/input'; import { Search, X } from 'lucide-react'; import { useState } from 'react'; export function SearchInput({ onSearch, className, ...props }) { const [value, setValue] = useState(''); const handleClear = () =&gt; { setValue(''); if (props.onChange) { const event = { target: { value: '' } } as React.ChangeEvent&lt;HTMLInputElement&gt;; props.onChange(event); } if (onSearch) { onSearch(''); } }; const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; { setValue(e.target.value); if (props.onChange) { props.onChange(e); } }; const handleKeyDown = (e: React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; { if (e.key === 'Enter' &amp;&amp; onSearch) { onSearch(value); } if (props.onKeyDown) { props.onKeyDown(e); } }; return ( &lt;div className={`relative ${className || ''}`}&gt; &lt;Search className=&quot;absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground&quot; /&gt; &lt;Input {...props} type=&quot;search&quot; className=&quot;pl-8 pr-8&quot; value={value} onChange={handleChange} onKeyDown={handleKeyDown} /&gt; {value &amp;&amp; ( &lt;button type=&quot;button&quot; onClick={handleClear} className=&quot;absolute right-2.5 top-2.5 h-4 w-4 text-muted-foreground hover:text-foreground&quot; &gt; &lt;X className=&quot;h-4 w-4&quot; /&gt; &lt;span className=&quot;sr-only&quot;&gt;Clear&lt;/span&gt; &lt;/button&gt; )} &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#integration-with-forms","content":" import { zodResolver } from '@hookform/resolvers/zod'; import { useForm } from 'react-hook-form'; import * as z from 'zod'; import { Button } from '@/components/ui/button'; import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, } from '@/components/ui/form'; import { Input } from '@/components/ui/input'; const formSchema = z.object({ username: z.string().min(2, { message: &quot;Username must be at least 2 characters.&quot;, }), email: z.string().email({ message: &quot;Please enter a valid email address.&quot;, }), }); export function ProfileForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { username: &quot;&quot;, email: &quot;&quot;, }, }); function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { console.log(values); } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-6&quot;&gt; &lt;FormField control={form.control} name=&quot;username&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Username&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;Enter your username&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormDescription&gt; This is your public display name. &lt;/FormDescription&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;FormField control={form.control} name=&quot;email&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Email&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input type=&quot;email&quot; placeholder=&quot;Enter your email&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormDescription&gt; We'll never share your email with anyone else. &lt;/FormDescription&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Update Profile&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#integration-with-other-components","content":" import { Button } from '@/components/ui/button'; import { Input } from '@/components/ui/input'; import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'; import { useState } from 'react'; export function SubscriptionCard() { const [email, setEmail] = useState(''); const handleSubmit = (e: React.FormEvent) =&gt; { e.preventDefault(); // Handle subscription logic console.log(`Subscribing: ${email}`); setEmail(''); }; return ( &lt;Card className=&quot;w-full max-w-md&quot;&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Subscribe to our Newsletter&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;form onSubmit={handleSubmit}&gt; &lt;CardContent&gt; &lt;div className=&quot;grid gap-4&quot;&gt; &lt;div className=&quot;grid gap-2&quot;&gt; &lt;label htmlFor=&quot;email&quot; className=&quot;text-sm font-medium&quot;&gt; Email address &lt;/label&gt; &lt;Input id=&quot;email&quot; type=&quot;email&quot; placeholder=&quot;name@example.com&quot; value={email} onChange={(e) =&gt; setEmail(e.target.value)} required /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/CardContent&gt; &lt;CardFooter&gt; &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot;&gt;Subscribe&lt;/Button&gt; &lt;/CardFooter&gt; &lt;/form&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#responsive-behavior","content":" The Input component includes built-in responsive behavior through its Tailwind classes.  &lt;Input className=&quot;h-8 px-2 text-sm md:h-10 md:px-3 md:text-base lg:h-12 lg:px-4 lg:text-lg&quot; placeholder=&quot;Responsive input&quot; /&gt;   The responsive behavior includes:  Mobile: The component has a base text size and default heightTablet and Desktop: By default, the text size is adjusted to be smaller on larger screens (md:text-sm)Custom responsiveness: Additional responsive classes can be added as shown in the example above to modify padding, height, and font size at different breakpoints  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#accessibility","content":" The Input component follows these accessibility best practices:  Uses semantic HTML with the native &lt;input&gt; elementSupports all standard input attributes (required, disabled, aria-*, etc.)Includes proper focus states with visible focus rings that follow keyboard navigationPreserves browser-native validation for types like email, number, etc.Provides visible disabled states with reduced opacityWorks with form labels and can be linked with id and for attributesMaintains proper contrast ratios for text against backgroundsSupports screen readers with appropriate ARIA attributesIs fully keyboard navigable  For best accessibility, always use the Input component with proper labels:  &lt;div className=&quot;grid w-full gap-1.5&quot;&gt; &lt;label htmlFor=&quot;name&quot; className=&quot;text-sm font-medium&quot;&gt;Name&lt;/label&gt; &lt;Input id=&quot;name&quot; aria-describedby=&quot;name-description&quot; /&gt; &lt;p id=&quot;name-description&quot; className=&quot;text-xs text-muted-foreground&quot;&gt; Enter your full name as it appears on your ID. &lt;/p&gt; &lt;/div&gt;   ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#implementation-details","content":" The component:  Is built using a React.forwardRef to properly forward refs to the underlying input elementUses the cn utility function to merge default styles with custom className propsApplies consistent Tailwind CSS styles for various states (focus, disabled, file inputs)Accepts all native input attributes through prop spreadingHas proper display name for better debuggingUses responsive text sizing (smaller on larger screens) to maintain UI consistencyIncludes proper ring styling for focus statesProvides special styling for file input typesMaintains the same height across various input types for consistent forms  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#common-pitfalls","content":" Missing form labels: Always use proper &lt;label&gt; elements with inputs for accessibilityIncorrect type: Ensure you use the appropriate type (email, password, etc.) to leverage browser validationControlled vs. uncontrolled: Be consistent in using either value with onChange (controlled) or defaultValue (uncontrolled)Spread order: When extending the component, make sure to spread your custom props last to prevent overridesFile inputs: Be aware that file inputs have special styling and may need additional code for handling filesAutofill styling: Browser autofill styling may not match your theme - use vendor-specific CSS rules if neededMobile considerations: On mobile, ensure inputs are large enough for touch targets (at least 44×44px)Form validation: When using client-side validation like React Hook Form, make sure to display errors appropriately near inputs  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#testing","content":" // Example test for the Input component import { render, screen, fireEvent } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { Input } from '@/components/ui/input'; describe('Input', () =&gt; { it('renders correctly with placeholder', () =&gt; { render(&lt;Input placeholder=&quot;Enter text&quot; /&gt;); expect(screen.getByPlaceholderText('Enter text')).toBeInTheDocument(); }); it('accepts and updates value', async () =&gt; { const user = userEvent.setup(); const handleChange = jest.fn(); render(&lt;Input onChange={handleChange} /&gt;); const input = screen.getByRole('textbox'); await user.type(input, 'Hello World'); expect(input).toHaveValue('Hello World'); expect(handleChange).toHaveBeenCalledTimes(11); // Once per character }); it('renders as disabled when disabled prop is provided', () =&gt; { render(&lt;Input disabled placeholder=&quot;Disabled input&quot; /&gt;); expect(screen.getByPlaceholderText('Disabled input')).toBeDisabled(); }); it('applies custom className correctly', () =&gt; { render(&lt;Input className=&quot;test-class&quot; data-testid=&quot;custom-input&quot; /&gt;); const input = screen.getByTestId('custom-input'); expect(input).toHaveClass('test-class'); // Should also have default classes expect(input).toHaveClass('rounded-md'); }); it('forwards ref to the underlying input element', () =&gt; { const ref = jest.fn(); render(&lt;Input ref={ref} /&gt;); expect(ref).toHaveBeenCalled(); expect(ref.mock.calls[0][0]).toBeInstanceOf(HTMLInputElement); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Input Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/input#related-components","content":" Form: Container component for form elements including InputButton: Often used alongside Input for form submissionsSelect: For selecting from predefined options instead of free text inputTextarea: For multi-line text inputCheckbox: For boolean/multiple choice inputsSearchInput: Specialized input for search functionality ","version":"Next","tagName":"h2"},{"title":"Checkbox Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#import","content":" import { Checkbox } from '@/components/ui/checkbox';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#basic-usage","content":" &lt;Checkbox /&gt;   ","version":"Next","tagName":"h3"},{"title":"With Label​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#with-label","content":" import { Label } from &quot;@/components/ui/label&quot;; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;Checkbox id=&quot;terms&quot; /&gt; &lt;Label htmlFor=&quot;terms&quot;&gt;Accept terms and conditions&lt;/Label&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Checked State​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#checked-state","content":" // Controlled component import { useState } from &quot;react&quot;; function ControlledCheckbox() { const [checked, setChecked] = useState(false); return ( &lt;Checkbox checked={checked} onCheckedChange={setChecked} /&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Disabled State​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#disabled-state","content":" &lt;Checkbox disabled /&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;Checkbox id=&quot;disabled&quot; disabled /&gt; &lt;Label htmlFor=&quot;disabled&quot; className=&quot;text-muted-foreground&quot;&gt; Disabled option &lt;/Label&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#props","content":" Prop\tType\tDefault\tDescriptionchecked\tboolean | 'indeterminate'\tundefined\tThe controlled checked state of the checkbox defaultChecked\tboolean | 'indeterminate'\tundefined\tThe default checked state when uncontrolled onCheckedChange\t(checked: boolean | 'indeterminate') =&gt; void\tundefined\tEvent handler called when the checked state changes disabled\tboolean\tfalse\tWhen true, prevents user interaction and applies disabled styling required\tboolean\tfalse\tWhen true, indicates the input must have a value name\tstring\tundefined\tThe name of the checkbox for form submission value\tstring\tundefined\tThe value of the checkbox for form submission id\tstring\tundefined\tThe id of the checkbox, used with a label's htmlFor prop className\tstring\t''\tAdditional CSS classes to apply ...props\tReact.ComponentPropsWithoutRef&lt;typeof CheckboxPrimitive.Root&gt;\t-\tAll other props are passed to the underlying Radix UI Checkbox component  ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#typescript","content":" import * as React from &quot;react&quot; import * as CheckboxPrimitive from &quot;@radix-ui/react-checkbox&quot; // Component type is inherited from Radix UI's Checkbox type CheckboxProps = React.ComponentPropsWithoutRef&lt;typeof CheckboxPrimitive.Root&gt;; // Usage with TypeScript const Example: React.FC = () =&gt; { // Strong typing for checked state const [checked, setChecked] = React.useState&lt;boolean | 'indeterminate'&gt;(false); return ( &lt;Checkbox checked={checked} onCheckedChange={(state) =&gt; setChecked(state)} /&gt; ); };   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#style-overrides","content":" The Checkbox component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes:  &lt;Checkbox className=&quot;h-6 w-6 rounded-full border-green-500 data-[state=checked]:bg-green-500&quot; /&gt;   Creating a custom-styled checkbox:  &lt;Checkbox className={cn( &quot;border-primary-400 data-[state=checked]:bg-primary-600&quot;, &quot;h-5 w-5 rounded&quot;, &quot;focus-visible:ring-primary-500&quot; )} /&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#extending-the-component","content":" import { Checkbox } from '@/components/ui/checkbox'; import { Label } from '@/components/ui/label'; import { cn } from '@/lib/utils'; interface CustomCheckboxProps extends React.ComponentPropsWithoutRef&lt;typeof Checkbox&gt; { label: string; labelClassName?: string; } export function CustomCheckbox({ label, labelClassName, className, id, ...props }: CustomCheckboxProps) { const checkboxId = id || React.useId(); return ( &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;Checkbox id={checkboxId} className={className} {...props} /&gt; &lt;Label htmlFor={checkboxId} className={cn(&quot;text-sm font-medium&quot;, labelClassName)} &gt; {label} &lt;/Label&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#integration-with-forms","content":" import { useForm } from 'react-hook-form'; import { z } from 'zod'; import { zodResolver } from '@hookform/resolvers/zod'; import { Button } from '@/components/ui/button'; import { Form, FormField, FormItem, FormLabel, FormControl, FormDescription, FormMessage } from '@/components/ui/form'; import { Checkbox } from '@/components/ui/checkbox'; const formSchema = z.object({ marketing: z.boolean().default(false).optional(), terms: z.boolean().refine(value =&gt; value === true, { message: &quot;You must accept the terms and conditions&quot;, }), }); export function CheckboxForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { marketing: false, terms: false, }, }); function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { console.log(values); } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-6&quot;&gt; &lt;FormField control={form.control} name=&quot;marketing&quot; render={({ field }) =&gt; ( &lt;FormItem className=&quot;flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4&quot;&gt; &lt;FormControl&gt; &lt;Checkbox checked={field.value} onCheckedChange={field.onChange} /&gt; &lt;/FormControl&gt; &lt;div className=&quot;space-y-1 leading-none&quot;&gt; &lt;FormLabel&gt; Marketing emails &lt;/FormLabel&gt; &lt;FormDescription&gt; Receive emails about our products and updates. &lt;/FormDescription&gt; &lt;/div&gt; &lt;/FormItem&gt; )} /&gt; &lt;FormField control={form.control} name=&quot;terms&quot; render={({ field }) =&gt; ( &lt;FormItem className=&quot;flex flex-row items-start space-x-3 space-y-0&quot;&gt; &lt;FormControl&gt; &lt;Checkbox checked={field.value} onCheckedChange={field.onChange} /&gt; &lt;/FormControl&gt; &lt;div className=&quot;space-y-1 leading-none&quot;&gt; &lt;FormLabel&gt; Accept terms and conditions &lt;/FormLabel&gt; &lt;FormMessage /&gt; &lt;/div&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Submit&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Multiple Checkboxes with React Hook Form​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#multiple-checkboxes-with-react-hook-form","content":" import { useForm, Controller } from 'react-hook-form'; import { Checkbox } from '@/components/ui/checkbox'; import { Label } from '@/components/ui/label'; import { Button } from '@/components/ui/button'; type FormValues = { hobbies: string[]; }; const hobbies = [ { id: &quot;reading&quot;, label: &quot;Reading&quot; }, { id: &quot;sports&quot;, label: &quot;Sports&quot; }, { id: &quot;cooking&quot;, label: &quot;Cooking&quot; }, { id: &quot;gaming&quot;, label: &quot;Gaming&quot; }, ]; export function MultipleCheckboxes() { const { handleSubmit, control, setValue, watch } = useForm&lt;FormValues&gt;({ defaultValues: { hobbies: [], }, }); const watchedHobbies = watch(&quot;hobbies&quot;); const toggleHobby = (hobby: string, checked: boolean) =&gt; { const currentHobbies = watchedHobbies || []; const updatedHobbies = checked ? [...currentHobbies, hobby] : currentHobbies.filter(h =&gt; h !== hobby); setValue(&quot;hobbies&quot;, updatedHobbies); }; const onSubmit = (data: FormValues) =&gt; { console.log(data); }; return ( &lt;form onSubmit={handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt; &lt;div className=&quot;space-y-2&quot;&gt; &lt;h3 className=&quot;text-lg font-medium&quot;&gt;Select your hobbies:&lt;/h3&gt; &lt;div className=&quot;grid grid-cols-2 gap-2&quot;&gt; {hobbies.map((hobby) =&gt; ( &lt;div key={hobby.id} className=&quot;flex items-center space-x-2&quot;&gt; &lt;Controller control={control} name=&quot;hobbies&quot; render={({ field }) =&gt; ( &lt;Checkbox id={hobby.id} checked={watchedHobbies?.includes(hobby.id)} onCheckedChange={(checked) =&gt; toggleHobby(hobby.id, checked as boolean) } /&gt; )} /&gt; &lt;Label htmlFor={hobby.id}&gt;{hobby.label}&lt;/Label&gt; &lt;/div&gt; ))} &lt;/div&gt; &lt;/div&gt; &lt;Button type=&quot;submit&quot;&gt;Submit&lt;/Button&gt; &lt;/form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#integration-with-other-components","content":" import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card'; import { Checkbox } from '@/components/ui/checkbox'; import { Label } from '@/components/ui/label'; import { Button } from '@/components/ui/button'; export function PrivacySettingsCard() { return ( &lt;Card className=&quot;w-full max-w-md&quot;&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Privacy Settings&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;CardContent className=&quot;space-y-4&quot;&gt; &lt;div className=&quot;space-y-4&quot;&gt; &lt;div className=&quot;flex items-start space-x-3&quot;&gt; &lt;Checkbox id=&quot;cookies&quot; defaultChecked /&gt; &lt;div className=&quot;grid gap-1.5 leading-none&quot;&gt; &lt;Label htmlFor=&quot;cookies&quot; className=&quot;text-sm font-medium leading-none&quot;&gt; Essential Cookies &lt;/Label&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt; Required for the website to function properly. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div className=&quot;flex items-start space-x-3&quot;&gt; &lt;Checkbox id=&quot;analytics&quot; /&gt; &lt;div className=&quot;grid gap-1.5 leading-none&quot;&gt; &lt;Label htmlFor=&quot;analytics&quot; className=&quot;text-sm font-medium leading-none&quot;&gt; Analytics Cookies &lt;/Label&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt; Help us improve our website by collecting anonymous usage data. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div className=&quot;flex items-start space-x-3&quot;&gt; &lt;Checkbox id=&quot;marketing&quot; /&gt; &lt;div className=&quot;grid gap-1.5 leading-none&quot;&gt; &lt;Label htmlFor=&quot;marketing&quot; className=&quot;text-sm font-medium leading-none&quot;&gt; Marketing Cookies &lt;/Label&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt; Allow personalized advertisements based on your browsing activity. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/CardContent&gt; &lt;CardFooter&gt; &lt;Button className=&quot;w-full&quot;&gt;Save Preferences&lt;/Button&gt; &lt;/CardFooter&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Indeterminate State​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#indeterminate-state","content":" import { useState } from 'react'; import { Checkbox } from '@/components/ui/checkbox'; import { Label } from '@/components/ui/label'; export function IndeterminateCheckbox() { const [parent, setParent] = useState&lt;boolean | 'indeterminate'&gt;(false); const [childChecked, setChildChecked] = useState({ child1: false, child2: false, child3: false, }); // Update parent state based on children const updateParentState = (newChildState: typeof childChecked) =&gt; { const checkedCount = Object.values(newChildState).filter(Boolean).length; if (checkedCount === 0) { setParent(false); } else if (checkedCount === Object.keys(newChildState).length) { setParent(true); } else { setParent('indeterminate'); } }; // Handle parent checkbox change const handleParentChange = (checked: boolean | 'indeterminate') =&gt; { const isChecked = checked === true; setParent(isChecked); const newChildState = { child1: isChecked, child2: isChecked, child3: isChecked, }; setChildChecked(newChildState); }; // Handle child checkbox change const handleChildChange = (key: keyof typeof childChecked, checked: boolean) =&gt; { const newChildState = { ...childChecked, [key]: checked, }; setChildChecked(newChildState); updateParentState(newChildState); }; return ( &lt;div className=&quot;space-y-3&quot;&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;Checkbox id=&quot;parent&quot; checked={parent} onCheckedChange={handleParentChange} /&gt; &lt;Label htmlFor=&quot;parent&quot; className=&quot;font-medium&quot;&gt; Select all items &lt;/Label&gt; &lt;/div&gt; &lt;div className=&quot;space-y-2 ml-6&quot;&gt; {Object.entries(childChecked).map(([key, checked]) =&gt; ( &lt;div key={key} className=&quot;flex items-center space-x-2&quot;&gt; &lt;Checkbox id={key} checked={checked} onCheckedChange={(state) =&gt; handleChildChange(key as keyof typeof childChecked, state as boolean) } /&gt; &lt;Label htmlFor={key}&gt;Item {key.replace('child', '')}&lt;/Label&gt; &lt;/div&gt; ))} &lt;/div&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#responsive-behavior","content":" The Checkbox component maintains its functionality across all device sizes. You may want to adjust the tap/click target area on mobile devices:  // Larger touch target on mobile &lt;div className=&quot;flex items-center space-x-2 sm:space-x-3&quot;&gt; &lt;Checkbox id=&quot;mobile-friendly&quot; className=&quot;h-4 w-4 sm:h-5 sm:w-5&quot; /&gt; &lt;Label htmlFor=&quot;mobile-friendly&quot; className=&quot;text-sm sm:text-base&quot; &gt; Mobile-friendly checkbox &lt;/Label&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#accessibility","content":" The Checkbox component follows these accessibility best practices:  Uses Radix UI's Checkbox primitive which implements the WAI-ARIA Checkbox patternSupports keyboard navigation: can be focused using Tab and toggled with SpaceImplements proper focused states with visible focus ringsUses appropriate ARIA attributes (aria-checked, aria-required, aria-disabled)When used with Label, associates the label with the checkbox using htmlFor/idSupports form states such as validation and disabled statesMaintains appropriate color contrast between backgrounds and borders  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#implementation-details","content":" The component:  Is built on top of the Radix UI's Checkbox primitive for accessibilityUses Lucide React's Check icon for the checkmarkApplies appropriate styling for all states: default, checked, disabled, and focusIncludes hover effects and proper visual feedbackWorks with both controlled and uncontrolled patternsImplements proper indeterminate state supportUses the utility function cn from our project for composing class names  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#common-pitfalls","content":" Missing htmlFor/id association: Remember to associate labels with checkboxes using htmlFor/id pairs for accessibilityForgetting indeterminate state handling: When implementing &quot;Select All&quot; checkboxes, make sure to handle the indeterminate stateMissing onCheckedChange handler in controlled mode: When using as a controlled component, always provide an onCheckedChange handlerArray management with multiple checkboxes: When implementing multiple checkboxes with a shared value array, be careful with array mutationsForm integration complexity: Use FormField and Controller from react-hook-form for cleaner integrationNext.js client components: The Checkbox component uses client-side state, so make sure to use &quot;use client&quot; directive in components that use it  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#testing","content":" // Example test for the Checkbox component import { render, screen, fireEvent } from '@testing-library/react'; import { Checkbox } from '@/components/ui/checkbox'; import { Label } from '@/components/ui/label'; describe('Checkbox', () =&gt; { it('renders correctly with default props', () =&gt; { render(&lt;Checkbox /&gt;); expect(screen.getByRole('checkbox')).toBeInTheDocument(); }); it('handles check state properly', () =&gt; { const handleCheckedChange = jest.fn(); render( &lt;Checkbox onCheckedChange={handleCheckedChange} /&gt; ); const checkbox = screen.getByRole('checkbox'); expect(checkbox).not.toBeChecked(); fireEvent.click(checkbox); expect(handleCheckedChange).toHaveBeenCalledWith(true); }); it('renders with label correctly', () =&gt; { render( &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;Checkbox id=&quot;test-checkbox&quot; /&gt; &lt;Label htmlFor=&quot;test-checkbox&quot;&gt;Test Label&lt;/Label&gt; &lt;/div&gt; ); expect(screen.getByLabelText('Test Label')).toBeInTheDocument(); }); it('is properly disabled', () =&gt; { const handleCheckedChange = jest.fn(); render(&lt;Checkbox disabled onCheckedChange={handleCheckedChange} /&gt;); const checkbox = screen.getByRole('checkbox'); expect(checkbox).toBeDisabled(); fireEvent.click(checkbox); expect(handleCheckedChange).not.toHaveBeenCalled(); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Checkbox Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/checkbox#related-components","content":" Form: For building forms with validation using react-hook-formLabel: Used to label the Checkbox for accessibilityRadioGroup: When users need to select a single option from a listSwitch: Alternative to Checkbox for toggle/switch style interactions ","version":"Next","tagName":"h2"},{"title":"Form Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#import","content":" import { Form, FormField, FormItem, FormLabel, FormControl, FormDescription, FormMessage } from '@/components/ui/form';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#usage","content":" The Form component works with react-hook-form to manage form state and validation. It integrates well with validation libraries like Zod.  ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#basic-usage","content":" &quot;use client&quot; import { zodResolver } from &quot;@hookform/resolvers/zod&quot; import { useForm } from &quot;react-hook-form&quot; import * as z from &quot;zod&quot; import { Button } from &quot;@/components/ui/button&quot; import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, } from &quot;@/components/ui/form&quot; import { Input } from &quot;@/components/ui/input&quot; const formSchema = z.object({ username: z.string().min(2, { message: &quot;Username must be at least 2 characters.&quot;, }), }) export function ProfileForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { username: &quot;&quot;, }, }) function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { console.log(values) } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt; &lt;FormField control={form.control} name=&quot;username&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Username&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;Enter username&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormDescription&gt; This is your public display name. &lt;/FormDescription&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Submit&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ) }   ","version":"Next","tagName":"h3"},{"title":"Using with Multiple Fields and Different Input Types​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#using-with-multiple-fields-and-different-input-types","content":" const formSchema = z.object({ username: z.string().min(2).max(50), email: z.string().email(), bio: z.string().max(160).optional(), notifications: z.boolean().default(false), }) export function SettingsForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { username: &quot;&quot;, email: &quot;&quot;, bio: &quot;&quot;, notifications: false, }, }) function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { console.log(values) } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-6&quot;&gt; &lt;FormField control={form.control} name=&quot;username&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Username&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;johndoe&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;FormField control={form.control} name=&quot;email&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Email&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input type=&quot;email&quot; placeholder=&quot;john@example.com&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;FormField control={form.control} name=&quot;bio&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Bio&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Textarea placeholder=&quot;Tell us about yourself&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormDescription&gt; Max 160 characters. &lt;/FormDescription&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;FormField control={form.control} name=&quot;notifications&quot; render={({ field }) =&gt; ( &lt;FormItem className=&quot;flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4&quot;&gt; &lt;FormControl&gt; &lt;Checkbox checked={field.value} onCheckedChange={field.onChange} /&gt; &lt;/FormControl&gt; &lt;div className=&quot;space-y-1 leading-none&quot;&gt; &lt;FormLabel&gt;Enable notifications&lt;/FormLabel&gt; &lt;FormDescription&gt; Receive email notifications for important updates. &lt;/FormDescription&gt; &lt;/div&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Save changes&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ) }   ","version":"Next","tagName":"h3"},{"title":"Components​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#components","content":" The Form component is a collection of several sub-components that work together:  ","version":"Next","tagName":"h2"},{"title":"Form​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#form","content":" The root component that wraps around react-hook-form's FormProvider.  ","version":"Next","tagName":"h3"},{"title":"FormField​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formfield","content":" A wrapper around react-hook-form's Controller that provides context for form fields.  ","version":"Next","tagName":"h3"},{"title":"FormItem​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formitem","content":" A container for individual form fields that provides proper spacing and layout.  ","version":"Next","tagName":"h3"},{"title":"FormLabel​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formlabel","content":" A label component that's automatically associated with its corresponding form control.  ","version":"Next","tagName":"h3"},{"title":"FormControl​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formcontrol","content":" A component that provides the proper accessibility attributes to form inputs.  ","version":"Next","tagName":"h3"},{"title":"FormDescription​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formdescription","content":" A description component for providing additional information about a form field.  ","version":"Next","tagName":"h3"},{"title":"FormMessage​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formmessage","content":" A component for displaying validation error messages.  ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#props","content":" ","version":"Next","tagName":"h2"},{"title":"Form​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#form-1","content":" Prop\tType\tDefault\tDescription...props\tUseFormReturn&lt;TFieldValues, TContext&gt;\t-\tThe return value from the useForm hook  ","version":"Next","tagName":"h3"},{"title":"FormField​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formfield-1","content":" Prop\tType\tDefault\tDescriptioncontrol\tControl&lt;TFieldValues&gt;\tRequired\tThe form control from react-hook-form name\tFieldPath&lt;TFieldValues&gt;\tRequired\tThe name of the form field render\t({ field, fieldState, formState }) =&gt; React.ReactElement\tRequired\tA render function that provides access to the field props  ","version":"Next","tagName":"h3"},{"title":"FormItem​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formitem-1","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\t-\tOptional additional CSS classes ...props\tHTMLAttributes&lt;HTMLDivElement&gt;\t-\tHTML div attributes  ","version":"Next","tagName":"h3"},{"title":"FormLabel​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formlabel-1","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\t-\tOptional additional CSS classes ...props\tComponentPropsWithoutRef&lt;typeof LabelPrimitive.Root&gt;\t-\tRadix UI Label props  ","version":"Next","tagName":"h3"},{"title":"FormControl​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formcontrol-1","content":" Prop\tType\tDefault\tDescription...props\tComponentPropsWithoutRef&lt;typeof Slot&gt;\t-\tRadix UI Slot props  ","version":"Next","tagName":"h3"},{"title":"FormDescription​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formdescription-1","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\t-\tOptional additional CSS classes ...props\tHTMLAttributes&lt;HTMLParagraphElement&gt;\t-\tHTML paragraph attributes  ","version":"Next","tagName":"h3"},{"title":"FormMessage​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#formmessage-1","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\t-\tOptional additional CSS classes children\tReactNode\t-\tOptional content to display when there's no error ...props\tHTMLAttributes&lt;HTMLParagraphElement&gt;\t-\tHTML paragraph attributes  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#typescript","content":" // Form Field Context Type type FormFieldContextValue&lt; TFieldValues extends FieldValues = FieldValues, TName extends FieldPath&lt;TFieldValues&gt; = FieldPath&lt;TFieldValues&gt; &gt; = { name: TName } // Form Item Context Type type FormItemContextValue = { id: string } // useFormField Return Type type FormFieldInfo = { id: string; name: string; formItemId: string; formDescriptionId: string; formMessageId: string; error?: FieldError; isDirty: boolean; isTouched: boolean; }   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#style-overrides","content":" All form components accept a className prop that allows you to add additional Tailwind CSS classes:  &lt;FormItem className=&quot;grid grid-cols-4 items-start gap-4&quot;&gt; &lt;FormLabel className=&quot;mt-2 text-right&quot;&gt;Username&lt;/FormLabel&gt; &lt;div className=&quot;col-span-3&quot;&gt; &lt;FormControl&gt; &lt;Input {...field} /&gt; &lt;/FormControl&gt; &lt;FormDescription className=&quot;text-xs&quot;&gt; Your public display name. &lt;/FormDescription&gt; &lt;FormMessage className=&quot;text-xs font-bold&quot; /&gt; &lt;/div&gt; &lt;/FormItem&gt;   ","version":"Next","tagName":"h3"},{"title":"Creating Custom Form Controls​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#creating-custom-form-controls","content":" You can easily create custom form controls by wrapping them with FormControl:  &lt;FormField control={form.control} name=&quot;amount&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Amount&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;div className=&quot;relative&quot;&gt; &lt;span className=&quot;absolute left-2 top-2&quot;&gt;$&lt;/span&gt; &lt;Input className=&quot;pl-6&quot; type=&quot;number&quot; {...field} onChange={(e) =&gt; field.onChange(parseFloat(e.target.value))} /&gt; &lt;/div&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt;   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Select Component​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#integration-with-select-component","content":" import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot; &lt;FormField control={form.control} name=&quot;country&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Country&lt;/FormLabel&gt; &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt; &lt;FormControl&gt; &lt;SelectTrigger&gt; &lt;SelectValue placeholder=&quot;Select a country&quot; /&gt; &lt;/SelectTrigger&gt; &lt;/FormControl&gt; &lt;SelectContent&gt; &lt;SelectItem value=&quot;us&quot;&gt;United States&lt;/SelectItem&gt; &lt;SelectItem value=&quot;ca&quot;&gt;Canada&lt;/SelectItem&gt; &lt;SelectItem value=&quot;uk&quot;&gt;United Kingdom&lt;/SelectItem&gt; &lt;/SelectContent&gt; &lt;/Select&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt;   ","version":"Next","tagName":"h3"},{"title":"Using with Supabase​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#using-with-supabase","content":" &quot;use client&quot; import { zodResolver } from &quot;@hookform/resolvers/zod&quot; import { useForm } from &quot;react-hook-form&quot; import * as z from &quot;zod&quot; import { useRouter } from &quot;next/navigation&quot; import { createClientComponentClient } from &quot;@supabase/auth-helpers-nextjs&quot; import { Button } from &quot;@/components/ui/button&quot; import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from &quot;@/components/ui/form&quot; import { Input } from &quot;@/components/ui/input&quot; const formSchema = z.object({ email: z.string().email(), password: z.string().min(6), }) export function LoginForm() { const router = useRouter() const supabase = createClientComponentClient() const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { email: &quot;&quot;, password: &quot;&quot;, }, }) async function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { try { const { error } = await supabase.auth.signInWithPassword({ email: values.email, password: values.password, }) if (error) { form.setError(&quot;root&quot;, { message: error.message }) return } router.push(&quot;/dashboard&quot;) router.refresh() } catch (error) { console.error(error) form.setError(&quot;root&quot;, { message: &quot;An unexpected error occurred&quot; }) } } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-6&quot;&gt; &lt;FormField control={form.control} name=&quot;email&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Email&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input type=&quot;email&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;FormField control={form.control} name=&quot;password&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Password&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input type=&quot;password&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; {form.formState.errors.root &amp;&amp; ( &lt;p className=&quot;text-sm font-medium text-destructive&quot;&gt; {form.formState.errors.root.message} &lt;/p&gt; )} &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot; disabled={form.formState.isSubmitting}&gt; {form.formState.isSubmitting ? &quot;Logging in...&quot; : &quot;Log in&quot;} &lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ) }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#responsive-behavior","content":" The Form components are designed to be responsive by default and can be customized with Tailwind's responsive classes:  &lt;FormItem className=&quot;sm:grid sm:grid-cols-4 sm:items-start sm:gap-4&quot;&gt; &lt;FormLabel className=&quot;sm:text-right sm:mt-1&quot;&gt;Name&lt;/FormLabel&gt; &lt;div className=&quot;sm:col-span-3 sm:mt-0 mt-1&quot;&gt; &lt;FormControl&gt; &lt;Input {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/div&gt; &lt;/FormItem&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#accessibility","content":" The Form components follow these accessibility best practices:  FormLabel is properly associated with its corresponding form control using the htmlFor attributeFormControl adds appropriate ARIA attributes to form inputs (aria-describedby, aria-invalid)Error messages are properly linked to inputs using IDsForm descriptions are properly associated with inputs using IDsError states are properly indicated visually with color changes and programmatically with aria-invalid  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#implementation-details","content":" The Form component:  Uses React Context to provide communication between nested form componentsLeverages react-hook-form for state management and validationUses Radix UI's Slot component to enable passing props to arbitrary componentsGenerates unique IDs automatically using React's useId hookHandles error states and messages automatically  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#common-pitfalls","content":" Missing Control Prop: Always make sure to pass the form.control to FormField, otherwise the form will not be properly controlled.Using Without Field Render Function: The render function is required for FormField to work properly.Forgetting FormControl: Always wrap your input components with FormControl to ensure proper accessibility.Not Providing Default Values: Since FormField uses a controlled component approach, you should provide default values for all fields in your form.Validation Errors Not Showing: Make sure you've included the FormMessage component in your FormItem.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#testing","content":" import { render, screen } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { zodResolver } from &quot;@hookform/resolvers/zod&quot;; import { useForm } from &quot;react-hook-form&quot;; import * as z from &quot;zod&quot;; import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form'; import { Input } from '@/components/ui/input'; import { Button } from '@/components/ui/button'; const formSchema = z.object({ username: z.string().min(2), }); function TestForm() { const form = useForm({ resolver: zodResolver(formSchema), defaultValues: { username: &quot;&quot;, }, }); return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(() =&gt; {})}&gt; &lt;FormField control={form.control} name=&quot;username&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Username&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input {...field} data-testid=&quot;username-input&quot; /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Submit&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); } describe('Form', () =&gt; { it('renders form elements correctly', () =&gt; { render(&lt;TestForm /&gt;); expect(screen.getByLabelText(/username/i)).toBeInTheDocument(); expect(screen.getByTestId('username-input')).toBeInTheDocument(); expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument(); }); it('shows validation error for too short username', async () =&gt; { render(&lt;TestForm /&gt;); const user = userEvent.setup(); await user.type(screen.getByTestId('username-input'), 'a'); await user.click(screen.getByRole('button', { name: /submit/i })); // Wait for the validation error to appear expect(await screen.findByText(/must be at least 2/i)).toBeInTheDocument(); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Form Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/form#related-components","content":" Input: Text input component that works with FormControlSelect: Selection input component that works with FormControlCheckbox: Toggle input component that works with FormControlRadioGroup: Radio button group component that works with FormControlTextarea: Multi-line text input component that works with FormControlButton: Button component typically used for form submission ","version":"Next","tagName":"h2"},{"title":"RadioGroup Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#import","content":" import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'; import { Label } from '@/components/ui/label';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#basic-usage","content":" &lt;RadioGroup defaultValue=&quot;option-1&quot;&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-1&quot; id=&quot;option-1&quot; /&gt; &lt;Label htmlFor=&quot;option-1&quot;&gt;Option 1&lt;/Label&gt; &lt;/div&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-2&quot; id=&quot;option-2&quot; /&gt; &lt;Label htmlFor=&quot;option-2&quot;&gt;Option 2&lt;/Label&gt; &lt;/div&gt; &lt;/RadioGroup&gt;   ","version":"Next","tagName":"h3"},{"title":"With Default Selection​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#with-default-selection","content":" &lt;RadioGroup defaultValue=&quot;option-2&quot;&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-1&quot; id=&quot;option-1&quot; /&gt; &lt;Label htmlFor=&quot;option-1&quot;&gt;Option 1&lt;/Label&gt; &lt;/div&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-2&quot; id=&quot;option-2&quot; /&gt; &lt;Label htmlFor=&quot;option-2&quot;&gt;Option 2&lt;/Label&gt; &lt;/div&gt; &lt;/RadioGroup&gt;   ","version":"Next","tagName":"h3"},{"title":"Disabled Options​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#disabled-options","content":" &lt;RadioGroup defaultValue=&quot;option-1&quot;&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-1&quot; id=&quot;option-1&quot; /&gt; &lt;Label htmlFor=&quot;option-1&quot;&gt;Option 1&lt;/Label&gt; &lt;/div&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-2&quot; id=&quot;option-2&quot; disabled /&gt; &lt;Label htmlFor=&quot;option-2&quot; className=&quot;text-muted-foreground&quot;&gt; Option 2 (Disabled) &lt;/Label&gt; &lt;/div&gt; &lt;/RadioGroup&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#props","content":" ","version":"Next","tagName":"h2"},{"title":"RadioGroup​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#radiogroup","content":" Prop\tType\tDefault\tDescriptionvalue\tstring\tundefined\tThe controlled value of the radio item to check. Must be used with onValueChange. defaultValue\tstring\tundefined\tThe value of the radio item that should be checked by default. onValueChange\t(value: string) =&gt; void\tundefined\tEvent handler called when the value changes. disabled\tboolean\tfalse\tWhen true, prevents user interaction with all radio items in the group. name\tstring\tundefined\tThe name of the group. Submitted with its owning form as part of a name/value pair. required\tboolean\tfalse\tWhen true, indicates that the user must check a radio item before the owning form can be submitted. orientation\t&quot;horizontal&quot; | &quot;vertical&quot;\t&quot;vertical&quot;\tThe orientation of the component. dir\t&quot;ltr&quot; | &quot;rtl&quot;\tundefined\tThe reading direction of the radio group. If not specified, inherits globally from DirectionProvider or assumes LTR (left-to-right) reading mode. loop\tboolean\ttrue\tWhen true, keyboard navigation will loop from last item to first, and vice versa. className\tstring\tundefined\tAdditional CSS classes to add to the radio group.  ","version":"Next","tagName":"h3"},{"title":"RadioGroupItem​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#radiogroupitem","content":" Prop\tType\tDefault\tDescriptionvalue\tstring\tRequired\tThe value of the radio item. Must be unique within the group. disabled\tboolean\tfalse\tWhen true, prevents user interaction with this radio item. required\tboolean\tfalse\tWhen true, indicates that the user must check this radio item before the owning form can be submitted. className\tstring\tundefined\tAdditional CSS classes to add to the radio item. id\tstring\tundefined\tThe unique ID for the radio item. This should be used to associate the radio with a label.  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#typescript","content":" // RadioGroup Component Types import * as React from 'react'; import * as RadioGroupPrimitive from '@radix-ui/react-radio-group'; type RadioGroupProps = React.ComponentPropsWithoutRef&lt;typeof RadioGroupPrimitive.Root&gt;; type RadioGroupItemProps = React.ComponentPropsWithoutRef&lt;typeof RadioGroupPrimitive.Item&gt;;   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#style-overrides","content":" The RadioGroup and RadioGroupItem components can be customized using the following approaches:  Using the className prop to add additional Tailwind classes:  &lt;RadioGroup className=&quot;flex flex-col space-y-4&quot;&gt; {/* ... */} &lt;/RadioGroup&gt; &lt;RadioGroupItem className=&quot;h-5 w-5 border-blue-500&quot; /&gt;   Using the cn utility for conditional styling:  import { cn } from '@/lib/utils'; &lt;RadioGroupItem className={cn( 'custom-base-styles', isSpecialCase &amp;&amp; 'special-case-styles' )} /&gt;   ","version":"Next","tagName":"h3"},{"title":"Customizing the Indicator​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#customizing-the-indicator","content":" The indicator (the dot inside the radio button) is implemented using the Circle component from lucide-react. You can customize its appearance by wrapping the RadioGroupItem:  &lt;div className=&quot;custom-radio-wrapper&quot;&gt; &lt;RadioGroupItem value=&quot;custom&quot; id=&quot;custom&quot; /&gt; {/* Custom styling around the radio */} &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with React Hook Form​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#integration-with-react-hook-form","content":" import { useForm } from 'react-hook-form'; import { zodResolver } from '@hookform/resolvers/zod'; import * as z from 'zod'; import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'; import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'; // Define your form schema const formSchema = z.object({ plan: z.enum(['free', 'pro', 'enterprise'], { required_error: 'Please select a plan.', }), }); // Create your form component function PlanForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), }); function onSubmit(data: z.infer&lt;typeof formSchema&gt;) { console.log(data); } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-6&quot;&gt; &lt;FormField control={form.control} name=&quot;plan&quot; render={({ field }) =&gt; ( &lt;FormItem className=&quot;space-y-3&quot;&gt; &lt;FormLabel&gt;Subscription Plan&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;RadioGroup onValueChange={field.onChange} defaultValue={field.value} className=&quot;flex flex-col space-y-1&quot; &gt; &lt;FormItem className=&quot;flex items-center space-x-3 space-y-0&quot;&gt; &lt;FormControl&gt; &lt;RadioGroupItem value=&quot;free&quot; id=&quot;free&quot; /&gt; &lt;/FormControl&gt; &lt;FormLabel htmlFor=&quot;free&quot; className=&quot;font-normal&quot;&gt; Free &lt;/FormLabel&gt; &lt;/FormItem&gt; &lt;FormItem className=&quot;flex items-center space-x-3 space-y-0&quot;&gt; &lt;FormControl&gt; &lt;RadioGroupItem value=&quot;pro&quot; id=&quot;pro&quot; /&gt; &lt;/FormControl&gt; &lt;FormLabel htmlFor=&quot;pro&quot; className=&quot;font-normal&quot;&gt; Pro &lt;/FormLabel&gt; &lt;/FormItem&gt; &lt;FormItem className=&quot;flex items-center space-x-3 space-y-0&quot;&gt; &lt;FormControl&gt; &lt;RadioGroupItem value=&quot;enterprise&quot; id=&quot;enterprise&quot; /&gt; &lt;/FormControl&gt; &lt;FormLabel htmlFor=&quot;enterprise&quot; className=&quot;font-normal&quot;&gt; Enterprise &lt;/FormLabel&gt; &lt;/FormItem&gt; &lt;/RadioGroup&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Card-Based Radio Options​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#card-based-radio-options","content":" import { Card } from '@/components/ui/card'; function CardRadioGroup() { const [selectedValue, setSelectedValue] = React.useState('option-1'); return ( &lt;RadioGroup defaultValue=&quot;option-1&quot; onValueChange={setSelectedValue} className=&quot;grid grid-cols-3 gap-4&quot; &gt; {['option-1', 'option-2', 'option-3'].map((option) =&gt; ( &lt;label key={option} htmlFor={option} className=&quot;cursor-pointer&quot; &gt; &lt;Card className={`p-4 transition-all hover:border-primary ${ selectedValue === option ? 'border-primary bg-primary/5' : '' }`} &gt; &lt;div className=&quot;flex items-start space-x-4&quot;&gt; &lt;RadioGroupItem value={option} id={option} className=&quot;mt-1&quot; /&gt; &lt;div&gt; &lt;h3 className=&quot;font-medium&quot;&gt;Option {option.split('-')[1]}&lt;/h3&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt; Description for option {option.split('-')[1]} &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/Card&gt; &lt;/label&gt; ))} &lt;/RadioGroup&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#responsive-behavior","content":" The RadioGroup responds to different screen sizes in the following ways:  Mobile: By default, RadioGroup renders with a vertical layout (stacked). For a horizontal layout on mobile, use flexbox with wrapping: &lt;RadioGroup className=&quot;flex flex-wrap gap-4&quot;&gt; {/* Radio items */} &lt;/RadioGroup&gt; Tablet and Desktop: For a horizontal layout on larger screens, you can use utility classes for responsive behavior: &lt;RadioGroup className=&quot;flex flex-col space-y-2 md:flex-row md:space-x-4 md:space-y-0&quot;&gt; {/* Radio items */} &lt;/RadioGroup&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#accessibility","content":" The RadioGroup component follows these accessibility best practices:  Implements the WAI-ARIA Radio Group patternUses the roving tabindex pattern for keyboard navigation within the groupIncludes support for the following keyboard interactions: Tab: Moves focus to the checked radio button or the first radio button in the groupSpace: Selects the radio button that currently has focusArrow Up/Left: Moves focus to and selects the previous radio buttonArrow Down/Right: Moves focus to and selects the next radio button Supports proper labeling through standard HTML label elementsWhen used with the FormLabel component, ensures association between labels and controlsEnables the use of required and disabled states that are properly communicated to screen readers  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#implementation-details","content":" The component:  Is built on top of Radix UI's RadioGroup primitive, which ensures accessibilityUses standard SVG circles from the Lucide icon library for the radio indicatorApplies default styles that are easily customizable using Tailwind CSSIncludes focus states for keyboard navigation with visible focus ringsSupports directional awareness for both LTR and RTL layoutsUses a forward ref pattern to maintain proper ref behavior when used within forms  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#common-pitfalls","content":" Missing Value Attribute: Each RadioGroupItem must have a unique value prop, or the component won't work correctly.Incorrect Form Integration: When using with React Hook Form, make sure to use the onValueChange handler for RadioGroup (not onChange) and set the defaultValue properly.Missing ID/htmlFor Connection: Each RadioGroupItem should have an id that matches the htmlFor attribute of its corresponding Label.Styling Indicator State: The checked state is handled by the component; don't try to handle it manually with pseudo-classes like :checked.Next.js App Router: When using with Next.js App Router, ensure the component is properly client-side rendered with 'use client' directive at the top of your component file.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#testing","content":" // Example test for the RadioGroup component import { render, screen } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'; import { Label } from '@/components/ui/label'; describe('RadioGroup', () =&gt; { it('renders correctly', () =&gt; { render( &lt;RadioGroup defaultValue=&quot;option-1&quot;&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-1&quot; id=&quot;option-1&quot; /&gt; &lt;Label htmlFor=&quot;option-1&quot;&gt;Option 1&lt;/Label&gt; &lt;/div&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-2&quot; id=&quot;option-2&quot; /&gt; &lt;Label htmlFor=&quot;option-2&quot;&gt;Option 2&lt;/Label&gt; &lt;/div&gt; &lt;/RadioGroup&gt; ); expect(screen.getByText('Option 1')).toBeInTheDocument(); expect(screen.getByText('Option 2')).toBeInTheDocument(); expect(screen.getByLabelText('Option 1')).toBeChecked(); expect(screen.getByLabelText('Option 2')).not.toBeChecked(); }); it('allows changing the selected value', async () =&gt; { const user = userEvent.setup(); const onValueChangeMock = jest.fn(); render( &lt;RadioGroup defaultValue=&quot;option-1&quot; onValueChange={onValueChangeMock}&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-1&quot; id=&quot;option-1&quot; /&gt; &lt;Label htmlFor=&quot;option-1&quot;&gt;Option 1&lt;/Label&gt; &lt;/div&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-2&quot; id=&quot;option-2&quot; /&gt; &lt;Label htmlFor=&quot;option-2&quot;&gt;Option 2&lt;/Label&gt; &lt;/div&gt; &lt;/RadioGroup&gt; ); await user.click(screen.getByLabelText('Option 2')); expect(onValueChangeMock).toHaveBeenCalledWith('option-2'); expect(screen.getByLabelText('Option 2')).toBeChecked(); }); it('respects the disabled state', async () =&gt; { const user = userEvent.setup(); const onValueChangeMock = jest.fn(); render( &lt;RadioGroup defaultValue=&quot;option-1&quot; onValueChange={onValueChangeMock}&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-1&quot; id=&quot;option-1&quot; /&gt; &lt;Label htmlFor=&quot;option-1&quot;&gt;Option 1&lt;/Label&gt; &lt;/div&gt; &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;RadioGroupItem value=&quot;option-2&quot; id=&quot;option-2&quot; disabled /&gt; &lt;Label htmlFor=&quot;option-2&quot;&gt;Option 2&lt;/Label&gt; &lt;/div&gt; &lt;/RadioGroup&gt; ); await user.click(screen.getByLabelText('Option 2')); expect(onValueChangeMock).not.toHaveBeenCalled(); expect(screen.getByLabelText('Option 1')).toBeChecked(); expect(screen.getByLabelText('Option 2')).not.toBeChecked(); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#related-components","content":" Form: Used together with RadioGroup for form validation and submissionLabel: Used to create accessible labels for RadioGroupItemsCheckbox: Used for multiple selection where users can select multiple optionsSelect: Used for selecting a single option from a dropdown menu  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"RadioGroup Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/radio-group#installation","content":" This component requires the following dependencies:  # For the RadioGroup component npm install @radix-ui/react-radio-group lucide-react   These dependencies are already included in the starter project, so no additional installation is needed unless starting a new project. ","version":"Next","tagName":"h2"},{"title":"Switch Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#import","content":" import { Switch } from '@/components/ui/switch';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#basic-usage","content":" &lt;Switch /&gt;   ","version":"Next","tagName":"h3"},{"title":"Controlled Component​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#controlled-component","content":" import { useState } from 'react'; import { Switch } from '@/components/ui/switch'; export function ControlledSwitch() { const [checked, setChecked] = useState(false); return ( &lt;Switch checked={checked} onCheckedChange={setChecked} /&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"With Label​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#with-label","content":" import { Label } from '@/components/ui/label'; import { Switch } from '@/components/ui/switch'; export function SwitchWithLabel() { return ( &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;Switch id=&quot;airplane-mode&quot; /&gt; &lt;Label htmlFor=&quot;airplane-mode&quot;&gt;Airplane Mode&lt;/Label&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Disabled State​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#disabled-state","content":" &lt;Switch disabled /&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#props","content":" Prop\tType\tDefault\tDescriptionchecked\tboolean\tundefined\tThe controlled checked state of the switch defaultChecked\tboolean\tundefined\tThe default checked state when uncontrolled onCheckedChange\t(checked: boolean) =&gt; void\tundefined\tEvent handler called when the checked state changes disabled\tboolean\tfalse\tWhen true, prevents the user from interacting with the switch required\tboolean\tfalse\tWhen true, indicates that the user must check the switch before the form can be submitted name\tstring\tundefined\tThe name of the switch when used in a form value\tstring\tundefined\tThe value of the switch when used in a form id\tstring\tundefined\tThe ID for the switch, used for accessibility and connecting to a label className\tstring\tundefined\tAdditional CSS classes to add to the switch  ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#typescript","content":" import * as React from 'react'; import * as SwitchPrimitives from '@radix-ui/react-switch'; // Component Type Definition type SwitchProps = React.ComponentPropsWithoutRef&lt;typeof SwitchPrimitives.Root&gt;;   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#style-overrides","content":" The Switch component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes  &lt;Switch className=&quot;data-[state=checked]:bg-green-500 data-[state=unchecked]:bg-gray-300&quot; /&gt;   Customizing size through TailwindCSS  &lt;Switch className=&quot;h-4 w-8&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#extending-the-component","content":" You can extend the Switch component to add custom functionality or styling:  import { Switch } from '@/components/ui/switch'; import { cn } from '@/lib/utils'; type ColorSwitchProps = React.ComponentProps&lt;typeof Switch&gt; &amp; { colorScheme?: 'red' | 'green' | 'blue'; }; export function ColorSwitch({ colorScheme = 'blue', className, ...props }: ColorSwitchProps) { const colorClasses = { red: 'data-[state=checked]:bg-red-500', green: 'data-[state=checked]:bg-green-500', blue: 'data-[state=checked]:bg-blue-500', }; return ( &lt;Switch className={cn(colorClasses[colorScheme], className)} {...props} /&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with React Hook Form​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#integration-with-react-hook-form","content":" import { useForm, Controller } from 'react-hook-form'; import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel } from '@/components/ui/form'; import { Switch } from '@/components/ui/switch'; import { Button } from '@/components/ui/button'; import { z } from 'zod'; import { zodResolver } from '@hookform/resolvers/zod'; // Define form schema const FormSchema = z.object({ notifications: z.boolean().default(false), }); export function SwitchForm() { const form = useForm&lt;z.infer&lt;typeof FormSchema&gt;&gt;({ resolver: zodResolver(FormSchema), defaultValues: { notifications: false, }, }); function onSubmit(data: z.infer&lt;typeof FormSchema&gt;) { console.log(data); } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-6&quot;&gt; &lt;FormField control={form.control} name=&quot;notifications&quot; render={({ field }) =&gt; ( &lt;FormItem className=&quot;flex flex-row items-center justify-between rounded-lg border p-4&quot;&gt; &lt;div className=&quot;space-y-0.5&quot;&gt; &lt;FormLabel className=&quot;text-base&quot;&gt;Notifications&lt;/FormLabel&gt; &lt;FormDescription&gt; Receive notifications about new updates. &lt;/FormDescription&gt; &lt;/div&gt; &lt;FormControl&gt; &lt;Switch checked={field.value} onCheckedChange={field.onChange} /&gt; &lt;/FormControl&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Save preferences&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#integration-with-other-components","content":" import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'; import { Switch } from '@/components/ui/switch'; import { Label } from '@/components/ui/label'; export function SettingsCard() { return ( &lt;Card&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Account Settings&lt;/CardTitle&gt; &lt;CardDescription&gt;Manage your account preferences.&lt;/CardDescription&gt; &lt;/CardHeader&gt; &lt;CardContent className=&quot;space-y-4&quot;&gt; &lt;div className=&quot;flex items-center justify-between&quot;&gt; &lt;Label htmlFor=&quot;marketing-emails&quot;&gt;Marketing emails&lt;/Label&gt; &lt;Switch id=&quot;marketing-emails&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;flex items-center justify-between&quot;&gt; &lt;Label htmlFor=&quot;security-alerts&quot;&gt;Security alerts&lt;/Label&gt; &lt;Switch id=&quot;security-alerts&quot; defaultChecked /&gt; &lt;/div&gt; &lt;/CardContent&gt; &lt;CardFooter&gt; &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt; You can change these settings at any time. &lt;/p&gt; &lt;/CardFooter&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#responsive-behavior","content":" The Switch component has minimal built-in responsive behavior, as its size remains constant across device sizes. If you want different sizes based on screen size, use Tailwind's responsive modifiers:  &lt;Switch className=&quot;h-4 w-8 md:h-5 md:w-10 lg:h-6 lg:w-11&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#accessibility","content":" The Switch component follows these accessibility best practices:  Built on Radix UI's Switch primitive which provides robust accessibility featuresUses the appropriate ARIA role (switch) for semantic HTMLSupports keyboard navigation (can be toggled with Space or Enter)Provides visual feedback for different states (checked/unchecked, focused, disabled)Supports connecting to a &lt;Label&gt; component through the id prop for proper labelingCan be screen reader friendly when used with proper labelsWhen focused, shows a visible focus ring through the focus-visible:ring utility classes  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#implementation-details","content":" The Switch component:  Is built on top of Radix UI's Switch PrimitiveUses React's forwardRef to allow ref forwarding, making it compatible with form libraries like React Hook FormImplements accessible keyboard navigation and focus managementUses Tailwind CSS for styling with a consistent design languageSupports both controlled and uncontrolled usage patternsUses CSS transitions for smooth state changesProvides visual feedback for different states through data attributes  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#common-pitfalls","content":" Missing Label: Always provide a label for the Switch for accessibility. Use the &lt;Label&gt; component and connect it with the id prop. &lt;div className=&quot;flex items-center space-x-2&quot;&gt; &lt;Switch id=&quot;mode&quot; /&gt; &lt;Label htmlFor=&quot;mode&quot;&gt;Dark Mode&lt;/Label&gt; &lt;/div&gt; Controlled vs Uncontrolled: Decide whether to use the Switch as a controlled or uncontrolled component and be consistent. Don't mix checked with defaultChecked. Form Integration: When using in forms, remember to use the appropriate form state management. With React Hook Form, use the Controller component or the FormField abstraction from the project's form components. Server Components: The Switch component uses client-side functionality and can't be used directly in React Server Components. Always use it in client components (with 'use client' directive).  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#testing","content":" // Example test for the Switch component import { render, screen, fireEvent } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { Switch } from '@/components/ui/switch'; describe('Switch', () =&gt; { it('renders correctly', () =&gt; { render(&lt;Switch /&gt;); expect(screen.getByRole('switch')).toBeInTheDocument(); }); it('toggles when clicked', async () =&gt; { const onCheckedChange = jest.fn(); render(&lt;Switch onCheckedChange={onCheckedChange} /&gt;); const switchElement = screen.getByRole('switch'); expect(switchElement).toHaveAttribute('aria-checked', 'false'); await userEvent.click(switchElement); expect(onCheckedChange).toHaveBeenCalledWith(true); }); it('can be controlled', () =&gt; { const { rerender } = render(&lt;Switch checked={false} /&gt;); expect(screen.getByRole('switch')).toHaveAttribute('aria-checked', 'false'); rerender(&lt;Switch checked={true} /&gt;); expect(screen.getByRole('switch')).toHaveAttribute('aria-checked', 'true'); }); it('respects disabled state', async () =&gt; { const onCheckedChange = jest.fn(); render(&lt;Switch disabled onCheckedChange={onCheckedChange} /&gt;); const switchElement = screen.getByRole('switch'); expect(switchElement).toBeDisabled(); await userEvent.click(switchElement); expect(onCheckedChange).not.toHaveBeenCalled(); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Switch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/switch#related-components","content":" Checkbox: Another form control for boolean values, but using a checkbox visual metaphorToggleGroup: A set of two-state buttons that can be toggled on or offTheme Switch: A specialized component that uses the Button component to toggle between light and dark themesForm: Used to create accessible forms that can include Switch components ","version":"Next","tagName":"h2"},{"title":"Select Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#import","content":" import { Select, SelectContent, SelectGroup, SelectItem, SelectLabel, SelectTrigger, SelectValue, SelectSeparator, SelectScrollUpButton, SelectScrollDownButton } from '@/components/ui/select';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#basic-usage","content":" &lt;Select&gt; &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt; &lt;SelectValue placeholder=&quot;Select an option&quot; /&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &lt;SelectItem value=&quot;option1&quot;&gt;Option 1&lt;/SelectItem&gt; &lt;SelectItem value=&quot;option2&quot;&gt;Option 2&lt;/SelectItem&gt; &lt;SelectItem value=&quot;option3&quot;&gt;Option 3&lt;/SelectItem&gt; &lt;/SelectContent&gt; &lt;/Select&gt;   ","version":"Next","tagName":"h3"},{"title":"With Groups and Labels​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#with-groups-and-labels","content":" &lt;Select&gt; &lt;SelectTrigger className=&quot;w-[220px]&quot;&gt; &lt;SelectValue placeholder=&quot;Select a category&quot; /&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &lt;SelectGroup&gt; &lt;SelectLabel&gt;Fruits&lt;/SelectLabel&gt; &lt;SelectItem value=&quot;apple&quot;&gt;Apple&lt;/SelectItem&gt; &lt;SelectItem value=&quot;banana&quot;&gt;Banana&lt;/SelectItem&gt; &lt;SelectItem value=&quot;orange&quot;&gt;Orange&lt;/SelectItem&gt; &lt;/SelectGroup&gt; &lt;SelectSeparator /&gt; &lt;SelectGroup&gt; &lt;SelectLabel&gt;Vegetables&lt;/SelectLabel&gt; &lt;SelectItem value=&quot;carrot&quot;&gt;Carrot&lt;/SelectItem&gt; &lt;SelectItem value=&quot;broccoli&quot;&gt;Broccoli&lt;/SelectItem&gt; &lt;SelectItem value=&quot;spinach&quot;&gt;Spinach&lt;/SelectItem&gt; &lt;/SelectGroup&gt; &lt;/SelectContent&gt; &lt;/Select&gt;   ","version":"Next","tagName":"h3"},{"title":"Disabled State​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#disabled-state","content":" &lt;Select disabled&gt; &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt; &lt;SelectValue placeholder=&quot;Disabled&quot; /&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &lt;SelectItem value=&quot;option1&quot;&gt;Option 1&lt;/SelectItem&gt; &lt;SelectItem value=&quot;option2&quot;&gt;Option 2&lt;/SelectItem&gt; &lt;/SelectContent&gt; &lt;/Select&gt;   ","version":"Next","tagName":"h3"},{"title":"With Disabled Items​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#with-disabled-items","content":" &lt;Select&gt; &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt; &lt;SelectValue placeholder=&quot;Select an option&quot; /&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &lt;SelectItem value=&quot;option1&quot;&gt;Option 1&lt;/SelectItem&gt; &lt;SelectItem value=&quot;option2&quot; disabled&gt;Option 2 (Disabled)&lt;/SelectItem&gt; &lt;SelectItem value=&quot;option3&quot;&gt;Option 3&lt;/SelectItem&gt; &lt;/SelectContent&gt; &lt;/Select&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#props","content":" ","version":"Next","tagName":"h2"},{"title":"Select Component​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#select-component-1","content":" Prop\tType\tDefault\tDescriptiondefaultValue\tstring\t—\tThe default selected value. Use for uncontrolled components. value\tstring\t—\tThe controlled selected value. onValueChange\t(value: string) =&gt; void\t—\tEvent handler called when the selected value changes. disabled\tboolean\tfalse\tWhen true, prevents user interaction with the select. name\tstring\t—\tThe name of the select when used in a form. required\tboolean\tfalse\tWhether the select is required in a form. open\tboolean\t—\tControls the open state of the select dropdown. onOpenChange\t(open: boolean) =&gt; void\t—\tEvent handler called when the open state changes.  ","version":"Next","tagName":"h3"},{"title":"SelectTrigger Component​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#selecttrigger-component","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\t—\tAdditional CSS classes to apply to the trigger element. children\tReactNode\tRequired\tContent for the trigger (usually contains SelectValue). asChild\tboolean\tfalse\tWhen true, will treat child as the trigger element.  ","version":"Next","tagName":"h3"},{"title":"SelectContent Component​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#selectcontent-component","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\t—\tAdditional CSS classes to apply to the content element. children\tReactNode\tRequired\tContent for the dropdown menu. position\t'item' | 'popper'\t'popper'\tThe positioning mode for the dropdown menu. side\t'top' | 'right' | 'bottom' | 'left'\t'bottom'\tThe preferred side for the dropdown menu. sideOffset\tnumber\t0\tDistance from the trigger to the dropdown menu. align\t'start' | 'center' | 'end'\t'center'\tAlignment of the dropdown menu relative to the trigger. alignOffset\tnumber\t0\tOffset from the alignment point.  ","version":"Next","tagName":"h3"},{"title":"SelectItem Component​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#selectitem-component","content":" Prop\tType\tDefault\tDescriptionvalue\tstring\tRequired\tThe value of this item that will be selected. className\tstring\t—\tAdditional CSS classes to apply to the item. children\tReactNode\tRequired\tContent for the item. disabled\tboolean\tfalse\tWhen true, prevents this item from being selected. textValue\tstring\t—\tText used for typeahead purposes.  ","version":"Next","tagName":"h3"},{"title":"SelectLabel Component​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#selectlabel-component","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\t—\tAdditional CSS classes to apply to the label. children\tReactNode\tRequired\tContent for the label.  ","version":"Next","tagName":"h3"},{"title":"Other Components​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#other-components","content":" Similar props apply to SelectGroup, SelectValue, SelectSeparator, SelectScrollUpButton and SelectScrollDownButton.  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#typescript","content":" The component is fully typed based on Radix UI's Select primitive.  // Component Type Examples import { type SelectProps } from '@radix-ui/react-select'; // For the root Select component type CustomSelectProps = SelectProps &amp; { // Additional props }; // For other subcomponents type SelectTriggerProps = React.ComponentPropsWithoutRef&lt;typeof SelectPrimitive.Trigger&gt; &amp; { // Additional props };   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#style-overrides","content":" The component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes to any partCustomizing the theme variables in your global CSS that affect the component: --select-trigger-height--select-content-available-height  ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#extending-the-component","content":" import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; export function CustomSelect({ options, ...props }) { return ( &lt;Select {...props}&gt; &lt;SelectTrigger className=&quot;w-full&quot;&gt; &lt;SelectValue placeholder=&quot;Select an option&quot; /&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; {options.map((option) =&gt; ( &lt;SelectItem key={option.value} value={option.value}&gt; {option.label} &lt;/SelectItem&gt; ))} &lt;/SelectContent&gt; &lt;/Select&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with React Hook Form​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#integration-with-react-hook-form","content":" 'use client'; import { zodResolver } from '@hookform/resolvers/zod'; import { useForm } from 'react-hook-form'; import { z } from 'zod'; import { Button } from '@/components/ui/button'; import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, } from '@/components/ui/form'; import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from '@/components/ui/select'; const formSchema = z.object({ role: z.string({ required_error: &quot;Please select a role.&quot;, }), }); export function RoleForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), }); function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { console.log(values); } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt; &lt;FormField control={form.control} name=&quot;role&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Role&lt;/FormLabel&gt; &lt;Select onValueChange={field.onChange} defaultValue={field.value} &gt; &lt;FormControl&gt; &lt;SelectTrigger&gt; &lt;SelectValue placeholder=&quot;Select a role&quot; /&gt; &lt;/SelectTrigger&gt; &lt;/FormControl&gt; &lt;SelectContent&gt; &lt;SelectItem value=&quot;admin&quot;&gt;Admin&lt;/SelectItem&gt; &lt;SelectItem value=&quot;user&quot;&gt;User&lt;/SelectItem&gt; &lt;SelectItem value=&quot;guest&quot;&gt;Guest&lt;/SelectItem&gt; &lt;/SelectContent&gt; &lt;/Select&gt; &lt;FormDescription&gt; Select the user's role for permissions. &lt;/FormDescription&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Submit&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#integration-with-other-components","content":" import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'; import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; import { Button } from '@/components/ui/button'; export function SelectCard() { return ( &lt;Card&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Preferences&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;div className=&quot;grid gap-4&quot;&gt; &lt;div className=&quot;flex flex-col space-y-1.5&quot;&gt; &lt;label htmlFor=&quot;theme&quot;&gt;Theme&lt;/label&gt; &lt;Select&gt; &lt;SelectTrigger id=&quot;theme&quot;&gt; &lt;SelectValue placeholder=&quot;Select a theme&quot; /&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &lt;SelectItem value=&quot;light&quot;&gt;Light&lt;/SelectItem&gt; &lt;SelectItem value=&quot;dark&quot;&gt;Dark&lt;/SelectItem&gt; &lt;SelectItem value=&quot;system&quot;&gt;System&lt;/SelectItem&gt; &lt;/SelectContent&gt; &lt;/Select&gt; &lt;/div&gt; &lt;/div&gt; &lt;/CardContent&gt; &lt;CardFooter&gt; &lt;Button&gt;Save changes&lt;/Button&gt; &lt;/CardFooter&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#responsive-behavior","content":" The component responds to different screen sizes primarily through width customization:  Mobile: Use w-full on the SelectTrigger for full width buttonsTablet &amp; Desktop: Customize width as needed with w-[180px], w-1/2, etc.All Screen Sizes: The dropdown content automatically positions itself optimally based on available space  // Example of responsive width &lt;SelectTrigger className=&quot;w-full md:w-[250px] lg:w-[300px]&quot;&gt; &lt;SelectValue placeholder=&quot;Select an option&quot; /&gt; &lt;/SelectTrigger&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#accessibility","content":" The component follows these accessibility best practices:  Keyboard navigation: Tab to focus, Space/Enter to open, arrows to navigate, Enter to selectScreen reader announcements for open/close and selected itemsARIA attributes for aria-expanded, aria-controls, and aria-selectedFocus management when navigating through items and opening/closing the menuTypeahead functionality for quick selection by typingSupport for form validation and error messaging  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#implementation-details","content":" The component:  Is built on top of the Radix UI Select primitive for robust accessibilityUses Tailwind CSS for styling with dark mode supportContains animated transitions for open/close statesHandles overflow with scroll buttons when content exceeds available spaceIncludes visual indicators for selected items and focused statesSupports controlled and uncontrolled usage patterns  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#common-pitfalls","content":" Form Integration Issues: When using with React Hook Form, ensure you use the onValueChange prop for updating the form value and place the &lt;Select&gt; component within a &lt;FormControl&gt; component. Default Value Not Showing: For controlled components, make sure to pass both value and onValueChange props. For uncontrolled, use defaultValue. Focus Management: In complex forms, you may need to manage focus explicitly if users need to navigate through multiple selects in sequence. Style Conflicts: If you have global styles affecting form elements, they might interfere with the Select component. Use more specific selectors in your custom CSS if needed. Z-index Issues: If the dropdown appears behind other elements, you may need to adjust the z-index of parent containers that use position: relative.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#testing","content":" // Example test for the component import { render, screen, within } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; describe('Select', () =&gt; { it('renders the trigger correctly', () =&gt; { render( &lt;Select&gt; &lt;SelectTrigger&gt; &lt;SelectValue placeholder=&quot;Select an option&quot; /&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &lt;SelectItem value=&quot;option1&quot;&gt;Option 1&lt;/SelectItem&gt; &lt;SelectItem value=&quot;option2&quot;&gt;Option 2&lt;/SelectItem&gt; &lt;/SelectContent&gt; &lt;/Select&gt; ); expect(screen.getByText('Select an option')).toBeInTheDocument(); }); it('opens the dropdown and selects an option', async () =&gt; { const onValueChangeMock = jest.fn(); const user = userEvent.setup(); render( &lt;Select onValueChange={onValueChangeMock}&gt; &lt;SelectTrigger&gt; &lt;SelectValue placeholder=&quot;Select an option&quot; /&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &lt;SelectItem value=&quot;option1&quot;&gt;Option 1&lt;/SelectItem&gt; &lt;SelectItem value=&quot;option2&quot;&gt;Option 2&lt;/SelectItem&gt; &lt;/SelectContent&gt; &lt;/Select&gt; ); // Click the trigger to open the dropdown await user.click(screen.getByText('Select an option')); // Find and click an option const option1 = screen.getByText('Option 1'); await user.click(option1); // Check if the callback was called with the correct value expect(onValueChangeMock).toHaveBeenCalledWith('option1'); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Select Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/select#related-components","content":" Dropdown Menu: Similar to Select but for actions rather than selectionsCombobox: Combines a text input with a dropdown for searching and selecting from a listInput: Used in forms alongside the Select componentForm: Container component for building forms that include Select fields ","version":"Next","tagName":"h2"},{"title":"Footer Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/footer","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Footer Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/footer#import","content":" import Footer from '@/components/layout/footer';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Footer Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/footer#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Footer Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/footer#basic-usage","content":" The Footer component is typically used in your root layout to ensure it appears on all pages:  import Footer from '@/components/layout/footer'; export default function RootLayout({ children }) { return ( &lt;div className=&quot;flex min-h-screen flex-col&quot;&gt; {/* Header component */} &lt;main className=&quot;flex-1&quot;&gt;{children}&lt;/main&gt; &lt;Footer /&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Footer Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/footer#features","content":" Responsive design that works on all screen sizesAutomatically updates the copyright yearClean, minimal design with subtle background colorCentered text for better readability  ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Footer Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/footer#customization","content":" The Footer component currently doesn't accept props for customization. To modify the Footer:  Edit the component directly in src/components/layout/footer.tsxCreate a new component that extends or replaces the default Footer  ","version":"Next","tagName":"h2"},{"title":"Example: Adding Social Media Links​","type":1,"pageTitle":"Footer Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/footer#example-adding-social-media-links","content":" // In src/components/layout/footer.tsx export default function Footer() { return ( &lt;footer className=&quot;w-full py-6 px-6 bg-gray-100&quot;&gt; &lt;div className=&quot;container mx-auto&quot;&gt; &lt;div className=&quot;flex flex-col items-center space-y-4&quot;&gt; &lt;div className=&quot;flex space-x-4&quot;&gt; &lt;a href=&quot;https://twitter.com&quot; className=&quot;text-gray-600 hover:text-blue-500&quot;&gt; Twitter &lt;/a&gt; &lt;a href=&quot;https://github.com&quot; className=&quot;text-gray-600 hover:text-blue-500&quot;&gt; GitHub &lt;/a&gt; &lt;a href=&quot;https://linkedin.com&quot; className=&quot;text-gray-600 hover:text-blue-500&quot;&gt; LinkedIn &lt;/a&gt; &lt;/div&gt; &lt;p className=&quot;text-center text-gray-600&quot;&gt; © {new Date().getFullYear()} Next.js Starter. All rights reserved. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/footer&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Example: Creating a More Complex Footer​","type":1,"pageTitle":"Footer Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/footer#example-creating-a-more-complex-footer","content":" export default function EnhancedFooter() { return ( &lt;footer className=&quot;w-full py-12 px-6 bg-gray-800 text-white&quot;&gt; &lt;div className=&quot;container mx-auto&quot;&gt; &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-8&quot;&gt; &lt;div&gt; &lt;h3 className=&quot;text-lg font-bold mb-4&quot;&gt;About Us&lt;/h3&gt; &lt;p className=&quot;text-gray-300&quot;&gt; A brief description of your company or project. &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3 className=&quot;text-lg font-bold mb-4&quot;&gt;Quick Links&lt;/h3&gt; &lt;ul className=&quot;space-y-2&quot;&gt; &lt;li&gt;&lt;a href=&quot;/&quot; className=&quot;text-gray-300 hover:text-white&quot;&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/about&quot; className=&quot;text-gray-300 hover:text-white&quot;&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/services&quot; className=&quot;text-gray-300 hover:text-white&quot;&gt;Services&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/contact&quot; className=&quot;text-gray-300 hover:text-white&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div&gt; &lt;h3 className=&quot;text-lg font-bold mb-4&quot;&gt;Contact&lt;/h3&gt; &lt;address className=&quot;not-italic text-gray-300&quot;&gt; 123 Main Street&lt;br /&gt; City, State 12345&lt;br /&gt; Email: info@example.com&lt;br /&gt; Phone: (123) 456-7890 &lt;/address&gt; &lt;/div&gt; &lt;div&gt; &lt;h3 className=&quot;text-lg font-bold mb-4&quot;&gt;Newsletter&lt;/h3&gt; &lt;p className=&quot;text-gray-300 mb-2&quot;&gt;Subscribe to our newsletter&lt;/p&gt; &lt;div className=&quot;flex&quot;&gt; &lt;input type=&quot;email&quot; placeholder=&quot;Your email&quot; className=&quot;px-3 py-2 text-gray-800 rounded-l&quot; /&gt; &lt;button className=&quot;bg-blue-500 px-4 py-2 rounded-r&quot;&gt; Subscribe &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div className=&quot;border-t border-gray-700 mt-8 pt-8 text-center&quot;&gt; &lt;p className=&quot;text-gray-300&quot;&gt; © {new Date().getFullYear()} Next.js Starter. All rights reserved. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/footer&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Implementation Details​","type":1,"pageTitle":"Footer Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/footer#implementation-details","content":" The Footer component:  Uses a light gray background to differentiate it from the main contentContains a container for consistent widthDisplays copyright information with the current yearUses centered text for a clean appearance  ","version":"Next","tagName":"h2"},{"title":"Accessibility​","type":1,"pageTitle":"Footer Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/footer#accessibility","content":" The Footer component follows accessibility best practices:  Semantic HTML with proper footer elementSufficient color contrast for text readability ","version":"Next","tagName":"h2"},{"title":"Navigation Components","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/","content":"","keywords":"","version":"Next"},{"title":"Components in this section​","type":1,"pageTitle":"Navigation Components","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/#components-in-this-section","content":" Navigation Menu - Primary navigation component with dropdown supportMobile Navbar - Responsive navigation for mobile devices ","version":"Next","tagName":"h2"},{"title":"Header Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/header","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Header Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/header#import","content":" import Header from '@/components/layout/header';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Header Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/header#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Header Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/header#basic-usage","content":" The Header component is typically used in your root layout to ensure it appears on all pages:  import Header from '@/components/layout/header'; export default function RootLayout({ children }) { return ( &lt;div className=&quot;flex min-h-screen flex-col&quot;&gt; &lt;Header /&gt; &lt;main className=&quot;flex-1&quot;&gt;{children}&lt;/main&gt; {/* Footer component */} &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Header Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/header#features","content":" Responsive design that works on all screen sizesBrand logo/text that links to the homepageNavigation links to key pages (Home, Dashboard, Login)Clean, minimal design with subtle shadow for depth  ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Header Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/header#customization","content":" The Header component currently doesn't accept props for customization. To modify the Header:  Edit the component directly in src/components/layout/header.tsxCreate a new component that extends or replaces the default Header  ","version":"Next","tagName":"h2"},{"title":"Example: Adding a New Navigation Link​","type":1,"pageTitle":"Header Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/header#example-adding-a-new-navigation-link","content":" // In src/components/layout/header.tsx &lt;nav&gt; &lt;ul className=&quot;flex space-x-4&quot;&gt; &lt;li&gt; &lt;Link href=&quot;/&quot; className=&quot;hover:text-blue-500&quot;&gt; Home &lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link href=&quot;/dashboard&quot; className=&quot;hover:text-blue-500&quot;&gt; Dashboard &lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link href=&quot;/login&quot; className=&quot;hover:text-blue-500&quot;&gt; Login &lt;/Link&gt; &lt;/li&gt; {/* New link */} &lt;li&gt; &lt;Link href=&quot;/about&quot; className=&quot;hover:text-blue-500&quot;&gt; About &lt;/Link&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt;   ","version":"Next","tagName":"h3"},{"title":"Example: Creating a Custom Header​","type":1,"pageTitle":"Header Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/header#example-creating-a-custom-header","content":" import Header from '@/components/layout/header'; export default function CustomHeader() { return ( &lt;div className=&quot;bg-blue-600&quot;&gt; &lt;Header /&gt; &lt;div className=&quot;container mx-auto py-4 text-white&quot;&gt; &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Special Announcement&lt;/h1&gt; &lt;p&gt;This appears below the standard header as an extension.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Implementation Details​","type":1,"pageTitle":"Header Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/header#implementation-details","content":" The Header component:  Uses a white background with a subtle shadowContains a container with flexbox for layoutIncludes the site name/logo on the leftDisplays the main navigation on the rightUses hover effects on links for better user interaction  ","version":"Next","tagName":"h2"},{"title":"Accessibility​","type":1,"pageTitle":"Header Component","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/header#accessibility","content":" The Header component follows accessibility best practices:  Semantic HTML with proper heading structureKeyboard navigable linksSufficient color contrast for text readability ","version":"Next","tagName":"h2"},{"title":"Layout System","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#import","content":" For the main application layout (automatically applied to all pages):  // This is handled by Next.js App Router // No import needed as it's applied automatically   For layout utility components:  import { Flex, Grid } from '@/components/ui/layout';   For direct access to layout parts (rarely needed):  import Header from '@/components/layout/header'; import Footer from '@/components/layout/footer';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Page Content​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#basic-page-content","content":" Content placed in any page component is automatically wrapped in the RootLayout:  // app/example-page/page.tsx export default function ExamplePage() { return ( &lt;div className=&quot;container mx-auto py-8 px-4&quot;&gt; &lt;h1 className=&quot;text-2xl font-bold mb-4&quot;&gt;Page Title&lt;/h1&gt; &lt;p&gt;Your page content goes here...&lt;/p&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Using Flex for Row Layout​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#using-flex-for-row-layout","content":" import { Flex } from '@/components/ui/layout'; export default function FlexExample() { return ( &lt;Flex gap=&quot;md&quot; align=&quot;center&quot; justify=&quot;between&quot;&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Item 1&lt;/div&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Item 2&lt;/div&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Item 3&lt;/div&gt; &lt;/Flex&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Using Flex for Column Layout​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#using-flex-for-column-layout","content":" import { Flex } from '@/components/ui/layout'; export default function ColumnExample() { return ( &lt;Flex direction=&quot;column&quot; gap=&quot;lg&quot;&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Section 1&lt;/div&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Section 2&lt;/div&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Section 3&lt;/div&gt; &lt;/Flex&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Using Grid for Multi-Column Layout​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#using-grid-for-multi-column-layout","content":" import { Grid } from '@/components/ui/layout'; export default function GridExample() { return ( &lt;Grid cols={3} gap=&quot;md&quot;&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Card 1&lt;/div&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Card 2&lt;/div&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Card 3&lt;/div&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Card 4&lt;/div&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Card 5&lt;/div&gt; &lt;div className=&quot;bg-blue-100 p-4&quot;&gt;Card 6&lt;/div&gt; &lt;/Grid&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#props","content":" ","version":"Next","tagName":"h2"},{"title":"Flex Component Props​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#flex-component-props","content":" Prop\tType\tDefault\tDescriptiondirection\t'row' | 'column' | 'row-reverse' | 'column-reverse'\t'row'\tSets the direction of the flex container align\t'start' | 'center' | 'end' | 'stretch' | 'baseline'\t'start'\tControls alignment of items on the cross axis justify\t'start' | 'center' | 'end' | 'between' | 'around' | 'evenly'\t'start'\tControls alignment of items on the main axis wrap\t'nowrap' | 'wrap' | 'wrap-reverse'\t'nowrap'\tControls whether items wrap to new lines gap\t'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl'\t'none'\tSets spacing between flex items className\tstring\tundefined\tAdditional CSS classes to apply data-testid\tstring\tundefined\tTest ID for automated testing children\tReactNode\tRequired\tContent to be displayed within the flex container  ","version":"Next","tagName":"h3"},{"title":"Grid Component Props​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#grid-component-props","content":" Prop\tType\tDefault\tDescriptioncols\t1 | 2 | 3 | 4 | 5 | 6 | 12\t1\tNumber of columns in the grid gap\t'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl'\t'md'\tSets spacing between grid items className\tstring\tundefined\tAdditional CSS classes to apply data-testid\tstring\tundefined\tTest ID for automated testing children\tReactNode\tRequired\tContent to be displayed within the grid  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#typescript","content":" // Flex Component Type Definition type FlexProps = { children: ReactNode; direction?: 'row' | 'column' | 'row-reverse' | 'column-reverse'; align?: 'start' | 'center' | 'end' | 'stretch' | 'baseline'; justify?: 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly'; wrap?: 'nowrap' | 'wrap' | 'wrap-reverse'; gap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl'; className?: string; 'data-testid'?: string; }; // Grid Component Type Definition type GridProps = { children: ReactNode; cols?: 1 | 2 | 3 | 4 | 5 | 6 | 12; gap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl'; className?: string; 'data-testid'?: string; };   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#style-overrides","content":" The layout components can be customized using the following approaches:  Using the className prop to add additional Tailwind classesCreating wrapper components with preset configurationsFor the RootLayout, modifying the app/layout.tsx file directly  ","version":"Next","tagName":"h3"},{"title":"Extending the Flex Component​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#extending-the-flex-component","content":" import { Flex } from '@/components/ui/layout'; export function CardContainer({ children, className, ...props }) { return ( &lt;Flex direction=&quot;column&quot; gap=&quot;md&quot; className={`rounded-lg border border-border p-4 ${className || ''}`} {...props} &gt; {children} &lt;/Flex&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Extending the Grid Component​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#extending-the-grid-component","content":" import { Grid } from '@/components/ui/layout'; export function ResponsiveCardGrid({ children, className, ...props }) { return ( &lt;Grid cols={1} gap=&quot;md&quot; className={`sm:grid-cols-2 lg:grid-cols-3 ${className || ''}`} {...props} &gt; {children} &lt;/Grid&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#integration-with-forms","content":" import { Flex } from '@/components/ui/layout'; import { useForm } from 'react-hook-form'; import { Button } from '@/components/ui/button'; import { Input } from '@/components/ui/input'; export function ContactForm() { const { register, handleSubmit } = useForm(); const onSubmit = (data) =&gt; { console.log(data); }; return ( &lt;form onSubmit={handleSubmit(onSubmit)}&gt; &lt;Flex direction=&quot;column&quot; gap=&quot;md&quot;&gt; &lt;Input {...register('name')} placeholder=&quot;Your name&quot; /&gt; &lt;Input {...register('email')} type=&quot;email&quot; placeholder=&quot;Your email&quot; /&gt; &lt;textarea {...register('message')} className=&quot;p-2 border rounded&quot; placeholder=&quot;Your message&quot; rows={4} /&gt; &lt;Button type=&quot;submit&quot;&gt;Send Message&lt;/Button&gt; &lt;/Flex&gt; &lt;/form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#integration-with-other-components","content":" import { Flex, Grid } from '@/components/ui/layout'; import { Card } from '@/components/ui/card'; export default function DashboardPage() { return ( &lt;Flex direction=&quot;column&quot; gap=&quot;xl&quot;&gt; &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Dashboard&lt;/h1&gt; &lt;Grid cols={3} gap=&quot;lg&quot; className=&quot;sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3&quot;&gt; &lt;Card title=&quot;Analytics&quot; content=&quot;Your analytics data...&quot; /&gt; &lt;Card title=&quot;Recent Orders&quot; content=&quot;Order information...&quot; /&gt; &lt;Card title=&quot;User Statistics&quot; content=&quot;User data...&quot; /&gt; &lt;Card title=&quot;Revenue&quot; content=&quot;Revenue information...&quot; /&gt; &lt;/Grid&gt; &lt;Flex gap=&quot;md&quot; className=&quot;border-t pt-4 mt-6&quot;&gt; &lt;Button variant=&quot;outline&quot;&gt;Export Data&lt;/Button&gt; &lt;Button&gt;Refresh&lt;/Button&gt; &lt;/Flex&gt; &lt;/Flex&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#responsive-behavior","content":" The layout components respond to different screen sizes in the following ways:  Flex: By default, Flex maintains its configured behavior across all screen sizes. For responsive behavior, use the className prop with Tailwind responsive classes. &lt;Flex direction=&quot;column&quot; className=&quot;md:flex-row lg:justify-between&quot; gap=&quot;md&quot; &gt; {/* Content */} &lt;/Flex&gt; Grid: The cols prop sets a fixed number of columns. For responsive grids, use the className prop with Tailwind's responsive grid classes. &lt;Grid cols={1} gap=&quot;md&quot; className=&quot;sm:grid-cols-2 lg:grid-cols-4&quot; &gt; {/* Content */} &lt;/Grid&gt; RootLayout: Provides a responsive container that adjusts to screen size, with the Header and Footer adapting accordingly.  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#accessibility","content":" The layout components follow these accessibility best practices:  Semantic HTML elements used throughout the layout structureResponsive design ensures content is accessible on various screen sizesHeader includes proper navigation landmarks for screen readersKeyboard navigation is supported in the Header dropdown menuFocus management for dropdown menu interactionColor contrast meets WCAG AA standards  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#implementation-details","content":" The layout system:  Uses Next.js 14's App Router for overall page structureEmploys the cn() utility for conditional class mergingConverts semantic props (like gap=&quot;md&quot;) to Tailwind classesSpread props to allow HTML attributes to pass throughSupports data-testid for testing componentsUses client-side components for interactive elements (Header) and server components for static partsImplements theme switching via ThemeProvider context  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#common-pitfalls","content":" Incorrect gap values: The gap prop only accepts predefined values ('none', 'xs', 'sm', 'md', 'lg', 'xl'). For custom gaps, use the className prop with Tailwind gap utilities. // ❌ This won't work &lt;Flex gap=&quot;2xl&quot;&gt;...&lt;/Flex&gt; // ✅ Do this instead &lt;Flex className=&quot;gap-10&quot;&gt;...&lt;/Flex&gt; Limited grid columns: The cols prop is limited to specific values (1-6, 12). For other values, use direct Tailwind classes. // ❌ This won't work &lt;Grid cols={7}&gt;...&lt;/Grid&gt; // ✅ Do this instead &lt;Grid className=&quot;grid-cols-7&quot;&gt;...&lt;/Grid&gt; Missing RootLayout CSS: The RootLayout depends on global styles from @/styles/globals.css. Make sure this import is present in app/layout.tsx. Theme compatibility: When using dark mode, ensure components inside Flex/Grid containers use theme-compatible color classes (bg-background, text-foreground, etc.) rather than fixed colors.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#testing","content":" // Example test for the Flex component import { render, screen } from '@testing-library/react'; import { Flex } from '@/components/ui/layout'; describe('Flex', () =&gt; { it('renders children correctly', () =&gt; { render( &lt;Flex data-testid=&quot;flex-container&quot;&gt; &lt;div&gt;Item 1&lt;/div&gt; &lt;div&gt;Item 2&lt;/div&gt; &lt;/Flex&gt; ); const container = screen.getByTestId('flex-container'); expect(container).toHaveClass('flex'); expect(container).toHaveClass('flex-row'); expect(container.children.length).toBe(2); }); it('applies custom gap class correctly', () =&gt; { render( &lt;Flex gap=&quot;lg&quot; data-testid=&quot;flex-container&quot;&gt; &lt;div&gt;Content&lt;/div&gt; &lt;/Flex&gt; ); const container = screen.getByTestId('flex-container'); expect(container).toHaveClass('gap-6'); }); it('applies custom className prop', () =&gt; { render( &lt;Flex className=&quot;custom-class&quot; data-testid=&quot;flex-container&quot;&gt; &lt;div&gt;Content&lt;/div&gt; &lt;/Flex&gt; ); const container = screen.getByTestId('flex-container'); expect(container).toHaveClass('custom-class'); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Layout System","url":"/nextjs-ts-tailwind-supabase-starter/components/layout/#related-components","content":" Header: The top navigation bar used in the RootLayoutFooter: The footer component used in the RootLayoutCard: Often used within Flex or Grid to display content blocksContainer: Can be used with Flex or Grid for additional padding/margin constraints ","version":"Next","tagName":"h2"},{"title":"Textarea Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#import","content":" import { Textarea } from '@/components/ui/textarea';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#basic-usage","content":" &lt;Textarea placeholder=&quot;Type your message here.&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"Disabled State​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#disabled-state","content":" &lt;Textarea disabled placeholder=&quot;This textarea is disabled&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"With Label​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#with-label","content":" import { Label } from '@/components/ui/label'; &lt;div className=&quot;grid w-full gap-1.5&quot;&gt; &lt;Label htmlFor=&quot;message&quot;&gt;Your message&lt;/Label&gt; &lt;Textarea placeholder=&quot;Type your message here.&quot; id=&quot;message&quot; /&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"With Helper Text​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#with-helper-text","content":" import { Label } from '@/components/ui/label'; &lt;div className=&quot;grid w-full gap-1.5&quot;&gt; &lt;Label htmlFor=&quot;message&quot;&gt;Your message&lt;/Label&gt; &lt;Textarea placeholder=&quot;Type your message here.&quot; id=&quot;message&quot; /&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt; Your message will be copied to the support team. &lt;/p&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"With Button​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#with-button","content":" import { Button } from '@/components/ui/button'; &lt;div className=&quot;grid w-full gap-2&quot;&gt; &lt;Textarea placeholder=&quot;Type your message here.&quot; /&gt; &lt;Button&gt;Send message&lt;/Button&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the textarea placeholder\tstring\tundefined\tPlaceholder text displayed when textarea is empty disabled\tboolean\tfalse\tWhen true, prevents the user from interacting with the textarea rows\tnumber\tundefined\tSpecifies the visible number of lines value\tstring\tundefined\tThe value of the textarea defaultValue\tstring\tundefined\tThe default value of the textarea onChange\tfunction\tundefined\tFunction called when the value changes name\tstring\tundefined\tThe name attribute for the textarea id\tstring\tundefined\tThe id attribute for the textarea required\tboolean\tfalse\tSpecifies that the textarea field must be filled out readOnly\tboolean\tfalse\tWhen true, makes the textarea not editable  All standard HTML textarea attributes are also supported.  ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#typescript","content":" import { Textarea } from '@/components/ui/textarea'; // The Textarea component is typed using React.ComponentProps&lt;'textarea'&gt; // which includes all standard HTML textarea attributes   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#style-overrides","content":" The component can be customized using the following approaches:  Using the className prop to add additional Tailwind classesModifying the base styles in the component implementation  The default styles for the Textarea component include:  'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm'   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#extending-the-component","content":" import { Textarea } from '@/components/ui/textarea'; import { cn } from '@/lib/utils'; export function AutoResizeTextarea({ className, ...props }) { const textareaRef = React.useRef&lt;HTMLTextAreaElement&gt;(null); React.useEffect(() =&gt; { const textarea = textareaRef.current; if (textarea) { const adjustHeight = () =&gt; { textarea.style.height = 'auto'; textarea.style.height = `${textarea.scrollHeight}px`; }; textarea.addEventListener('input', adjustHeight); adjustHeight(); // Initial adjustment return () =&gt; textarea.removeEventListener('input', adjustHeight); } }, []); return ( &lt;Textarea ref={textareaRef} {...props} className={cn('overflow-hidden', className)} /&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with React Hook Form​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#integration-with-react-hook-form","content":" import { useForm } from 'react-hook-form'; import { zodResolver } from '@hookform/resolvers/zod'; import * as z from 'zod'; import { Textarea } from '@/components/ui/textarea'; import { Button } from '@/components/ui/button'; import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, } from '@/components/ui/form'; const formSchema = z.object({ message: z.string().min(10, { message: 'Message must be at least 10 characters.', }), }); export function MessageForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { message: '', }, }); function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { console.log(values); } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt; &lt;FormField control={form.control} name=&quot;message&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Message&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Textarea placeholder=&quot;Type your message here...&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormDescription&gt; Please provide a detailed message. &lt;/FormDescription&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Submit&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#integration-with-other-components","content":" import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'; import { Label } from '@/components/ui/label'; import { Button } from '@/components/ui/button'; import { Textarea } from '@/components/ui/textarea'; export function FeedbackCard() { return ( &lt;Card className=&quot;w-full max-w-md&quot;&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Provide Feedback&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;div className=&quot;grid w-full gap-4&quot;&gt; &lt;div className=&quot;grid grid-cols-4 items-center gap-4&quot;&gt; &lt;Label htmlFor=&quot;feedback&quot; className=&quot;text-right&quot;&gt; Feedback &lt;/Label&gt; &lt;Textarea id=&quot;feedback&quot; placeholder=&quot;Tell us what you think...&quot; className=&quot;col-span-3&quot; /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/CardContent&gt; &lt;CardFooter className=&quot;flex justify-end&quot;&gt; &lt;Button&gt;Submit&lt;/Button&gt; &lt;/CardFooter&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#responsive-behavior","content":" The component responds to different screen sizes in the following ways:  Mobile: Uses text-base font size with standard padding for touch targetsTablet/Desktop: Uses text-sm font size (applied with the md: breakpoint) while maintaining the same padding and layoutAll Devices: Maintains full width and consistent padding to ensure usability across devices  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#accessibility","content":" The component follows these accessibility best practices:  Supports proper labeling when used with the Label componentMaintains proper contrast ratios for text and bordersUses disabled attribute for disabled state which is correctly announced by screen readersProvides visual focus styles for keyboard navigationSupports aria attributes through spread props  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#implementation-details","content":" The component:  Uses React's forwardRef to properly forward refs to the underlying textarea elementLeverages the cn utility for className merging with TailwindExtends the native HTML textarea attributes through React.ComponentPropsProvides a responsive design with different text sizes for mobile and desktopApplies consistent focus styles that match other form components in the library  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#common-pitfalls","content":" Missing Labels: Always associate a Label component with your Textarea for accessibilityFixed Height Issues: The default minimum height might cause layout issues in some contexts; use the className prop to override if neededForm Integration: When using with React Hook Form, ensure you spread the entire field object to properly connect validation and stateOverflowing Content: For very large text inputs, consider using overflow-auto or implementing the AutoResizeTextarea example  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#testing","content":" // Example test for the Textarea component import { render, screen } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { Textarea } from '@/components/ui/textarea'; describe('Textarea', () =&gt; { it('renders correctly', () =&gt; { render(&lt;Textarea placeholder=&quot;Test placeholder&quot; /&gt;); expect(screen.getByPlaceholderText('Test placeholder')).toBeInTheDocument(); }); it('handles user input', async () =&gt; { const user = userEvent.setup(); const handleChange = jest.fn(); render(&lt;Textarea onChange={handleChange} /&gt;); const textarea = screen.getByRole('textbox'); await user.type(textarea, 'Hello, world!'); expect(handleChange).toHaveBeenCalled(); expect(textarea).toHaveValue('Hello, world!'); }); it('respects disabled state', async () =&gt; { const user = userEvent.setup(); const handleChange = jest.fn(); render(&lt;Textarea disabled onChange={handleChange} /&gt;); const textarea = screen.getByRole('textbox'); expect(textarea).toBeDisabled(); await user.type(textarea, 'Test'); expect(handleChange).not.toHaveBeenCalled(); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Textarea Component","url":"/nextjs-ts-tailwind-supabase-starter/components/forms/textarea#related-components","content":" Input: For single-line text input fieldsForm: For creating cohesive forms with validationLabel: For labeling form elements including textarea ","version":"Next","tagName":"h2"},{"title":"ThemeSwitch Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#import","content":" import { ThemeSwitch } from '@/components/ui/theme-switch';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#basic-usage","content":" &lt;ThemeSwitch /&gt;   The component doesn't require any props as it uses the theme context internally.  ","version":"Next","tagName":"h3"},{"title":"Within Layout Components​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#within-layout-components","content":" import { ThemeSwitch } from '@/components/ui/theme-switch'; export function Header() { return ( &lt;header className=&quot;flex items-center justify-between p-4 border-b&quot;&gt; &lt;Logo /&gt; &lt;nav className=&quot;flex items-center gap-4&quot;&gt; {/* Other navigation items */} &lt;ThemeSwitch /&gt; &lt;/nav&gt; &lt;/header&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"With Custom Positioning​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#with-custom-positioning","content":" &lt;div className=&quot;fixed bottom-4 right-4 z-50&quot;&gt; &lt;ThemeSwitch /&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#props","content":" The ThemeSwitch component doesn't accept any props as it's designed to be a self-contained component that works with the ThemeProvider context.  ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#typescript","content":" The component doesn't have a specific props interface since it doesn't accept any props.  // The component uses the theme context internally import { useTheme } from '@/contexts/theme-provider'; // Theme type from the context type Theme = 'dark' | 'light' | 'system';   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#style-overrides","content":" Since ThemeSwitch is based on the Button component, you can extend it by creating a custom wrapper:  import { ThemeSwitch } from '@/components/ui/theme-switch'; export function CustomThemeSwitch() { return ( &lt;div className=&quot;p-2 bg-accent rounded-full&quot;&gt; &lt;ThemeSwitch /&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#extending-the-component","content":" If you need to add functionality or change the behavior:  import { useTheme } from '@/contexts/theme-provider'; import { Button } from '@/components/ui/button'; import { Sun, Moon, Laptop } from 'lucide-react'; export function ExtendedThemeSwitch() { const { theme, setTheme } = useTheme(); // Added cycling through all three theme options const cycleTheme = () =&gt; { if (theme === 'dark') { setTheme('system'); } else if (theme === 'light') { setTheme('dark'); } else { setTheme('light'); } }; return ( &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; onClick={cycleTheme}&gt; &lt;Sun className=&quot;h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:scale-0 dark:-rotate-90&quot; /&gt; &lt;Moon className=&quot;absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100&quot; /&gt; &lt;Laptop className=&quot;absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all data-[theme=system]:rotate-0 data-[theme=system]:scale-100&quot; /&gt; &lt;span className=&quot;sr-only&quot;&gt;Toggle theme&lt;/span&gt; &lt;/Button&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Navbar​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#integration-with-navbar","content":" import { ThemeSwitch } from '@/components/ui/theme-switch'; export function Navbar() { return ( &lt;nav className=&quot;flex items-center justify-between px-4 py-3 border-b&quot;&gt; &lt;div className=&quot;flex items-center gap-6&quot;&gt; &lt;Logo /&gt; &lt;NavLinks /&gt; &lt;/div&gt; &lt;div className=&quot;flex items-center gap-4&quot;&gt; &lt;UserDropdown /&gt; &lt;ThemeSwitch /&gt; &lt;/div&gt; &lt;/nav&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Settings Form​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#integration-with-settings-form","content":" import { ThemeSwitch } from '@/components/ui/theme-switch'; import { useTheme } from '@/contexts/theme-provider'; export function UserSettingsForm() { const { theme } = useTheme(); return ( &lt;form onSubmit={handleSubmit(onSubmit)}&gt; &lt;div className=&quot;space-y-4&quot;&gt; {/* Other form fields */} &lt;div className=&quot;flex items-center justify-between&quot;&gt; &lt;div&gt; &lt;h4 className=&quot;text-sm font-medium&quot;&gt;Theme Preference&lt;/h4&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt; Current theme: {theme.charAt(0).toUpperCase() + theme.slice(1)} &lt;/p&gt; &lt;/div&gt; &lt;ThemeSwitch /&gt; &lt;/div&gt; &lt;Button type=&quot;submit&quot;&gt;Save Settings&lt;/Button&gt; &lt;/div&gt; &lt;/form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#responsive-behavior","content":" The component is designed to work well across all device sizes without special responsiveness considerations:  Mobile: Works well as a compact icon buttonTablet &amp; Desktop: Same compact appearance, fits well in navigation barsPositioning: Can be placed in headers, settings panels, or as a floating button  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#accessibility","content":" The ThemeSwitch component follows these accessibility best practices:  Screen reader support: Uses sr-only class for descriptive text that is visible to screen readersKeyboard navigation: Fully operable via keyboard as it's based on the Button componentARIA attributes: Inherits appropriate button ARIA attributes from the Button componentMotion preferences: Animations respect prefers-reduced-motion media query via Tailwind's defaultsColor contrast: Works with the theme system to ensure proper contrast in both light and dark modes  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#implementation-details","content":" The component:  Uses the useTheme hook from the ThemeProvider context to access and update the current themeToggles between 'light' and 'dark' themes (doesn't include 'system' in the toggle cycle)Leverages CSS transitions for smooth icon animations when switching themesUses absolute positioning to overlay the sun and moon icons in the same spaceUtilizes the ghost button variant for a minimal appearance that works in various UI contextsHandles theme persistence through localStorage in the ThemeProvider  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#common-pitfalls","content":" Missing ThemeProvider: The component must be used within a ThemeProvider context or it will throw an errorTheme Initialization Flicker: To prevent theme flickering on page load, ensure the ThemeProvider is properly set up with server-side rendering considerationsIcon Sizing: The component uses fixed icon sizes, which may need adjustment if used in contexts with different spacing requirementsDark Mode Class: Ensure your Tailwind configuration includes the darkMode: 'class' setting for the component to work correctly  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#testing","content":" // Example test for the ThemeSwitch component import { render, screen } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { ThemeSwitch } from '@/components/ui/theme-switch'; import { ThemeProvider } from '@/contexts/theme-provider'; describe('ThemeSwitch', () =&gt; { it('renders correctly', () =&gt; { render( &lt;ThemeProvider&gt; &lt;ThemeSwitch /&gt; &lt;/ThemeProvider&gt; ); expect(screen.getByRole('button')).toBeInTheDocument(); expect(screen.getByText('Toggle theme')).toBeInTheDocument(); }); it('toggles theme when clicked', async () =&gt; { const user = userEvent.setup(); render( &lt;ThemeProvider defaultTheme=&quot;light&quot;&gt; &lt;ThemeSwitch /&gt; &lt;/ThemeProvider&gt; ); // Initial state check const documentElement = document.documentElement; expect(documentElement).toHaveClass('light'); // Click the button await user.click(screen.getByRole('button')); // Check if theme changed expect(documentElement).toHaveClass('dark'); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"ThemeSwitch Component","url":"/nextjs-ts-tailwind-supabase-starter/components/style/theme-switch#related-components","content":" Button: The base component that ThemeSwitch extendsDropdown Menu: Often used alongside ThemeSwitch in navigation components ","version":"Next","tagName":"h2"},{"title":"Basic UI Components","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/","content":"","keywords":"","version":"Next"},{"title":"Components in this section​","type":1,"pageTitle":"Basic UI Components","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/#components-in-this-section","content":" Alert - Used to display important messages to the userAvatar - Displays user or entity profile images with fallbacksBadge - Small status descriptors for UI elementsButton - Interactive button elements in various stylesCalendar - Date picking interface componentCard - Container component for related contentContainer - Layout component for proper content widthContent Card - Special card variant for content displayDialog - Modal dialog component for focused interactionsDropdown Menu - Menu that appears from a trigger elementPopover - Small overlay content that appears near an elementSearch Input - Specialized input for search interfacesTable - Data table component for structured informationTabs - Switchable content sectionsToast - Temporary notifications that appear on the screen ","version":"Next","tagName":"h2"},{"title":"NavbarMobile Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#import","content":" import NavbarMobile from '@/components/navigation/navbar-mobile';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#basic-usage","content":" // In a layout component import NavbarMobile from '@/components/navigation/navbar-mobile'; export default function MobileLayout({ children }: { children: React.ReactNode }) { return ( &lt;&gt; &lt;main&gt;{children}&lt;/main&gt; &lt;NavbarMobile /&gt; &lt;/&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"With Custom Navigation Items​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#with-custom-navigation-items","content":" import NavbarMobile from '@/components/navigation/navbar-mobile'; import { Home, Settings, User, ShoppingCart } from 'lucide-react'; // Note: This is for illustration. The component currently doesn't support custom items through props. // You would need to modify the component source to implement this functionality.   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#props","content":" Currently, NavbarMobile doesn't accept any props as it has a fixed set of navigation items defined internally. To customize the navigation items, you would need to modify the component source code.  The internal NavItem component accepts the following props:  Prop\tType\tDefault\tDescriptionhref\tstring\tRequired\tThe URL to navigate to when the item is clicked icon\tJSX.Element\tRequired\tThe SVG icon element to display for the navigation item label\tstring\tRequired\tThe text label for the navigation item  ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#typescript","content":" // Component Type Definition interface NavItemProps { href: string; icon: JSX.Element; label: string; } const NavItem: FC&lt;NavItemProps&gt; = ({ href, icon, label }) =&gt; { // Component implementation }; const NavbarMobile: FC = () =&gt; { // Component implementation };   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#style-overrides","content":" The component can be customized using the following approaches:  Directly modifying the Tailwind classes in the component: For the main container: className=&quot;fixed bottom-0 left-0 z-50 w-full h-16 bg-white border-t border-gray-200 dark:bg-gray-700 dark:border-gray-600&quot;For the grid container: className=&quot;grid h-full max-w-lg grid-cols-4 mx-auto font-medium&quot;For individual navigation items: Modify styles in the NavItem component Extending the component with additional Tailwind classes:  import NavbarMobile from '@/components/navigation/navbar-mobile'; // Create a wrapper component with additional styles export function CustomNavbarMobile() { return ( &lt;div className=&quot;custom-container&quot;&gt; &lt;NavbarMobile /&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#extending-the-component","content":" To extend the component with custom navigation items, you would need to create a new component based on the original:  import { FC } from 'react'; import Link from 'next/link'; import { usePathname } from 'next/navigation'; import { Home, Settings, Users, CreditCard } from 'lucide-react'; interface NavItemProps { href: string; icon: JSX.Element; label: string; } const NavItem: FC&lt;NavItemProps&gt; = ({ href, icon, label }) =&gt; { const pathname = usePathname(); const isActive = pathname === href; return ( &lt;Link href={href} className=&quot;inline-flex flex-col items-center justify-center px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group&quot; &gt; &lt;div className={`w-5 h-5 mb-2 ${isActive ? 'text-blue-600 dark:text-blue-500' : 'text-gray-500 dark:text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-500'}`} &gt; {icon} &lt;/div&gt; &lt;span className={`text-sm ${isActive ? 'text-blue-600 dark:text-blue-500' : 'text-gray-500 dark:text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-500'}`} &gt; {label} &lt;/span&gt; &lt;/Link&gt; ); }; // Custom version with different navigation items const CustomNavbarMobile: FC = () =&gt; { return ( &lt;div className=&quot;fixed bottom-0 left-0 z-50 w-full h-16 bg-white border-t border-gray-200 dark:bg-gray-700 dark:border-gray-600&quot;&gt; &lt;div className=&quot;grid h-full max-w-lg grid-cols-4 mx-auto font-medium&quot;&gt; &lt;NavItem href=&quot;/&quot; icon={&lt;Home className=&quot;w-full h-full&quot; /&gt;} label=&quot;Home&quot; /&gt; &lt;NavItem href=&quot;/dashboard&quot; icon={&lt;CreditCard className=&quot;w-full h-full&quot; /&gt;} label=&quot;Dashboard&quot; /&gt; &lt;NavItem href=&quot;/team&quot; icon={&lt;Users className=&quot;w-full h-full&quot; /&gt;} label=&quot;Team&quot; /&gt; &lt;NavItem href=&quot;/settings&quot; icon={&lt;Settings className=&quot;w-full h-full&quot; /&gt;} label=&quot;Settings&quot; /&gt; &lt;/div&gt; &lt;/div&gt; ); }; export default CustomNavbarMobile;   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with React Hook Form​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#integration-with-react-hook-form","content":" The NavbarMobile component is a navigation element and doesn't directly integrate with forms. However, you can use it in a layout that contains forms:  import NavbarMobile from '@/components/navigation/navbar-mobile'; import { useForm } from 'react-hook-form'; export default function FormPage() { const { register, handleSubmit } = useForm(); const onSubmit = (data) =&gt; { console.log(data); }; return ( &lt;&gt; &lt;div className=&quot;p-4 pb-20&quot;&gt; {/* Add padding at the bottom to prevent form elements from being hidden by the navbar */} &lt;form onSubmit={handleSubmit(onSubmit)}&gt; &lt;input {...register('name')} className=&quot;w-full p-2 border rounded&quot; /&gt; &lt;button type=&quot;submit&quot; className=&quot;mt-4 p-2 bg-blue-500 text-white rounded&quot;&gt; Submit &lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;NavbarMobile /&gt; &lt;/&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#integration-with-other-components","content":" import NavbarMobile from '@/components/navigation/navbar-mobile'; import Header from '@/components/layout/header'; export default function MobileLayout({ children }: { children: React.ReactNode }) { return ( &lt;div className=&quot;min-h-screen flex flex-col&quot;&gt; &lt;Header /&gt; &lt;main className=&quot;flex-1 pb-16&quot;&gt; {/* Add padding bottom to prevent content from being hidden by navbar */} {children} &lt;/main&gt; &lt;NavbarMobile /&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#responsive-behavior","content":" The NavbarMobile component is specifically designed for mobile devices and is typically used in a mobile-specific layout. For a fully responsive navigation system, you would need to implement conditional rendering based on screen size:  import { useEffect, useState } from 'react'; import NavbarMobile from '@/components/navigation/navbar-mobile'; import DesktopNavbar from '@/components/navigation/desktop-navbar'; export default function ResponsiveLayout({ children }: { children: React.ReactNode }) { const [isMobile, setIsMobile] = useState(false); useEffect(() =&gt; { const checkIfMobile = () =&gt; { setIsMobile(window.innerWidth &lt; 768); }; // Initial check checkIfMobile(); // Add event listener window.addEventListener('resize', checkIfMobile); // Cleanup return () =&gt; window.removeEventListener('resize', checkIfMobile); }, []); return ( &lt;div className=&quot;min-h-screen flex flex-col&quot;&gt; {!isMobile &amp;&amp; &lt;DesktopNavbar /&gt;} &lt;main className={`flex-1 ${isMobile ? 'pb-16' : ''}`}&gt; {children} &lt;/main&gt; {isMobile &amp;&amp; &lt;NavbarMobile /&gt;} &lt;/div&gt; ); }   The component responds to different screen sizes in the following ways:  Mobile: Fixed to the bottom of the screen with a height of 4rem (16px) and full width. Navigation items are displayed in a 4-column grid with icons and text labels.Tablet/Desktop: The component is not intended for tablet or desktop views. You should conditionally render it based on screen size and provide alternative navigation for larger screens.  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#accessibility","content":" The component follows these accessibility best practices:  Clear Visual Indication: Active navigation items are highlighted with a blue color to provide clear visual feedback.Semantic HTML: Uses proper HTML elements like nav (implied in the parent component) and proper links with the Next.js Link component.Hover States: Provides visual feedback on hover for interactive elements.SVG Icons with aria-hidden: Icons are properly marked with aria-hidden=&quot;true&quot; to prevent screen readers from announcing them.  For improved accessibility, consider the following enhancements:  Add aria-label=&quot;Mobile navigation&quot; to the main container div to provide context for screen readers.Ensure SVG icons have proper role=&quot;img&quot; and appropriate aria-label attributes if they convey meaning.  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#implementation-details","content":" The component:  Uses Next.js usePathname() hook to determine the current active route.Implements a nested NavItem component to encapsulate the logic for individual navigation items.Handles both light and dark mode with appropriate color classes.Has fixed positioning to ensure the navigation remains accessible regardless of scroll position.Provides visual feedback for active and hover states.  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#common-pitfalls","content":" Bottom Padding: Content may be obscured by the fixed navbar. Always add appropriate bottom padding (pb-16 or 4rem) to your main content container.Conflicting z-index: The navbar uses z-50 - ensure other fixed elements don't use conflicting z-index values.Dark Mode Conflicts: If using a custom dark mode implementation, you may need to adjust the dark mode classes.Navigation State Management: For more complex applications, you might need to integrate with state management like Redux or Context API for navigation state.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#testing","content":" // Example test for the component import { render, screen } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import NavbarMobile from '@/components/navigation/navbar-mobile'; import { usePathname } from 'next/navigation'; // Mock the usePathname hook jest.mock('next/navigation', () =&gt; ({ usePathname: jest.fn(), })); describe('NavbarMobile', () =&gt; { it('renders all navigation items', () =&gt; { // Mock the usePathname to return '/' (home) (usePathname as jest.Mock).mockReturnValue('/'); render(&lt;NavbarMobile /&gt;); expect(screen.getByText('Home')).toBeInTheDocument(); expect(screen.getByText('Wallet')).toBeInTheDocument(); expect(screen.getByText('Settings')).toBeInTheDocument(); expect(screen.getByText('Profile')).toBeInTheDocument(); }); it('highlights the active navigation item', () =&gt; { // Mock the usePathname to return '/profile' (usePathname as jest.Mock).mockReturnValue('/profile'); render(&lt;NavbarMobile /&gt;); // The Profile link should have the active color class const profileLink = screen.getByText('Profile'); const profileIcon = profileLink.previousSibling; expect(profileLink).toHaveClass('text-blue-600'); expect(profileIcon).toHaveClass('text-blue-600'); // Other links should not have the active color class const homeLink = screen.getByText('Home'); expect(homeLink).not.toHaveClass('text-blue-600'); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"NavbarMobile Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navbar-mobile#related-components","content":" Header: Used for top navigation, typically in desktop layoutsSidebar: Used for vertical navigation, typically in desktop layoutsNavLink: A styled link component that can be used for navigation items ","version":"Next","tagName":"h2"},{"title":"Typography Components","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#import","content":" import { Heading, Text, Lead, Blockquote, InlineCode } from '@/components/ui/typography';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Heading Component​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#heading-component","content":" Use the Heading component for all heading levels (h1-h6) with consistent styling.  &lt;Heading&gt;Default H1 Heading&lt;/Heading&gt; &lt;Heading as=&quot;h2&quot;&gt;H2 Heading&lt;/Heading&gt; &lt;Heading as=&quot;h3&quot; size=&quot;h3&quot; variant=&quot;primary&quot;&gt;H3 Primary Heading&lt;/Heading&gt;   ","version":"Next","tagName":"h3"},{"title":"Text Component​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#text-component","content":" Use the Text component for paragraphs with various size, weight, and color options.  &lt;Text&gt;Default paragraph text&lt;/Text&gt; &lt;Text size=&quot;lg&quot; weight=&quot;medium&quot;&gt;Larger medium-weight text&lt;/Text&gt; &lt;Text variant=&quot;muted&quot; size=&quot;sm&quot;&gt;Small muted text&lt;/Text&gt;   ","version":"Next","tagName":"h3"},{"title":"Lead Component​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#lead-component","content":" Use the Lead component for introductory or emphasized paragraphs.  &lt;Lead&gt;This text stands out as an introduction to a section.&lt;/Lead&gt;   ","version":"Next","tagName":"h3"},{"title":"Blockquote Component​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#blockquote-component","content":" Use the Blockquote component for quotations.  &lt;Blockquote&gt; &quot;Typography is the art and technique of arranging type to make written language legible, readable, and appealing.&quot; &lt;/Blockquote&gt;   ","version":"Next","tagName":"h3"},{"title":"InlineCode Component​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#inlinecode-component","content":" Use the InlineCode component for code references within text.  &lt;Text&gt;Install using &lt;InlineCode&gt;npm install @package/name&lt;/InlineCode&gt;&lt;/Text&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#props","content":" ","version":"Next","tagName":"h2"},{"title":"Heading Props​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#heading-props","content":" Prop\tType\tDefault\tDescriptionas\t'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\t'h1'\tHTML heading element to render size\t'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\tSame as as prop\tControls the text size, independent of the semantic level variant\t'default' | 'muted' | 'primary' | 'secondary'\t'default'\tColor variant of the heading className\tstring\t-\tAdditional CSS classes children\tReactNode\tRequired\tContent to be rendered within the heading  ","version":"Next","tagName":"h3"},{"title":"Text Props​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#text-props","content":" Prop\tType\tDefault\tDescriptionsize\t'xs' | 'sm' | 'md' | 'lg' | 'xl'\t'md'\tFont size of the text weight\t'light' | 'normal' | 'medium' | 'semibold' | 'bold'\t'normal'\tFont weight of the text variant\t'default' | 'muted' | 'primary' | 'secondary'\t'default'\tColor variant of the text className\tstring\t-\tAdditional CSS classes children\tReactNode\tRequired\tContent to be rendered within the paragraph  ","version":"Next","tagName":"h3"},{"title":"Lead, Blockquote, and InlineCode Props​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#lead-blockquote-and-inlinecode-props","content":" Component\tPropsLead\tAccepts standard HTML paragraph attributes plus className Blockquote\tAccepts standard HTML blockquote attributes plus className InlineCode\tAccepts standard HTML code attributes plus className  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#typescript","content":" // Heading Component export interface HeadingProps extends Omit&lt;React.HTMLAttributes&lt;HTMLHeadingElement&gt;, 'color'&gt;, VariantProps&lt;typeof headingVariants&gt; { as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'; children: ReactNode; } // Text Component export interface TextProps extends Omit&lt;React.HTMLAttributes&lt;HTMLParagraphElement&gt;, 'color'&gt;, VariantProps&lt;typeof textVariants&gt; { children: ReactNode; } // Lead, Blockquote, and InlineCode use standard HTML element props // with React.HTMLAttributes for their respective elements   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#style-overrides","content":" All typography components accept a className prop for additional Tailwind classes:  &lt;Heading className=&quot;my-8 text-blue-600 underline&quot;&gt;Custom Styled Heading&lt;/Heading&gt; &lt;Text className=&quot;italic first-letter:text-3xl first-letter:font-bold&quot;&gt; Custom styled paragraph with drop cap effect. &lt;/Text&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending Components​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#extending-components","content":" import { Heading, Text } from '@/components/ui/typography'; export function SectionTitle({ className, children, ...props }) { return ( &lt;Heading as=&quot;h2&quot; variant=&quot;primary&quot; className={`border-b pb-2 ${className || ''}`} {...props} &gt; {children} &lt;/Heading&gt; ); } export function ErrorText({ children, ...props }) { return ( &lt;Text size=&quot;sm&quot; variant=&quot;primary&quot; className=&quot;text-red-600&quot; {...props} &gt; {children} &lt;/Text&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#integration-with-forms","content":" import { useForm } from 'react-hook-form'; import { Heading, Text } from '@/components/ui/typography'; import { Button } from '@/components/ui/button'; import { Input } from '@/components/ui/input'; export function LoginForm() { const { register, handleSubmit, formState: { errors } } = useForm(); return ( &lt;form onSubmit={handleSubmit(onSubmit)}&gt; &lt;Heading as=&quot;h2&quot; size=&quot;h3&quot;&gt;Login to Your Account&lt;/Heading&gt; &lt;Text variant=&quot;muted&quot; className=&quot;mb-6&quot;&gt;Enter your credentials below&lt;/Text&gt; &lt;div className=&quot;space-y-4&quot;&gt; &lt;div&gt; &lt;Text as=&quot;label&quot; htmlFor=&quot;email&quot; size=&quot;sm&quot; weight=&quot;medium&quot;&gt;Email&lt;/Text&gt; &lt;Input id=&quot;email&quot; {...register('email', { required: true })} /&gt; {errors.email &amp;&amp; &lt;Text size=&quot;xs&quot; className=&quot;text-red-500&quot;&gt;Email is required&lt;/Text&gt;} &lt;/div&gt; &lt;div&gt; &lt;Text as=&quot;label&quot; htmlFor=&quot;password&quot; size=&quot;sm&quot; weight=&quot;medium&quot;&gt;Password&lt;/Text&gt; &lt;Input id=&quot;password&quot; type=&quot;password&quot; {...register('password', { required: true })} /&gt; {errors.password &amp;&amp; &lt;Text size=&quot;xs&quot; className=&quot;text-red-500&quot;&gt;Password is required&lt;/Text&gt;} &lt;/div&gt; &lt;Button type=&quot;submit&quot;&gt;Login&lt;/Button&gt; &lt;/div&gt; &lt;/form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#integration-with-other-components","content":" import { Card, CardContent, CardHeader, CardFooter } from '@/components/ui/card'; import { Heading, Text, Blockquote } from '@/components/ui/typography'; export function TestimonialCard({ quote, author, role }) { return ( &lt;Card&gt; &lt;CardHeader&gt; &lt;Heading as=&quot;h3&quot; size=&quot;h5&quot;&gt;Customer Testimonial&lt;/Heading&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;Blockquote&gt;{quote}&lt;/Blockquote&gt; &lt;/CardContent&gt; &lt;CardFooter&gt; &lt;Text weight=&quot;semibold&quot;&gt;{author}&lt;/Text&gt; &lt;Text size=&quot;sm&quot; variant=&quot;muted&quot;&gt;{role}&lt;/Text&gt; &lt;/CardFooter&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#responsive-behavior","content":" The typography components have built-in responsive behavior:  Heading: Font sizes automatically adjust for different screen sizes: // In the component definition: // h1: 'text-4xl md:text-5xl lg:text-6xl', // h2: 'text-3xl md:text-4xl lg:text-5xl', // ...etc Mobile: Headings start with smaller base sizes (text-4xl for h1, etc.) Tablet: Medium-sized screens use the md: breakpoint sizes Desktop: Large screens use the lg: breakpoint sizes  Other typography components like Text, Lead, etc. can be made responsive using the className prop:  &lt;Text className=&quot;text-sm md:text-base lg:text-lg&quot;&gt; This text grows larger on bigger screens. &lt;/Text&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#accessibility","content":" The typography components follow these accessibility best practices:  Semantic HTML: Uses appropriate HTML elements (h1-h6, p, blockquote, code) for proper document structureColor Contrast: The default theme colors meet WCAG AA standards for color contrastHeading Hierarchy: The as prop allows for proper heading hierarchy while maintaining consistent stylingFont Sizing: All sizes are relative using Tailwind's rem-based sizing, supporting browser font size settingsFocus States: Inherits the application's focus states for interactive elements  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#implementation-details","content":" The Typography components:  Use CSS Utility Classes: Built with Tailwind CSS utility classes for consistent stylingLeverage Class Variance Authority (CVA): Uses CVA for variant managementSupport Type Safety: Fully typed with TypeScript for developer experienceMaintain Component Composability: Can be easily extended and combined with other componentsFollow HTML Semantics: Each component renders the appropriate HTML element  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#common-pitfalls","content":" Inconsistent Heading Levels: Be sure to maintain proper heading hierarchy (h1 → h2 → h3) for accessibility. The as prop allows you to separate visual styling from semantic structure. Overriding Core Styles: When adding custom styles via className, be careful not to accidentally override important core styles. Use Tailwind's modifier syntax like first:, hover:, etc. to add behavior without changing the base styles. Text Color in Dark Mode: Remember that the color variants (default, muted, primary, secondary) are designed to work with the application's theme. If implementing custom colors, ensure they have appropriate dark mode alternatives.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#testing","content":" // Example test for the Heading component import { render, screen } from '@testing-library/react'; import { Heading } from '@/components/ui/typography'; describe('Heading', () =&gt; { it('renders with default props as h1', () =&gt; { render(&lt;Heading&gt;Test Heading&lt;/Heading&gt;); const heading = screen.getByText('Test Heading'); expect(heading.tagName).toBe('H1'); }); it('renders with specified heading level', () =&gt; { render(&lt;Heading as=&quot;h3&quot;&gt;Test H3&lt;/Heading&gt;); const heading = screen.getByText('Test H3'); expect(heading.tagName).toBe('H3'); }); it('applies correct styles based on variants', () =&gt; { render(&lt;Heading variant=&quot;primary&quot;&gt;Primary Heading&lt;/Heading&gt;); const heading = screen.getByText('Primary Heading'); expect(heading).toHaveClass('text-primary'); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Typography Components","url":"/nextjs-ts-tailwind-supabase-starter/components/style/typography#related-components","content":" Card: Often used together with Typography components for content organizationButton: Can be combined with Text components for consistent button stylingAlert: Uses typography components for alert titles and descriptions ","version":"Next","tagName":"h2"},{"title":"NavigationMenu Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#import","content":" import { NavigationMenu, NavigationMenuContent, NavigationMenuItem, NavigationMenuLink, NavigationMenuList, NavigationMenuTrigger, NavigationMenuViewport, NavigationMenuIndicator, navigationMenuTriggerStyle, } from '@/components/ui/navigation-menu';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#basic-usage","content":" &lt;NavigationMenu&gt; &lt;NavigationMenuList&gt; &lt;NavigationMenuItem&gt; &lt;NavigationMenuTrigger&gt;Item One&lt;/NavigationMenuTrigger&gt; &lt;NavigationMenuContent&gt; &lt;NavigationMenuLink&gt;Link&lt;/NavigationMenuLink&gt; &lt;/NavigationMenuContent&gt; &lt;/NavigationMenuItem&gt; &lt;/NavigationMenuList&gt; &lt;/NavigationMenu&gt;   ","version":"Next","tagName":"h3"},{"title":"With Next.js Link Components​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#with-nextjs-link-components","content":" import Link from 'next/link'; &lt;NavigationMenu&gt; &lt;NavigationMenuList&gt; &lt;NavigationMenuItem&gt; &lt;Link href=&quot;/docs&quot; legacyBehavior passHref&gt; &lt;NavigationMenuLink className={navigationMenuTriggerStyle()}&gt; Documentation &lt;/NavigationMenuLink&gt; &lt;/Link&gt; &lt;/NavigationMenuItem&gt; &lt;/NavigationMenuList&gt; &lt;/NavigationMenu&gt;   ","version":"Next","tagName":"h3"},{"title":"With Content Grid​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#with-content-grid","content":" &lt;NavigationMenu&gt; &lt;NavigationMenuList&gt; &lt;NavigationMenuItem&gt; &lt;NavigationMenuTrigger&gt;Getting Started&lt;/NavigationMenuTrigger&gt; &lt;NavigationMenuContent&gt; &lt;ul className=&quot;grid gap-3 p-6 md:w-[400px] lg:w-[500px] lg:grid-cols-2&quot;&gt; &lt;li&gt; &lt;NavigationMenuLink asChild&gt; &lt;a href=&quot;/introduction&quot; className=&quot;block p-2 rounded-md hover:bg-accent&quot;&gt; Introduction &lt;/a&gt; &lt;/NavigationMenuLink&gt; &lt;/li&gt; &lt;li&gt; &lt;NavigationMenuLink asChild&gt; &lt;a href=&quot;/installation&quot; className=&quot;block p-2 rounded-md hover:bg-accent&quot;&gt; Installation &lt;/a&gt; &lt;/NavigationMenuLink&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/NavigationMenuContent&gt; &lt;/NavigationMenuItem&gt; &lt;/NavigationMenuList&gt; &lt;/NavigationMenu&gt;   ","version":"Next","tagName":"h3"},{"title":"Component Structure​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#component-structure","content":" NavigationMenu: The root component that wraps the entire navigation menu structureNavigationMenuList: Contains the list of navigation itemsNavigationMenuItem: An individual navigation itemNavigationMenuTrigger: Trigger button for dropdown contentNavigationMenuContent: Content that appears when trigger is activatedNavigationMenuLink: Navigation link that can be used directly or with asChildNavigationMenuViewport: Viewport container for displaying menu contentNavigationMenuIndicator: Visual indicator for the active menu item  ","version":"Next","tagName":"h2"},{"title":"Props​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#props","content":" ","version":"Next","tagName":"h2"},{"title":"NavigationMenu​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#navigationmenu","content":" Prop\tType\tDefault\tDescriptionvalue\tstring\tundefined\tThe controlled value of the menu item to activate defaultValue\tstring\tundefined\tThe value of the menu item that should be active when initially rendered onValueChange\t(value: string) =&gt; void\tundefined\tEvent handler called when the value changes delayDuration\tnumber\t200\tThe duration from when a menu item is hovered until the content is shown skipDelayDuration\tnumber\t300\tThe duration from when an item is no longer hovered until the content begins hiding dir\t`&quot;ltr&quot;\t&quot;rtl&quot;`\t&quot;ltr&quot; orientation\t`&quot;horizontal&quot;\t&quot;vertical&quot;`\t&quot;horizontal&quot;  ","version":"Next","tagName":"h3"},{"title":"NavigationMenuContent​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#navigationmenucontent","content":" Prop\tType\tDefault\tDescriptionforceMount\tboolean\tfalse\tForce mounting of the content when true className\tstring\tundefined\tAdditional CSS classes to apply  ","version":"Next","tagName":"h3"},{"title":"NavigationMenuLink​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#navigationmenulink","content":" Prop\tType\tDefault\tDescriptionasChild\tboolean\tfalse\tWhen true, component will render as its children instead of a default element active\tboolean\tfalse\tWhether the link is currently active className\tstring\tundefined\tAdditional CSS classes to apply  ","version":"Next","tagName":"h3"},{"title":"NavigationMenuTrigger​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#navigationmenutrigger","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply children\tReactNode\tRequired\tContent for the trigger button  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#typescript","content":" // Component interface from Radix UI interface NavigationMenuProps extends React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Root&gt; { value?: string; defaultValue?: string; onValueChange?: (value: string) =&gt; void; delayDuration?: number; skipDelayDuration?: number; dir?: &quot;ltr&quot; | &quot;rtl&quot;; orientation?: &quot;horizontal&quot; | &quot;vertical&quot;; } // Link props interface NavigationMenuLinkProps extends React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Link&gt; { asChild?: boolean; active?: boolean; } // Content props interface NavigationMenuContentProps extends React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Content&gt; { forceMount?: boolean; }   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#style-overrides","content":" The component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes:  &lt;NavigationMenu className=&quot;bg-slate-100 dark:bg-slate-900 rounded-md&quot;&gt; {/* Navigation menu content */} &lt;/NavigationMenu&gt;   Using the navigationMenuTriggerStyle function for custom trigger styles:  import { navigationMenuTriggerStyle } from '@/components/ui/navigation-menu'; &lt;NavigationMenuLink className={cn( navigationMenuTriggerStyle(), &quot;font-bold text-green-600 dark:text-green-400&quot; )} &gt; Custom Styled Link &lt;/NavigationMenuLink&gt;   Applying styles to child elements using CSS selector patterns:  &lt;NavigationMenuContent className=&quot;p-4 [&amp;&gt;ul]:grid [&amp;&gt;ul]:grid-cols-2 [&amp;&gt;ul]:gap-4&quot;&gt; &lt;ul&gt; &lt;li&gt;Item 1&lt;/li&gt; &lt;li&gt;Item 2&lt;/li&gt; &lt;/ul&gt; &lt;/NavigationMenuContent&gt;   ","version":"Next","tagName":"h3"},{"title":"Creating a Custom Navigation List Item​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#creating-a-custom-navigation-list-item","content":" import { NavigationMenuLink, navigationMenuTriggerStyle, } from '@/components/ui/navigation-menu'; import { cn } from '@/lib/utils'; const ListItem = React.forwardRef&lt; React.ElementRef&lt;'a'&gt;, React.ComponentPropsWithoutRef&lt;'a'&gt; &gt;(({ className, title, children, ...props }, ref) =&gt; { return ( &lt;li&gt; &lt;NavigationMenuLink asChild&gt; &lt;a ref={ref} className={cn( 'block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground', className )} {...props} &gt; &lt;div className=&quot;text-sm font-medium leading-none&quot;&gt;{title}&lt;/div&gt; &lt;p className=&quot;line-clamp-2 text-sm leading-snug text-muted-foreground&quot;&gt; {children} &lt;/p&gt; &lt;/a&gt; &lt;/NavigationMenuLink&gt; &lt;/li&gt; ); }); ListItem.displayName = 'ListItem';   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Header Component​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#integration-with-header-component","content":" import { NavigationMenu, NavigationMenuList, NavigationMenuItem, NavigationMenuTrigger, NavigationMenuContent, NavigationMenuLink, navigationMenuTriggerStyle } from '@/components/ui/navigation-menu'; import Link from 'next/link'; export function Header() { return ( &lt;header className=&quot;w-full py-4 px-6 border-b border-gray-200&quot;&gt; &lt;div className=&quot;container mx-auto flex items-center justify-between&quot;&gt; &lt;Link href=&quot;/&quot; className=&quot;font-bold text-xl&quot;&gt; Your Logo &lt;/Link&gt; &lt;NavigationMenu&gt; &lt;NavigationMenuList&gt; &lt;NavigationMenuItem&gt; &lt;NavigationMenuTrigger&gt;Products&lt;/NavigationMenuTrigger&gt; &lt;NavigationMenuContent&gt; &lt;ul className=&quot;grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2&quot;&gt; &lt;li&gt; &lt;NavigationMenuLink asChild&gt; &lt;Link href=&quot;/products/software&quot; className=&quot;block p-3 rounded-md hover:bg-accent&quot;&gt; &lt;div className=&quot;font-medium mb-1&quot;&gt;Software&lt;/div&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Our software solutions&lt;/p&gt; &lt;/Link&gt; &lt;/NavigationMenuLink&gt; &lt;/li&gt; &lt;li&gt; &lt;NavigationMenuLink asChild&gt; &lt;Link href=&quot;/products/hardware&quot; className=&quot;block p-3 rounded-md hover:bg-accent&quot;&gt; &lt;div className=&quot;font-medium mb-1&quot;&gt;Hardware&lt;/div&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Our hardware products&lt;/p&gt; &lt;/Link&gt; &lt;/NavigationMenuLink&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/NavigationMenuContent&gt; &lt;/NavigationMenuItem&gt; &lt;NavigationMenuItem&gt; &lt;Link href=&quot;/about&quot; legacyBehavior passHref&gt; &lt;NavigationMenuLink className={navigationMenuTriggerStyle()}&gt; About &lt;/NavigationMenuLink&gt; &lt;/Link&gt; &lt;/NavigationMenuItem&gt; &lt;NavigationMenuItem&gt; &lt;Link href=&quot;/contact&quot; legacyBehavior passHref&gt; &lt;NavigationMenuLink className={navigationMenuTriggerStyle()}&gt; Contact &lt;/NavigationMenuLink&gt; &lt;/Link&gt; &lt;/NavigationMenuItem&gt; &lt;/NavigationMenuList&gt; &lt;/NavigationMenu&gt; &lt;/div&gt; &lt;/header&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Mobile-Responsive Navigation Menu​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#mobile-responsive-navigation-menu","content":" 'use client'; import { useState } from 'react'; import { NavigationMenu, NavigationMenuList, NavigationMenuItem, NavigationMenuTrigger, NavigationMenuContent, NavigationMenuLink, navigationMenuTriggerStyle } from '@/components/ui/navigation-menu'; import { Button } from '@/components/ui/button'; import { Menu, X } from 'lucide-react'; import Link from 'next/link'; import { cn } from '@/lib/utils'; export function ResponsiveNavigation() { const [isOpen, setIsOpen] = useState(false); return ( &lt;nav className=&quot;w-full relative&quot;&gt; {/* Mobile menu button */} &lt;div className=&quot;md:hidden flex justify-end p-4&quot;&gt; &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; onClick={() =&gt; setIsOpen(!isOpen)} aria-label={isOpen ? &quot;Close menu&quot; : &quot;Open menu&quot;} &gt; {isOpen ? &lt;X /&gt; : &lt;Menu /&gt;} &lt;/Button&gt; &lt;/div&gt; {/* Navigation for desktop and mobile */} &lt;div className={cn( &quot;md:block&quot;, isOpen ? &quot;block&quot; : &quot;hidden&quot; )}&gt; &lt;NavigationMenu className=&quot;w-full max-w-full justify-start md:justify-center&quot;&gt; &lt;NavigationMenuList className=&quot;flex-col md:flex-row&quot;&gt; &lt;NavigationMenuItem&gt; &lt;NavigationMenuTrigger&gt;Features&lt;/NavigationMenuTrigger&gt; &lt;NavigationMenuContent&gt; &lt;ul className=&quot;grid w-[200px] md:w-[400px] gap-3 p-4 md:grid-cols-2&quot;&gt; &lt;li&gt; &lt;NavigationMenuLink asChild&gt; &lt;a href=&quot;#feature-1&quot; className=&quot;block p-2 rounded-md hover:bg-accent&quot;&gt; Feature 1 &lt;/a&gt; &lt;/NavigationMenuLink&gt; &lt;/li&gt; &lt;li&gt; &lt;NavigationMenuLink asChild&gt; &lt;a href=&quot;#feature-2&quot; className=&quot;block p-2 rounded-md hover:bg-accent&quot;&gt; Feature 2 &lt;/a&gt; &lt;/NavigationMenuLink&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/NavigationMenuContent&gt; &lt;/NavigationMenuItem&gt; &lt;NavigationMenuItem&gt; &lt;Link href=&quot;/docs&quot; legacyBehavior passHref&gt; &lt;NavigationMenuLink className={navigationMenuTriggerStyle()}&gt; Documentation &lt;/NavigationMenuLink&gt; &lt;/Link&gt; &lt;/NavigationMenuItem&gt; &lt;/NavigationMenuList&gt; &lt;/NavigationMenu&gt; &lt;/div&gt; &lt;/nav&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#responsive-behavior","content":" The component responds to different screen sizes in the following ways:  Mobile: By default, the component is horizontally oriented and can overflow on small screensCustomizations are needed (as shown in example above) to make it fully responsiveContent appears as a dropdown below the trigger Tablet and Desktop: Full horizontal layout with space between itemsContent has more sophisticated positioning with md:w-auto and md:absolute classesViewport has improved animations and styling with shadow effects  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#accessibility","content":" The NavigationMenu component follows these accessibility best practices:  Adheres to the navigation role requirements from WAI-ARIAProvides keyboard navigation with Tab, Enter, Space, Arrow keysSupports screen readers with proper ARIA attributesUses aria-hidden=&quot;true&quot; for decorative iconsIncludes proper focus management and visible focus stylesContent elements have proper ARIA roles and attributes from Radix UI  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#implementation-details","content":" The component:  Is built on top of Radix UI's Navigation Menu primitiveUses CSS variables for animation effects (via data-[state] and data-[motion] attributes)Implements responsive styles using Tailwind's mobile-first approachSupports a viewport system for displaying content in a consistent, accessible wayUses animated transitions for enhanced user experience  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#common-pitfalls","content":" Missing use client directive: If you're creating a custom component with NavigationMenu, remember to add the 'use client' directive at the top of your file when using Next.js App Router. Incorrect usage with Next.js Links: When using with Next.js Link component, make sure to use legacyBehavior and passHref props to properly pass the href to the NavigationMenuLink. Nested Navigation Menus: Avoid nesting NavigationMenu components directly. Instead, create a single top-level NavigationMenu and use composition for complex navigation structures. Styling inconsistencies: When applying custom styles, remember that some properties come from Radix UI primitives and might need specific selectors or data attributes to override. Missing Viewport component: The NavigationMenuViewport is crucial for proper rendering of content. It's included by default in the NavigationMenu component, but if you're customizing, make sure it's included.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#testing","content":" // Example test for the NavigationMenu component import { render, screen, fireEvent } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { NavigationMenu, NavigationMenuList, NavigationMenuItem, NavigationMenuTrigger, NavigationMenuContent, NavigationMenuLink, } from '@/components/ui/navigation-menu'; describe('NavigationMenu', () =&gt; { it('renders correctly', () =&gt; { render( &lt;NavigationMenu&gt; &lt;NavigationMenuList&gt; &lt;NavigationMenuItem&gt; &lt;NavigationMenuTrigger&gt;Test Trigger&lt;/NavigationMenuTrigger&gt; &lt;NavigationMenuContent&gt; &lt;NavigationMenuLink&gt;Test Link&lt;/NavigationMenuLink&gt; &lt;/NavigationMenuContent&gt; &lt;/NavigationMenuItem&gt; &lt;/NavigationMenuList&gt; &lt;/NavigationMenu&gt; ); expect(screen.getByText('Test Trigger')).toBeInTheDocument(); }); it('shows content when trigger is clicked', async () =&gt; { render( &lt;NavigationMenu&gt; &lt;NavigationMenuList&gt; &lt;NavigationMenuItem&gt; &lt;NavigationMenuTrigger&gt;Test Trigger&lt;/NavigationMenuTrigger&gt; &lt;NavigationMenuContent&gt; &lt;NavigationMenuLink&gt;Test Link&lt;/NavigationMenuLink&gt; &lt;/NavigationMenuContent&gt; &lt;/NavigationMenuItem&gt; &lt;/NavigationMenuList&gt; &lt;/NavigationMenu&gt; ); const trigger = screen.getByText('Test Trigger'); await userEvent.click(trigger); // Content should now be visible expect(screen.getByText('Test Link')).toBeVisible(); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"NavigationMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/navigation/navigation-menu#related-components","content":" DropdownMenu: Similar in functionality but designed for application commands rather than navigation linksTabs: Another way to organize content into sections, but with a different interaction model ","version":"Next","tagName":"h2"},{"title":"Avatar Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#import","content":" import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#basic-usage","content":" &lt;Avatar&gt; &lt;AvatarImage src=&quot;https://example.com/user-avatar.jpg&quot; alt=&quot;User Name&quot; /&gt; &lt;AvatarFallback&gt;UN&lt;/AvatarFallback&gt; &lt;/Avatar&gt;   ","version":"Next","tagName":"h3"},{"title":"With Fallback Text​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#with-fallback-text","content":" &lt;Avatar&gt; &lt;AvatarImage src=&quot;https://example.com/user-avatar.jpg&quot; alt=&quot;John Doe&quot; /&gt; &lt;AvatarFallback&gt;JD&lt;/AvatarFallback&gt; &lt;/Avatar&gt;   ","version":"Next","tagName":"h3"},{"title":"With Fallback Icon​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#with-fallback-icon","content":" &lt;Avatar&gt; &lt;AvatarImage src=&quot;https://example.com/user-avatar.jpg&quot; alt=&quot;User Profile&quot; /&gt; &lt;AvatarFallback&gt; &lt;UserIcon className=&quot;h-4 w-4&quot; /&gt; &lt;/AvatarFallback&gt; &lt;/Avatar&gt;   ","version":"Next","tagName":"h3"},{"title":"Custom Size​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#custom-size","content":" &lt;Avatar className=&quot;h-14 w-14&quot;&gt; &lt;AvatarImage src=&quot;https://example.com/user-avatar.jpg&quot; alt=&quot;User Name&quot; /&gt; &lt;AvatarFallback&gt;UN&lt;/AvatarFallback&gt; &lt;/Avatar&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#props","content":" ","version":"Next","tagName":"h2"},{"title":"Avatar Props​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#avatar-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the avatar container ...props\tReact.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Root&gt;\t-\tAll other props are passed to the underlying Radix UI Avatar component  ","version":"Next","tagName":"h3"},{"title":"AvatarImage Props​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#avatarimage-props","content":" Prop\tType\tDefault\tDescriptionsrc\tstring\tRequired\tThe source URL of the avatar image alt\tstring\tRequired\tAlt text for the avatar image for accessibility className\tstring\tundefined\tAdditional CSS classes to apply to the avatar image ...props\tReact.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Image&gt;\t-\tAll other props are passed to the underlying Radix UI Avatar Image component  ","version":"Next","tagName":"h3"},{"title":"AvatarFallback Props​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#avatarfallback-props","content":" Prop\tType\tDefault\tDescriptiondelayMs\tnumber\tundefined\tDelay in milliseconds before showing the fallback to avoid flashes during loading className\tstring\tundefined\tAdditional CSS classes to apply to the avatar fallback children\tReact.ReactNode\tRequired\tContent to display when the image fails to load (typically initials or an icon) ...props\tReact.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Fallback&gt;\t-\tAll other props are passed to the underlying Radix UI Avatar Fallback component  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#typescript","content":" // Avatar Component Types import * as React from 'react'; import * as AvatarPrimitive from '@radix-ui/react-avatar'; // Avatar Props type AvatarProps = React.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Root&gt;; // AvatarImage Props type AvatarImageProps = React.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Image&gt;; // AvatarFallback Props type AvatarFallbackProps = React.ComponentPropsWithoutRef&lt;typeof AvatarPrimitive.Fallback&gt;;   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#style-overrides","content":" The Avatar component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes to each subcomponentOverriding the default styles using CSS variables or direct class overridesExtending the component with custom sizes or colors  Default styling:  Avatar: h-10 w-10 rounded-full overflow-hiddenAvatarImage: aspect-square h-full w-fullAvatarFallback: flex h-full w-full items-center justify-center rounded-full bg-muted  ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#extending-the-component","content":" import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar'; export function UserAvatar({ username, imageSrc, size = 'default', ...props }) { // Generate initials from username const initials = username .split(' ') .map(n =&gt; n[0]) .join('') .substring(0, 2) .toUpperCase(); // Size classes const sizeClasses = { small: 'h-8 w-8', default: 'h-10 w-10', large: 'h-14 w-14', }; return ( &lt;Avatar {...props} className={`${sizeClasses[size]} ${props.className || ''}`} &gt; &lt;AvatarImage src={imageSrc} alt={username} /&gt; &lt;AvatarFallback&gt;{initials}&lt;/AvatarFallback&gt; &lt;/Avatar&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with User Profile​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#integration-with-user-profile","content":" &lt;div className=&quot;flex items-center gap-3&quot;&gt; &lt;Avatar&gt; &lt;AvatarImage src={user.profileImage} alt={user.name} /&gt; &lt;AvatarFallback&gt;{user.initials}&lt;/AvatarFallback&gt; &lt;/Avatar&gt; &lt;div&gt; &lt;p className=&quot;font-medium&quot;&gt;{user.name}&lt;/p&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{user.email}&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Integration with Cards​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#integration-with-cards","content":" &lt;Card&gt; &lt;CardHeader&gt; &lt;div className=&quot;flex items-center gap-4&quot;&gt; &lt;Avatar&gt; &lt;AvatarImage src={author.avatar} alt={author.name} /&gt; &lt;AvatarFallback&gt;{author.initials}&lt;/AvatarFallback&gt; &lt;/Avatar&gt; &lt;div&gt; &lt;CardTitle&gt;{author.name}&lt;/CardTitle&gt; &lt;CardDescription&gt;{author.role}&lt;/CardDescription&gt; &lt;/div&gt; &lt;/div&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; {/* Card content */} &lt;/CardContent&gt; &lt;/Card&gt;   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#responsive-behavior","content":" The Avatar component is responsive by default, but you can further customize its behavior:  Mobile: Use smaller avatar sizes with h-8 w-8 classTablet: Use default avatar size h-10 w-10Desktop: Use larger avatar sizes with h-12 w-12 or h-14 w-14 for more prominence  &lt;Avatar className=&quot;h-8 w-8 md:h-10 md:w-10 lg:h-12 lg:w-12&quot;&gt; &lt;AvatarImage src=&quot;/avatar.png&quot; alt=&quot;User&quot; /&gt; &lt;AvatarFallback&gt;UN&lt;/AvatarFallback&gt; &lt;/Avatar&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#accessibility","content":" The Avatar component follows these accessibility best practices:  Requires alt text on AvatarImage for screen readersProvides visible text alternatives through AvatarFallback when images aren't availableUses Radix UI's Avatar primitive which has proper ARIA attributesMaintains proper contrast ratios for fallback text against the backgroundPreserves aspect ratio and readability at different sizes  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#implementation-details","content":" The component:  Is built on Radix UI's Avatar primitive for accessibility and consistent behaviorAutomatically displays the fallback when the image fails to loadHandles image loading states to prevent layout shiftsUses Tailwind CSS for styling with the ability to override via classNameIs server-component friendly with the 'use client' directive properly applied  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#common-pitfalls","content":" Missing fallback content: Always provide fallback content (initials or icon) to handle cases when images don't loadNon-square images: The component expects square images; non-square images will be croppedAccessibility: Remember to include descriptive alt text for AvatarImageSize customization: When changing the size, adjust both width and height properties to maintain the circular shapeHydration errors: When using Avatar inside other components like Button, wrap with a client component to avoid hydration issues  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#testing","content":" // Example test for the Avatar component import { render, screen } from '@testing-library/react'; import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar'; describe('Avatar', () =&gt; { it('renders the image when src is provided', () =&gt; { render( &lt;Avatar&gt; &lt;AvatarImage src=&quot;/test-avatar.png&quot; alt=&quot;Test User&quot; data-testid=&quot;avatar-img&quot; /&gt; &lt;AvatarFallback&gt;TU&lt;/AvatarFallback&gt; &lt;/Avatar&gt; ); expect(screen.getByTestId('avatar-img')).toBeInTheDocument(); }); it('displays fallback when image fails to load', () =&gt; { render( &lt;Avatar&gt; &lt;AvatarImage src=&quot;/non-existent.png&quot; alt=&quot;Test User&quot; /&gt; &lt;AvatarFallback&gt;TU&lt;/AvatarFallback&gt; &lt;/Avatar&gt; ); // Trigger onError event on the image const image = screen.getByAltText('Test User'); fireEvent.error(image); expect(screen.getByText('TU')).toBeInTheDocument(); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Avatar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/avatar#related-components","content":" Card: Often used together with Avatar in user profile displaysBadge: Can be combined with Avatar to indicate user statusButton: Avatars can be used within buttons for user-related actions ","version":"Next","tagName":"h2"},{"title":"Badge Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#import","content":" import { Badge } from '@/components/ui/badge';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#basic-usage","content":" &lt;Badge&gt;New&lt;/Badge&gt;   ","version":"Next","tagName":"h3"},{"title":"Variants​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#variants","content":" Default​  &lt;Badge variant=&quot;default&quot;&gt;Default&lt;/Badge&gt;   Secondary​  &lt;Badge variant=&quot;secondary&quot;&gt;Secondary&lt;/Badge&gt;   Destructive​  &lt;Badge variant=&quot;destructive&quot;&gt;Destructive&lt;/Badge&gt;   Outline​  &lt;Badge variant=&quot;outline&quot;&gt;Outline&lt;/Badge&gt;   ","version":"Next","tagName":"h3"},{"title":"Using badgeVariants for Links or Custom Elements​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#using-badgevariants-for-links-or-custom-elements","content":" You can use the badgeVariants helper to apply badge styling to other elements:  import { badgeVariants } from '@/components/ui/badge'; import Link from 'next/link'; &lt;Link href=&quot;/categories/new&quot; className={badgeVariants({ variant: 'outline' })}&gt; View Category &lt;/Link&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#props","content":" Prop\tType\tDefault\tDescriptionvariant\t'default' | 'secondary' | 'destructive' | 'outline'\t'default'\tThe visual style variant of the badge className\tstring\tundefined\tAdditional CSS classes to apply to the badge children\tReactNode\tRequired\tThe content to display inside the badge  ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#typescript","content":" // Component Type Definition type BadgeProps = { variant?: 'default' | 'secondary' | 'destructive' | 'outline'; children: React.ReactNode; } &amp; React.HTMLAttributes&lt;HTMLDivElement&gt;;   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#style-overrides","content":" The Badge component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes:  &lt;Badge className=&quot;px-4 py-1 text-sm&quot;&gt;Custom Sized&lt;/Badge&gt;   Extending with custom colors:  &lt;Badge className=&quot;bg-blue-500 hover:bg-blue-600 text-white&quot;&gt;Custom Color&lt;/Badge&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#extending-the-component","content":" For project-specific badge variants, you can extend the base Badge component:  import { Badge, badgeVariants } from '@/components/ui/badge'; import { cn } from '@/lib/utils'; const SuccessBadge = ({ children, className, ...props }) =&gt; { return ( &lt;Badge {...props} className={cn( 'bg-green-500 text-white hover:bg-green-600', className )} &gt; {children} &lt;/Badge&gt; ); };   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Cards​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#integration-with-cards","content":" import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'; import { Badge } from '@/components/ui/badge'; &lt;Card&gt; &lt;CardHeader&gt; &lt;div className=&quot;flex items-center justify-between&quot;&gt; &lt;CardTitle&gt;Project Status&lt;/CardTitle&gt; &lt;Badge variant=&quot;secondary&quot;&gt;In Progress&lt;/Badge&gt; &lt;/div&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; Project details here... &lt;/CardContent&gt; &lt;/Card&gt;   ","version":"Next","tagName":"h3"},{"title":"Integration with Forms​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#integration-with-forms","content":" import { useForm } from 'react-hook-form'; import { Form, FormField, FormItem, FormLabel, FormControl } from '@/components/forms/form'; import { Badge } from '@/components/ui/badge'; import { Input } from '@/components/ui/input'; const TaggedFormField = () =&gt; { const form = useForm(); return ( &lt;Form {...form}&gt; &lt;form&gt; &lt;FormField control={form.control} name=&quot;email&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;div className=&quot;flex items-center gap-2&quot;&gt; &lt;FormLabel&gt;Email&lt;/FormLabel&gt; &lt;Badge variant=&quot;outline&quot;&gt;Required&lt;/Badge&gt; &lt;/div&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;you@example.com&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;/FormItem&gt; )} /&gt; &lt;/form&gt; &lt;/Form&gt; ); };   ","version":"Next","tagName":"h3"},{"title":"Integration with Buttons​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#integration-with-buttons","content":" import { Button } from '@/components/ui/button'; import { Badge } from '@/components/ui/badge'; &lt;div className=&quot;flex items-center gap-2&quot;&gt; &lt;Button variant=&quot;outline&quot;&gt; Notifications &lt;Badge className=&quot;ml-2&quot; variant=&quot;secondary&quot;&gt;5&lt;/Badge&gt; &lt;/Button&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#responsive-behavior","content":" The Badge component is inherently responsive with its default styling. Here's how it behaves across different screen sizes:  Mobile: Badges maintain their compact size for mobile interfacesTablet/Desktop: Badges scale naturally with their container elements without requiring specific responsive adjustments  For custom responsive behaviors:  &lt;Badge className=&quot;px-2 md:px-3 py-0.5 md:py-1 text-xs md:text-sm&quot;&gt; Responsive Badge &lt;/Badge&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#accessibility","content":" The Badge component follows these accessibility best practices:  Uses appropriate color contrast ratios for all variants to ensure readabilityMaintains readable text sizes in the default stylingWhen used for status indicators, should be paired with appropriate ARIA attributes for screen readersFor interactive badges, ensure they receive focus styles and keyboard interaction support  Example with enhanced accessibility:  &lt;Badge role=&quot;status&quot; aria-label=&quot;3 unread notifications&quot; &gt; 3 &lt;/Badge&gt;   ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#implementation-details","content":" The Badge component:  Renders as a &lt;div&gt; element by defaultUses the class-variance-authority (CVA) utility for variant managementApplies TailwindCSS utility classes for stylingSupports standard HTML div attributes through React HTMLAttributes spreadingUses a rounded-full design by default for the classic badge appearance  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#common-pitfalls","content":" Crowding with content: Avoid placing badges too close to other UI elements without adequate spacingOverusing variants: Use variants consistently to maintain their meaning throughout the applicationInaccessible color combinations: Be cautious when overriding colors to maintain sufficient contrast  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#testing","content":" // Example test for the Badge component import { render, screen } from '@testing-library/react'; import { Badge } from '@/components/ui/badge'; describe('Badge', () =&gt; { it('renders with default variant correctly', () =&gt; { render(&lt;Badge&gt;Test Badge&lt;/Badge&gt;); const badge = screen.getByText('Test Badge'); expect(badge).toBeInTheDocument(); expect(badge).toHaveClass('bg-primary'); // Check for default variant class }); it('applies custom className', () =&gt; { render(&lt;Badge className=&quot;test-class&quot;&gt;Test Badge&lt;/Badge&gt;); const badge = screen.getByText('Test Badge'); expect(badge).toHaveClass('test-class'); }); it('renders with different variants', () =&gt; { const { rerender } = render(&lt;Badge variant=&quot;secondary&quot;&gt;Secondary&lt;/Badge&gt;); expect(screen.getByText('Secondary')).toHaveClass('bg-secondary'); rerender(&lt;Badge variant=&quot;destructive&quot;&gt;Destructive&lt;/Badge&gt;); expect(screen.getByText('Destructive')).toHaveClass('bg-destructive'); rerender(&lt;Badge variant=&quot;outline&quot;&gt;Outline&lt;/Badge&gt;); expect(screen.getByText('Outline')).toHaveClass('text-foreground'); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Badge Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/badge#related-components","content":" Button: Often used together with badges to show counts or statusCard: Badges can be used in card headers to indicate status or categoriesAlert: Similar to badges but for more prominent notifications or messages ","version":"Next","tagName":"h2"},{"title":"Alert Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#import","content":" import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#basic-usage","content":" &lt;Alert&gt; &lt;AlertTitle&gt;Heads up!&lt;/AlertTitle&gt; &lt;AlertDescription&gt; You can add components and dependencies to your app using the CLI. &lt;/AlertDescription&gt; &lt;/Alert&gt;   ","version":"Next","tagName":"h3"},{"title":"Default Variant​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#default-variant","content":" &lt;Alert variant=&quot;default&quot;&gt; &lt;AlertTitle&gt;Note&lt;/AlertTitle&gt; &lt;AlertDescription&gt; This is a default alert to provide information to the user. &lt;/AlertDescription&gt; &lt;/Alert&gt;   ","version":"Next","tagName":"h3"},{"title":"Destructive Variant​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#destructive-variant","content":" &lt;Alert variant=&quot;destructive&quot;&gt; &lt;AlertTitle&gt;Error&lt;/AlertTitle&gt; &lt;AlertDescription&gt; Your session has expired. Please log in again to continue. &lt;/AlertDescription&gt; &lt;/Alert&gt;   ","version":"Next","tagName":"h3"},{"title":"With Icon​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#with-icon","content":" import { AlertCircle } from 'lucide-react'; &lt;Alert&gt; &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt; &lt;AlertTitle&gt;Important Update&lt;/AlertTitle&gt; &lt;AlertDescription&gt; A new version of the application is available. Please refresh the page. &lt;/AlertDescription&gt; &lt;/Alert&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#props","content":" ","version":"Next","tagName":"h2"},{"title":"Alert Props​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#alert-props","content":" Prop\tType\tDefault\tDescriptionvariant\t'default' | 'destructive'\t'default'\tControls the visual style of the alert className\tstring\tundefined\tAdditional CSS classes to apply to the alert children\tReactNode\tRequired\tContent to display inside the alert ...props\tHTMLAttributes&lt;HTMLDivElement&gt;\t-\tAll other props are passed to the underlying div element  ","version":"Next","tagName":"h3"},{"title":"AlertTitle Props​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#alerttitle-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the title children\tReactNode\tRequired\tContent to display as the alert title ...props\tHTMLAttributes&lt;HTMLHeadingElement&gt;\t-\tAll other props are passed to the underlying h5 element  ","version":"Next","tagName":"h3"},{"title":"AlertDescription Props​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#alertdescription-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the description children\tReactNode\tRequired\tContent to display as the alert description ...props\tHTMLAttributes&lt;HTMLParagraphElement&gt;\t-\tAll other props are passed to the underlying div element  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#typescript","content":" import { VariantProps } from 'class-variance-authority'; import * as React from 'react'; // Alert Variants const alertVariants = cva( &quot;relative w-full rounded-lg border p-4 [&amp;&gt;svg~*]:pl-7 [&amp;&gt;svg+div]:translate-y-[-3px] [&amp;&gt;svg]:absolute [&amp;&gt;svg]:left-4 [&amp;&gt;svg]:top-4 [&amp;&gt;svg]:text-foreground&quot;, { variants: { variant: { default: &quot;bg-background text-foreground&quot;, destructive: &quot;border-destructive/50 text-destructive dark:border-destructive [&amp;&gt;svg]:text-destructive&quot;, }, }, defaultVariants: { variant: &quot;default&quot;, }, } ); // Alert Component Props type AlertProps = React.HTMLAttributes&lt;HTMLDivElement&gt; &amp; VariantProps&lt;typeof alertVariants&gt;; // AlertTitle Component Props type AlertTitleProps = React.HTMLAttributes&lt;HTMLHeadingElement&gt;; // AlertDescription Component Props type AlertDescriptionProps = React.HTMLAttributes&lt;HTMLParagraphElement&gt;;   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#style-overrides","content":" The Alert component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes:  &lt;Alert className=&quot;border-blue-500 bg-blue-50 dark:bg-blue-950 dark:border-blue-800&quot;&gt; &lt;AlertTitle className=&quot;text-blue-800 dark:text-blue-300&quot;&gt;Information&lt;/AlertTitle&gt; &lt;AlertDescription className=&quot;text-blue-600 dark:text-blue-400&quot;&gt; This alert has custom colors using Tailwind CSS classes. &lt;/AlertDescription&gt; &lt;/Alert&gt;   Using custom icons with proper positioning:  import { Info, AlertTriangle, CheckCircle } from 'lucide-react'; &lt;Alert&gt; &lt;Info className=&quot;h-4 w-4 text-blue-500&quot; /&gt; &lt;AlertTitle&gt;Information Alert&lt;/AlertTitle&gt; &lt;AlertDescription&gt;With a blue info icon.&lt;/AlertDescription&gt; &lt;/Alert&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#extending-the-component","content":" import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert'; import { CheckCircle, AlertTriangle, Info, AlertCircle } from 'lucide-react'; import { cn } from '@/lib/utils'; type StatusAlertProps = React.ComponentProps&lt;typeof Alert&gt; &amp; { status: 'success' | 'warning' | 'info' | 'error'; title?: string; }; export function StatusAlert({ status, title, children, className, ...props }: StatusAlertProps) { const icons = { success: CheckCircle, warning: AlertTriangle, info: Info, error: AlertCircle }; const variants = { success: &quot;border-green-500/50 bg-green-50 text-green-800 dark:border-green-800 dark:bg-green-950/50 dark:text-green-300&quot;, warning: &quot;border-yellow-500/50 bg-yellow-50 text-yellow-800 dark:border-yellow-800 dark:bg-yellow-950/50 dark:text-yellow-300&quot;, info: &quot;border-blue-500/50 bg-blue-50 text-blue-800 dark:border-blue-800 dark:bg-blue-950/50 dark:text-blue-300&quot;, error: &quot;border-red-500/50 bg-red-50 text-red-800 dark:border-red-800 dark:bg-red-950/50 dark:text-red-300&quot; }; const IconComponent = icons[status]; return ( &lt;Alert className={cn(variants[status], className)} {...props} &gt; &lt;IconComponent className=&quot;h-4 w-4&quot; /&gt; {title &amp;&amp; &lt;AlertTitle&gt;{title}&lt;/AlertTitle&gt;} &lt;AlertDescription&gt;{children}&lt;/AlertDescription&gt; &lt;/Alert&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#integration-with-forms","content":" import { zodResolver } from '@hookform/resolvers/zod'; import { useForm } from 'react-hook-form'; import * as z from 'zod'; import { Button } from '@/components/ui/button'; import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'; import { Input } from '@/components/ui/input'; import { Alert, AlertDescription } from '@/components/ui/alert'; import { useState } from 'react'; import { AlertCircle } from 'lucide-react'; const formSchema = z.object({ email: z.string().email({ message: &quot;Please enter a valid email address.&quot;, }), password: z.string().min(8, { message: &quot;Password must be at least 8 characters.&quot;, }), }); export function LoginForm() { const [formError, setFormError] = useState&lt;string | null&gt;(null); const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { email: &quot;&quot;, password: &quot;&quot;, }, }); async function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { try { // Form submission logic console.log(values); } catch (error) { setFormError(&quot;Login failed. Please check your credentials and try again.&quot;); } } return ( &lt;Form {...form}&gt; {formError &amp;&amp; ( &lt;Alert variant=&quot;destructive&quot; className=&quot;mb-4&quot;&gt; &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt; &lt;AlertDescription&gt;{formError}&lt;/AlertDescription&gt; &lt;/Alert&gt; )} &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt; &lt;FormField control={form.control} name=&quot;email&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Email&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;email@example.com&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;FormField control={form.control} name=&quot;password&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Password&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input type=&quot;password&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Login&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#integration-with-other-components","content":" import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert'; import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Settings } from 'lucide-react'; export function SettingsCard() { return ( &lt;Card className=&quot;w-full max-w-md&quot;&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Account Settings&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;CardContent className=&quot;space-y-4&quot;&gt; &lt;Alert&gt; &lt;Settings className=&quot;h-4 w-4&quot; /&gt; &lt;AlertTitle&gt;Privacy Notice&lt;/AlertTitle&gt; &lt;AlertDescription&gt; We've updated our privacy policy. Please review the changes before continuing. &lt;/AlertDescription&gt; &lt;/Alert&gt; {/* Settings form fields would go here */} &lt;/CardContent&gt; &lt;CardFooter className=&quot;flex justify-end space-x-2&quot;&gt; &lt;Button variant=&quot;outline&quot;&gt;Cancel&lt;/Button&gt; &lt;Button&gt;Save Changes&lt;/Button&gt; &lt;/CardFooter&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#responsive-behavior","content":" The Alert component is responsive by default and adapts to the container's width. You can enhance its behavior on different screen sizes using Tailwind's responsive modifiers:  &lt;Alert className=&quot;p-3 md:p-4 lg:p-6&quot;&gt; &lt;AlertTitle className=&quot;text-sm md:text-base lg:text-lg&quot;&gt; Responsive Alert &lt;/AlertTitle&gt; &lt;AlertDescription className=&quot;text-xs md:text-sm lg:text-base&quot;&gt; This alert adjusts its padding and text size based on the screen size. &lt;/AlertDescription&gt; &lt;/Alert&gt;   The responsive behavior includes:  Mobile: Compact padding and smaller text for space efficiencyTablet: Standard padding and medium text sizeDesktop: More generous padding and larger text for better readability  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#accessibility","content":" The Alert component follows these accessibility best practices:  Uses the appropriate role=&quot;alert&quot; attribute for screen reader announcementsProvides a semantic structure with title and descriptionMaintains proper color contrast ratios in both light and dark modesSupports icons with appropriate sizing and positioningUses semantic HTML for title (h5) and description elementsEnsures text remains readable when customized with different colorsHas proper spacing for readability and scannabilityCan be dismissed or interacted with using keyboard navigation when combined with interactive elements  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#implementation-details","content":" The component:  Is built using a React.forwardRef to properly forward refs to the underlying div elementUses class-variance-authority (cva) to manage component variantsApplies Tailwind CSS for styling with consistent design tokensHas special CSS selectors to handle icon positioning and spacingSupports both light and dark modes through the Tailwind CSS themeUses the cn utility function to merge default variant styles with custom className propsIncludes proper display names for better debuggingImplements a semantic structure with AlertTitle and AlertDescription sub-componentsHandles icon positioning automatically when an icon is provided as a child  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#common-pitfalls","content":" Missing role attribute: The component includes role=&quot;alert&quot; by default, but if implementing a custom alert component, ensure this attribute is preserved for accessibility.Contrast issues: When customizing colors, especially for the destructive variant, ensure sufficient contrast between text and background.Icon positioning: When using icons, they should be placed as direct children of the Alert component, not within AlertTitle or AlertDescription, to leverage the automatic positioning styles.Overriding styles: Be cautious when applying custom background colors that may affect the visibility of text or icons.Alert fatigue: Avoid overusing alerts, especially the destructive variant, to prevent alert fatigue. Use them only for important information.Mobile considerations: On small screens, ensure alerts don't take up too much vertical space and remain readable.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#testing","content":" // Example test for the Alert component import { render, screen } from '@testing-library/react'; import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert'; import { AlertCircle } from 'lucide-react'; describe('Alert', () =&gt; { it('renders correctly with title and description', () =&gt; { render( &lt;Alert&gt; &lt;AlertTitle&gt;Test Title&lt;/AlertTitle&gt; &lt;AlertDescription&gt;Test Description&lt;/AlertDescription&gt; &lt;/Alert&gt; ); expect(screen.getByRole('alert')).toBeInTheDocument(); expect(screen.getByText('Test Title')).toBeInTheDocument(); expect(screen.getByText('Test Description')).toBeInTheDocument(); }); it('applies the correct variant class', () =&gt; { const { rerender } = render( &lt;Alert data-testid=&quot;alert&quot;&gt; &lt;AlertDescription&gt;Default variant&lt;/AlertDescription&gt; &lt;/Alert&gt; ); expect(screen.getByTestId('alert')).toHaveClass('bg-background'); rerender( &lt;Alert variant=&quot;destructive&quot; data-testid=&quot;alert&quot;&gt; &lt;AlertDescription&gt;Destructive variant&lt;/AlertDescription&gt; &lt;/Alert&gt; ); expect(screen.getByTestId('alert')).toHaveClass('border-destructive/50'); }); it('renders with an icon and positions it correctly', () =&gt; { render( &lt;Alert&gt; &lt;AlertCircle data-testid=&quot;icon&quot; className=&quot;h-4 w-4&quot; /&gt; &lt;AlertTitle&gt;With Icon&lt;/AlertTitle&gt; &lt;AlertDescription&gt;Description with icon&lt;/AlertDescription&gt; &lt;/Alert&gt; ); const icon = screen.getByTestId('icon'); expect(icon).toBeInTheDocument(); // Check that icon positioning styles are applied to the container const alert = screen.getByRole('alert'); expect(alert).toHaveClass('[&amp;&gt;svg]:absolute'); }); it('applies custom className correctly', () =&gt; { render( &lt;Alert className=&quot;test-class&quot; data-testid=&quot;custom-alert&quot;&gt; &lt;AlertDescription&gt;Custom class alert&lt;/AlertDescription&gt; &lt;/Alert&gt; ); const alert = screen.getByTestId('custom-alert'); expect(alert).toHaveClass('test-class'); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Alert Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/alert#related-components","content":" Toast: For temporary notifications that appear and disappear automaticallyAlertDialog: For confirmation dialogs that interrupt the userCard: For containing related information, can be used with Alert for status updatesBanner: For site-wide messaging positioned at the top or bottom of the screen ","version":"Next","tagName":"h2"},{"title":"Container Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/container","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Container Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/container#import","content":" import Container from '@/components/ui/container';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Container Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/container#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Container​","type":1,"pageTitle":"Container Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/container#basic-container","content":" &lt;Container&gt; &lt;h1&gt;Your Content Here&lt;/h1&gt; &lt;p&gt;This content will be centered with responsive padding and a max-width.&lt;/p&gt; &lt;/Container&gt;   ","version":"Next","tagName":"h3"},{"title":"Size Options​","type":1,"pageTitle":"Container Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/container#size-options","content":" Control the maximum width of the container:  &lt;Container size=&quot;sm&quot;&gt; &lt;p&gt;Small container (max-width: 640px)&lt;/p&gt; &lt;/Container&gt; &lt;Container size=&quot;md&quot;&gt; &lt;p&gt;Medium container (max-width: 768px)&lt;/p&gt; &lt;/Container&gt; &lt;Container size=&quot;lg&quot;&gt; &lt;p&gt;Large container (max-width: 1024px) - Default&lt;/p&gt; &lt;/Container&gt; &lt;Container size=&quot;xl&quot;&gt; &lt;p&gt;Extra large container (max-width: 1280px)&lt;/p&gt; &lt;/Container&gt; &lt;Container size=&quot;full&quot;&gt; &lt;p&gt;Full width container (max-width: 100%)&lt;/p&gt; &lt;/Container&gt;   ","version":"Next","tagName":"h3"},{"title":"Padding Options​","type":1,"pageTitle":"Container Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/container#padding-options","content":" Control the horizontal padding of the container:  &lt;Container padding=&quot;none&quot;&gt; &lt;p&gt;Container with no padding&lt;/p&gt; &lt;/Container&gt; &lt;Container padding=&quot;sm&quot;&gt; &lt;p&gt;Container with small padding (1rem)&lt;/p&gt; &lt;/Container&gt; &lt;Container padding=&quot;md&quot;&gt; &lt;p&gt;Container with medium padding (1.5rem on mobile, 2rem on larger screens) - Default&lt;/p&gt; &lt;/Container&gt; &lt;Container padding=&quot;lg&quot;&gt; &lt;p&gt;Container with large padding (2rem on mobile, 3rem on larger screens)&lt;/p&gt; &lt;/Container&gt;   ","version":"Next","tagName":"h3"},{"title":"Alignment​","type":1,"pageTitle":"Container Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/container#alignment","content":" By default, containers are horizontally centered. You can disable this:  &lt;Container centered={false}&gt; &lt;p&gt;This container is not centered and will align to the left&lt;/p&gt; &lt;/Container&gt;   ","version":"Next","tagName":"h3"},{"title":"Combining with Other Components​","type":1,"pageTitle":"Container Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/container#combining-with-other-components","content":" Containers work well as layout wrappers for other components:  &lt;Container size=&quot;md&quot; padding=&quot;lg&quot;&gt; &lt;Card variant=&quot;elevated&quot;&gt; &lt;h2 className=&quot;text-2xl font-bold mb-4&quot;&gt;Welcome&lt;/h2&gt; &lt;p className=&quot;mb-6&quot;&gt;This card is inside a responsive container.&lt;/p&gt; &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt; &lt;Input label=&quot;First Name&quot; fullWidth /&gt; &lt;Input label=&quot;Last Name&quot; fullWidth /&gt; &lt;/div&gt; &lt;Button variant=&quot;primary&quot; className=&quot;mt-4&quot;&gt;Submit&lt;/Button&gt; &lt;/Card&gt; &lt;/Container&gt;   ","version":"Next","tagName":"h3"},{"title":"Page Layout Example​","type":1,"pageTitle":"Container Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/container#page-layout-example","content":" export default function Page() { return ( &lt;&gt; {/* Hero section with full width */} &lt;div className=&quot;bg-blue-600 text-white py-12&quot;&gt; &lt;Container&gt; &lt;h1 className=&quot;text-4xl font-bold&quot;&gt;Welcome to Our Site&lt;/h1&gt; &lt;p className=&quot;mt-4 text-xl&quot;&gt;Discover amazing features and content.&lt;/p&gt; &lt;/Container&gt; &lt;/div&gt; {/* Main content with narrower width */} &lt;Container size=&quot;md&quot; className=&quot;py-8&quot;&gt; &lt;h2 className=&quot;text-2xl font-bold mb-6&quot;&gt;Featured Content&lt;/h2&gt; &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt; &lt;Card&gt;Content 1&lt;/Card&gt; &lt;Card&gt;Content 2&lt;/Card&gt; &lt;/div&gt; &lt;/Container&gt; &lt;/&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Container Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/container#props","content":" Prop\tType\tDefault\tDescriptionsize\t'sm' | 'md' | 'lg' | 'xl' | 'full'\t'lg'\tMaximum width constraint padding\t'none' | 'sm' | 'md' | 'lg'\t'md'\tHorizontal padding amount centered\tboolean\ttrue\tWhether to center the container horizontally className\tstring\t''\tAdditional CSS classes to apply children\tReactNode\tRequired\tContent to display inside the container  The component also accepts all standard HTML div attributes like id, data-*, etc. ","version":"Next","tagName":"h2"},{"title":"Button Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#import","content":" import { Button, buttonVariants } from '@/components/ui/button';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#basic-usage","content":" &lt;Button&gt;Click me&lt;/Button&gt;   ","version":"Next","tagName":"h3"},{"title":"Variants​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#variants","content":" &lt;Button variant=&quot;default&quot;&gt;Default&lt;/Button&gt; &lt;Button variant=&quot;destructive&quot;&gt;Destructive&lt;/Button&gt; &lt;Button variant=&quot;outline&quot;&gt;Outline&lt;/Button&gt; &lt;Button variant=&quot;secondary&quot;&gt;Secondary&lt;/Button&gt; &lt;Button variant=&quot;ghost&quot;&gt;Ghost&lt;/Button&gt; &lt;Button variant=&quot;link&quot;&gt;Link&lt;/Button&gt;   ","version":"Next","tagName":"h3"},{"title":"Sizes​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#sizes","content":" &lt;Button size=&quot;default&quot;&gt;Default Size&lt;/Button&gt; &lt;Button size=&quot;sm&quot;&gt;Small&lt;/Button&gt; &lt;Button size=&quot;lg&quot;&gt;Large&lt;/Button&gt; &lt;Button size=&quot;icon&quot;&gt;Icon&lt;/Button&gt;   ","version":"Next","tagName":"h3"},{"title":"With Icons​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#with-icons","content":" import { Plus, ArrowRight } from 'lucide-react'; // Icon on the left (default) &lt;Button icon={Plus}&gt;Add Item&lt;/Button&gt; // Icon on the right &lt;Button icon={ArrowRight} iconPosition=&quot;right&quot;&gt;Next&lt;/Button&gt; // Icon-only button &lt;Button size=&quot;icon&quot; icon={Plus} aria-label=&quot;Add item&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"As Link​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#as-link","content":" import Link from 'next/link'; // Option 1: Using asChild prop &lt;Button asChild&gt; &lt;Link href=&quot;/somewhere&quot;&gt;Go to Somewhere&lt;/Link&gt; &lt;/Button&gt; // Option 2: Using buttonVariants helper &lt;Link href=&quot;/somewhere&quot; className={buttonVariants({ variant: 'outline' })}&gt; Go to Somewhere &lt;/Link&gt;   ","version":"Next","tagName":"h3"},{"title":"Disabled State​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#disabled-state","content":" &lt;Button disabled&gt;Cannot Click&lt;/Button&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#props","content":" Prop\tType\tDefault\tDescriptionvariant\t'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link'\t'default'\tControls the visual style of the button size\t'default' | 'sm' | 'lg' | 'icon'\t'default'\tControls the size of the button asChild\tboolean\tfalse\tWhen true, the component will render its child rather than a button element icon\tLucideIcon\tundefined\tOptional Lucide icon component to display iconPosition\t'left' | 'right'\t'left'\tControls the position of the icon relative to text children\tReactNode\t-\tContent to display inside the button className\tstring\t''\tAdditional CSS classes to apply disabled\tboolean\tfalse\tWhen true, disables button interactions and applies disabled styling ...props\tButtonHTMLAttributes&lt;HTMLButtonElement&gt;\t-\tAll other props are passed to the underlying button element  ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#typescript","content":" import { LucideIcon } from 'lucide-react'; import { VariantProps } from 'class-variance-authority'; // Button variants definition (exported as buttonVariants) const buttonVariants = cva( 'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0', { variants: { variant: { default: 'bg-primary text-primary-foreground hover:bg-primary/90', destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90', outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground', secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80', ghost: 'hover:bg-accent hover:text-accent-foreground', link: 'text-primary underline-offset-4 hover:underline', }, size: { default: 'h-10 px-4 py-2', sm: 'h-9 rounded-md px-3', lg: 'h-11 rounded-md px-8', icon: 'h-10 w-10', }, }, defaultVariants: { variant: 'default', size: 'default', }, } ); // Button component props export interface ButtonProps extends React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt;, VariantProps&lt;typeof buttonVariants&gt; { asChild?: boolean; icon?: LucideIcon; iconPosition?: 'left' | 'right'; }   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#style-overrides","content":" The Button component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes:  &lt;Button className=&quot;w-full rounded-full bg-gradient-to-r from-blue-500 to-purple-500&quot;&gt; Custom Style &lt;/Button&gt;   Extending the buttonVariants with new options:  // In your own button customization file import { buttonVariants } from '@/components/ui/button'; import { cva } from 'class-variance-authority'; export const customButtonVariants = cva(buttonVariants(), { variants: { variant: { primary: 'bg-blue-600 text-white hover:bg-blue-700', success: 'bg-green-600 text-white hover:bg-green-700', }, size: { xl: 'h-14 px-10 py-3 text-lg rounded-xl', }, }, });   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#extending-the-component","content":" import { Button, ButtonProps } from '@/components/ui/button'; import { Loader2 } from 'lucide-react'; interface LoadingButtonProps extends ButtonProps { isLoading?: boolean; loadingText?: string; } export function LoadingButton({ isLoading = false, loadingText = &quot;Loading...&quot;, disabled, children, ...props }: LoadingButtonProps) { return ( &lt;Button disabled={isLoading || disabled} {...props} &gt; {isLoading ? ( &lt;&gt; &lt;Loader2 className=&quot;mr-2 h-4 w-4 animate-spin&quot; /&gt; {loadingText} &lt;/&gt; ) : ( children )} &lt;/Button&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#integration-with-forms","content":" import { useForm } from 'react-hook-form'; import { z } from 'zod'; import { zodResolver } from '@hookform/resolvers/zod'; import { Button } from '@/components/ui/button'; import { Form, FormField, FormItem, FormLabel, FormControl } from '@/components/ui/form'; import { Input } from '@/components/ui/input'; const formSchema = z.object({ email: z.string().email(), password: z.string().min(8), }); export function LoginForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { email: '', password: '', }, }); function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { // Handle form submission console.log(values); } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-6&quot;&gt; &lt;FormField control={form.control} name=&quot;email&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Email&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;email@example.com&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;/FormItem&gt; )} /&gt; &lt;FormField control={form.control} name=&quot;password&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Password&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input type=&quot;password&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Sign In&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#integration-with-other-components","content":" import { Card, CardHeader, CardContent, CardFooter } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar'; export function UserCard({ user }) { return ( &lt;Card&gt; &lt;CardHeader className=&quot;flex flex-row gap-4 items-center&quot;&gt; &lt;Avatar&gt; &lt;AvatarImage src={user.avatarUrl} alt={user.name} /&gt; &lt;AvatarFallback&gt;{user.initials}&lt;/AvatarFallback&gt; &lt;/Avatar&gt; &lt;div&gt; &lt;h3 className=&quot;font-semibold&quot;&gt;{user.name}&lt;/h3&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{user.role}&lt;/p&gt; &lt;/div&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;p&gt;{user.bio}&lt;/p&gt; &lt;/CardContent&gt; &lt;CardFooter className=&quot;flex justify-between&quot;&gt; &lt;Button variant=&quot;outline&quot;&gt;View Profile&lt;/Button&gt; &lt;Button&gt;Connect&lt;/Button&gt; &lt;/CardFooter&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#responsive-behavior","content":" The Button component can be made responsive using Tailwind's responsive modifiers:  // Full width on mobile, auto width on larger screens &lt;Button className=&quot;w-full md:w-auto&quot;&gt; Responsive Button &lt;/Button&gt; // Different sizes on different breakpoints &lt;Button className=&quot;h-8 px-2 sm:h-9 sm:px-3 md:h-10 md:px-4 lg:h-11 lg:px-8&quot;&gt; Responsive Size &lt;/Button&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#accessibility","content":" The Button component follows these accessibility best practices:  Uses native &lt;button&gt; element semantics by defaultSupports keyboard navigation and focus states with visible focus ringsIncludes proper disabled states that remove the element from tab orderMaintains proper color contrast in all variantsSupports ARIA attributes (aria-label, aria-pressed, etc.)When used as icons-only, requires an aria-label for screen readersUses Radix UI's Slot primitive for the asChild functionality, preserving accessibility  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#implementation-details","content":" The component:  Is built using Class Variance Authority (CVA) for type-safe variant managementSupports Lucide icons with consistent styling and positioningHandles icons with appropriate sizing and pointer events configurationUses the Radix UI Slot primitive when asChild is true to preserve propsCustomizes focus states for keyboard navigationApplies appropriate transition effectsIncludes a reusable buttonVariants helper function for consistency  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#common-pitfalls","content":" Missing type for form submissions: Remember to add type=&quot;submit&quot; for buttons that submit formsIcon-only buttons without labels: Always add an aria-label for icon-only buttons to maintain accessibilityNesting interactive elements: When using asChild with an interactive element like &lt;a&gt; or &lt;Link&gt;, avoid nesting other interactive elements insideOverriding styles: Be careful when adding custom classes that might conflict with the component's base stylesNext.js client components: The Button component might need to be used within a client component when performing client-side actions  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#testing","content":" // Example test for the Button component import { render, screen, fireEvent } from '@testing-library/react'; import { Button } from '@/components/ui/button'; import { Plus } from 'lucide-react'; describe('Button', () =&gt; { it('renders correctly with default props', () =&gt; { render(&lt;Button&gt;Click me&lt;/Button&gt;); expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument(); }); it('handles clicks properly', () =&gt; { const handleClick = jest.fn(); render(&lt;Button onClick={handleClick}&gt;Click me&lt;/Button&gt;); fireEvent.click(screen.getByRole('button', { name: /click me/i })); expect(handleClick).toHaveBeenCalledTimes(1); }); it('renders with an icon', () =&gt; { render(&lt;Button icon={Plus}&gt;Add Item&lt;/Button&gt;); expect(screen.getByRole('button', { name: /add item/i })).toBeInTheDocument(); // Check for SVG icon presence expect(screen.getByRole('button').querySelector('svg')).toBeInTheDocument(); }); it('is properly disabled', () =&gt; { const handleClick = jest.fn(); render(&lt;Button disabled onClick={handleClick}&gt;Disabled&lt;/Button&gt;); const button = screen.getByRole('button', { name: /disabled/i }); expect(button).toBeDisabled(); fireEvent.click(button); expect(handleClick).not.toHaveBeenCalled(); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Button Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/button#related-components","content":" Form: Often used with Button for form submissionsDialog: Uses Button for trigger and action buttonsDropdownMenu: Uses Button styling for dropdown triggers ","version":"Next","tagName":"h2"},{"title":"Calendar Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#overview","content":" The Calendar component provides a flexible date picker built on top of React DayPicker. It supports various selection modes including single date selection, multiple date selection, and date range selection. The component is fully accessible, provides keyboard navigation, and can be easily styled to match your application's design.  ","version":"Next","tagName":"h2"},{"title":"Import​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#import","content":" import { Calendar } from &quot;@/components/ui/calendar&quot;;   ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#installation","content":" This component requires the following dependency:  npx shadcn-ui@latest add calendar   The command will install react-day-picker and its dependencies, and add the Calendar component to your project.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#basic-usage","content":" &quot;use client&quot;; import * as React from &quot;react&quot;; import { Calendar } from &quot;@/components/ui/calendar&quot;; export default function CalendarDemo() { const [date, setDate] = React.useState&lt;Date | undefined&gt;(new Date()); return ( &lt;Calendar mode=&quot;single&quot; selected={date} onSelect={setDate} className=&quot;rounded-md border&quot; /&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Date Range Selection​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#date-range-selection","content":" &quot;use client&quot;; import * as React from &quot;react&quot;; import { Calendar } from &quot;@/components/ui/calendar&quot;; import { DateRange } from &quot;react-day-picker&quot;; export default function CalendarRangeDemo() { const [dateRange, setDateRange] = React.useState&lt;DateRange | undefined&gt;({ from: new Date(), to: new Date(new Date().setDate(new Date().getDate() + 7)), }); return ( &lt;Calendar mode=&quot;range&quot; selected={dateRange} onSelect={setDateRange} numberOfMonths={2} className=&quot;rounded-md border&quot; /&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Multiple Date Selection​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#multiple-date-selection","content":" &quot;use client&quot;; import * as React from &quot;react&quot;; import { Calendar } from &quot;@/components/ui/calendar&quot;; export default function CalendarMultipleDemo() { const [dates, setDates] = React.useState&lt;Date[] | undefined&gt;([new Date()]); return ( &lt;Calendar mode=&quot;multiple&quot; selected={dates} onSelect={setDates} className=&quot;rounded-md border&quot; /&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"With Disabled Dates​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#with-disabled-dates","content":" &quot;use client&quot;; import * as React from &quot;react&quot;; import { Calendar } from &quot;@/components/ui/calendar&quot;; export default function CalendarDisabledDemo() { const [date, setDate] = React.useState&lt;Date | undefined&gt;(new Date()); return ( &lt;Calendar mode=&quot;single&quot; selected={date} onSelect={setDate} disabled={{ before: new Date(), after: new Date(new Date().setMonth(new Date().getMonth() + 3)), dayOfWeek: [0, 6], // Disable weekends (Sunday and Saturday) }} className=&quot;rounded-md border&quot; /&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with React Hook Form​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#integration-with-react-hook-form","content":" &quot;use client&quot;; import * as React from &quot;react&quot;; import { zodResolver } from &quot;@hookform/resolvers/zod&quot;; import { useForm } from &quot;react-hook-form&quot;; import * as z from &quot;zod&quot;; import { format } from &quot;date-fns&quot;; import { CalendarIcon } from &quot;lucide-react&quot;; import { cn } from &quot;@/lib/utils&quot;; import { Button } from &quot;@/components/ui/button&quot;; import { Calendar } from &quot;@/components/ui/calendar&quot;; import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, } from &quot;@/components/ui/form&quot;; import { Popover, PopoverContent, PopoverTrigger, } from &quot;@/components/ui/popover&quot;; const formSchema = z.object({ dob: z.date({ required_error: &quot;A date of birth is required.&quot;, }), }); export function DatePickerForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), }); function onSubmit(data: z.infer&lt;typeof formSchema&gt;) { console.log(data); } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt; &lt;FormField control={form.control} name=&quot;dob&quot; render={({ field }) =&gt; ( &lt;FormItem className=&quot;flex flex-col&quot;&gt; &lt;FormLabel&gt;Date of birth&lt;/FormLabel&gt; &lt;Popover&gt; &lt;PopoverTrigger asChild&gt; &lt;FormControl&gt; &lt;Button variant={&quot;outline&quot;} className={cn( &quot;w-[240px] pl-3 text-left font-normal&quot;, !field.value &amp;&amp; &quot;text-muted-foreground&quot; )} &gt; {field.value ? ( format(field.value, &quot;PPP&quot;) ) : ( &lt;span&gt;Pick a date&lt;/span&gt; )} &lt;CalendarIcon className=&quot;ml-auto h-4 w-4 opacity-50&quot; /&gt; &lt;/Button&gt; &lt;/FormControl&gt; &lt;/PopoverTrigger&gt; &lt;PopoverContent className=&quot;w-auto p-0&quot; align=&quot;start&quot;&gt; &lt;Calendar mode=&quot;single&quot; selected={field.value} onSelect={field.onChange} disabled={(date) =&gt; date &gt; new Date() || date &lt; new Date(&quot;1900-01-01&quot;) } initialFocus /&gt; &lt;/PopoverContent&gt; &lt;/Popover&gt; &lt;FormDescription&gt; Your date of birth is used to calculate your age. &lt;/FormDescription&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Submit&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h2"},{"title":"Integration with Date Range in React Hook Form​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#integration-with-date-range-in-react-hook-form","content":" &quot;use client&quot;; import * as React from &quot;react&quot;; import { zodResolver } from &quot;@hookform/resolvers/zod&quot;; import { useForm } from &quot;react-hook-form&quot;; import * as z from &quot;zod&quot;; import { format } from &quot;date-fns&quot;; import { CalendarIcon } from &quot;lucide-react&quot;; import { DateRange } from &quot;react-day-picker&quot;; import { cn } from &quot;@/lib/utils&quot;; import { Button } from &quot;@/components/ui/button&quot;; import { Calendar } from &quot;@/components/ui/calendar&quot;; import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, } from &quot;@/components/ui/form&quot;; import { Popover, PopoverContent, PopoverTrigger, } from &quot;@/components/ui/popover&quot;; const formSchema = z.object({ dateRange: z.object({ from: z.date({ required_error: &quot;Start date is required.&quot;, }), to: z.date({ required_error: &quot;End date is required.&quot;, }), }), }); export function DateRangePickerForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { dateRange: { from: new Date(), to: new Date(new Date().setDate(new Date().getDate() + 7)), }, }, }); function onSubmit(data: z.infer&lt;typeof formSchema&gt;) { console.log(data); } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt; &lt;FormField control={form.control} name=&quot;dateRange&quot; render={({ field }) =&gt; ( &lt;FormItem className=&quot;flex flex-col&quot;&gt; &lt;FormLabel&gt;Date Range&lt;/FormLabel&gt; &lt;Popover&gt; &lt;PopoverTrigger asChild&gt; &lt;FormControl&gt; &lt;Button variant={&quot;outline&quot;} className={cn( &quot;w-[300px] pl-3 text-left font-normal&quot;, !field.value &amp;&amp; &quot;text-muted-foreground&quot; )} &gt; {field.value?.from ? ( field.value.to ? ( &lt;&gt; {format(field.value.from, &quot;LLL dd, y&quot;)} -{&quot; &quot;} {format(field.value.to, &quot;LLL dd, y&quot;)} &lt;/&gt; ) : ( format(field.value.from, &quot;LLL dd, y&quot;) ) ) : ( &lt;span&gt;Pick a date range&lt;/span&gt; )} &lt;CalendarIcon className=&quot;ml-auto h-4 w-4 opacity-50&quot; /&gt; &lt;/Button&gt; &lt;/FormControl&gt; &lt;/PopoverTrigger&gt; &lt;PopoverContent className=&quot;w-auto p-0&quot; align=&quot;start&quot;&gt; &lt;Calendar initialFocus mode=&quot;range&quot; defaultMonth={field.value?.from} selected={field.value} onSelect={field.onChange} numberOfMonths={2} /&gt; &lt;/PopoverContent&gt; &lt;/Popover&gt; &lt;FormDescription&gt; Select a date range for your event. &lt;/FormDescription&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Submit&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h2"},{"title":"Props​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#props","content":" Prop\tType\tDefault\tDescriptionmode\t&quot;single&quot; | &quot;multiple&quot; | &quot;range&quot; | &quot;default&quot;\t&quot;default&quot;\tThe selection mode of the calendar selected\tDate | Date[] | DateRange | undefined\t-\tThe selected date(s) or date range onSelect\t(date: Date | Date[] | DateRange | undefined) =&gt; void\t-\tFunction called when date(s) are selected disabled\tboolean | Matcher | Matcher[]\t-\tDisabled date(s) or matcher for disabled dates defaultMonth\tDate\tCurrent month\tThe default month to display initialFocus\tboolean\tfalse\tWhether to initially focus the calendar numberOfMonths\tnumber\t1\tNumber of months to display at once fromMonth\tDate\t-\tThe first month that can be displayed toMonth\tDate\t-\tThe last month that can be displayed fromYear\tnumber\t-\tThe first year that can be selected toYear\tnumber\t-\tThe last year that can be selected captionLayout\t&quot;dropdown&quot; | &quot;buttons&quot;\t&quot;buttons&quot;\tLayout of the calendar caption showOutsideDays\tboolean\ttrue\tWhether to show days from the previous/next month fixedWeeks\tboolean\tfalse\tWhether weeks should always be 6 to maintain a fixed height className\tstring\t-\tAdditional CSS class names for the calendar container classNames\tClassNames\t-\tClass names for various calendar elements required\tboolean\tfalse\tWhether a selection is required footer\tReactNode\t-\tFooter element to render at the bottom of the calendar  ","version":"Next","tagName":"h2"},{"title":"TypeScript Interfaces​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#typescript-interfaces","content":" import { ClassNames, DayPickerProps } from &quot;react-day-picker&quot;; // DateRange type for range selection mode export interface DateRange { from: Date; to?: Date; } // Calendar component props export type CalendarProps = React.ComponentProps&lt;typeof DayPicker&gt;; // Matcher type for disabled dates export type Matcher = | Date | { after: Date } | { before: Date } | { from: Date; to: Date } | { dayOfWeek: number[] };   ","version":"Next","tagName":"h3"},{"title":"Styling​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#styling","content":" The Calendar component comes with default styling that integrates with your shadcn/ui theme. You can customize the appearance using the className prop for the container and the classNames prop for specific calendar elements.  ","version":"Next","tagName":"h2"},{"title":"Custom Styling Example​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#custom-styling-example","content":" &lt;Calendar mode=&quot;single&quot; selected={date} onSelect={setDate} className=&quot;rounded-md border-2 border-primary p-2 bg-card&quot; classNames={{ month: &quot;space-y-4&quot;, caption: &quot;flex justify-center pt-1 relative items-center&quot;, caption_label: &quot;text-sm font-medium&quot;, nav: &quot;space-x-1 flex items-center&quot;, nav_button: &quot;h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100&quot;, nav_button_previous: &quot;absolute left-1&quot;, nav_button_next: &quot;absolute right-1&quot;, table: &quot;w-full border-collapse space-y-1&quot;, head_row: &quot;flex&quot;, head_cell: &quot;text-muted-foreground rounded-md w-8 font-normal text-xs&quot;, row: &quot;flex w-full mt-2&quot;, cell: &quot;relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&amp;:has([aria-selected])]:bg-accent&quot;, day: &quot;h-8 w-8 p-0 font-normal aria-selected:opacity-100&quot;, day_selected: &quot;bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground&quot;, day_today: &quot;bg-accent text-accent-foreground&quot;, day_outside: &quot;text-muted-foreground opacity-50&quot;, day_disabled: &quot;text-muted-foreground opacity-50&quot;, day_range_middle: &quot;aria-selected:bg-accent aria-selected:text-accent-foreground&quot;, day_hidden: &quot;invisible&quot;, }} /&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#accessibility","content":" The Calendar component follows WCAG 2.1 AA accessibility guidelines and includes the following features:  Proper ARIA attributes for navigation and selectionKeyboard navigation supportFocus managementScreen reader announcements for date changes  ","version":"Next","tagName":"h2"},{"title":"Keyboard Navigation​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#keyboard-navigation","content":" Arrow keys: Navigate between daysHome/End: Navigate to the first/last day of the weekPageUp/PageDown: Navigate between monthsSpace/Enter: Select the focused day  ","version":"Next","tagName":"h3"},{"title":"Notes and Limitations​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#notes-and-limitations","content":" The Calendar component is built on React DayPicker and may require additional styling to match your application's design system. When using with React Hook Form, make sure to handle the field value transformation correctly, especially with date range selection. For mobile responsiveness, consider using a different layout or a modal for small screens. When using the captionLayout=&quot;dropdown&quot; option, you'll need to ensure the Select component is properly styled. The calendar will remain visible even when selecting a date in the basic usage. For a date picker that closes upon selection, you should combine it with a Popover component as shown in the React Hook Form examples.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#testing","content":" import { render, screen, fireEvent } from &quot;@testing-library/react&quot;; import { Calendar } from &quot;@/components/ui/calendar&quot;; describe(&quot;Calendar component&quot;, () =&gt; { test(&quot;renders a calendar with the current month&quot;, () =&gt; { render(&lt;Calendar /&gt;); const currentMonth = new Date().toLocaleString(&quot;default&quot;, { month: &quot;long&quot; }); expect(screen.getByText(currentMonth, { exact: false })).toBeInTheDocument(); }); test(&quot;allows selecting a date&quot;, () =&gt; { const handleSelect = jest.fn(); render(&lt;Calendar mode=&quot;single&quot; onSelect={handleSelect} /&gt;); // Find and click on day 15 of the current month const dayButton = screen.getByRole(&quot;button&quot;, { name: /15/i }); fireEvent.click(dayButton); expect(handleSelect).toHaveBeenCalledTimes(1); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Calendar Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/calendar#related-components","content":" DatePicker - A complete date picker component that includes a Calendar within a PopoverPopover - Used to display the Calendar in a floating panelForm - Used to integrate the Calendar with form validation ","version":"Next","tagName":"h2"},{"title":"ContentCard Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#import","content":" import { ContentCard } from '@/components/ui/content-card';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#basic-usage","content":" &lt;ContentCard title=&quot;Getting Started with Next.js&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"With Image and Description​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#with-image-and-description","content":" &lt;ContentCard title=&quot;Introduction to TypeScript&quot; description=&quot;Learn the basics of TypeScript and how it improves your development workflow&quot; image={{ src: &quot;/images/typescript-intro.jpg&quot;, alt: &quot;TypeScript logo on a laptop screen&quot; }} /&gt;   ","version":"Next","tagName":"h3"},{"title":"With Link and Custom Footer​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#with-link-and-custom-footer","content":" &lt;ContentCard title=&quot;Supabase Authentication&quot; description=&quot;Implement secure authentication with Supabase in your Next.js application&quot; image={{ src: &quot;/images/auth-example.jpg&quot;, alt: &quot;Login screen example&quot; }} href=&quot;/tutorials/supabase-auth&quot; footer={ &lt;div className=&quot;flex items-center justify-between w-full&quot;&gt; &lt;span className=&quot;text-sm text-muted-foreground&quot;&gt;5 min read&lt;/span&gt; &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot;&gt;Save&lt;/Button&gt; &lt;/div&gt; } /&gt;   ","version":"Next","tagName":"h3"},{"title":"Different Image Shapes​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#different-image-shapes","content":" // Square image (1:1 ratio) &lt;ContentCard title=&quot;Component Design&quot; image={{ src: &quot;/images/component.jpg&quot;, alt: &quot;UI component diagram&quot; }} imageShape=&quot;square&quot; /&gt; // Video shape (16:9 ratio) &lt;ContentCard title=&quot;Video Tutorial&quot; image={{ src: &quot;/images/tutorial-thumbnail.jpg&quot;, alt: &quot;Tutorial thumbnail&quot; }} imageShape=&quot;video&quot; /&gt; // Portrait image (3:4 ratio) &lt;ContentCard title=&quot;Team Member&quot; image={{ src: &quot;/images/team-member.jpg&quot;, alt: &quot;Team member photo&quot; }} imageShape=&quot;portrait&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"Without Hover Effect​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#without-hover-effect","content":" &lt;ContentCard title=&quot;Static Card&quot; description=&quot;This card doesn't change appearance on hover&quot; hoverEffect={false} /&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#props","content":" Prop\tType\tDefault\tDescriptiontitle\tstring\tRequired\tThe main heading of the card description\tstring\tundefined\tOptional text content describing the card content image\t{ src: string, alt: string }\tundefined\tOptional image to display at the top of the card footer\tReactNode\tundefined\tOptional custom footer content href\tstring\tundefined\tOptional URL to make the entire card clickable as a link className\tstring\tundefined\tAdditional CSS classes to apply to the card imageShape\t'square' | 'video' | 'portrait' | 'landscape'\t'landscape'\tControls the aspect ratio of the image hoverEffect\tboolean\ttrue\tWhether to show hover effects (border color change and shadow)  ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#typescript","content":" interface ContentCardProps { title: string; description?: string; image?: { src: string; alt: string; }; footer?: ReactNode; href?: string; className?: string; imageShape?: 'square' | 'video' | 'portrait' | 'landscape'; hoverEffect?: boolean; }   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#style-overrides","content":" The component can be customized using the following approaches:  Using the className prop to add additional Tailwind classesCustomizing the image aspect ratio with the imageShape propProviding custom footer content with the footer propDisabling hover effects with hoverEffect={false}  &lt;ContentCard title=&quot;Customized Card&quot; className=&quot;bg-slate-50 dark:bg-slate-900 border-2&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#extending-the-component","content":" import { ContentCard } from '@/components/ui/content-card'; import { Badge } from '@/components/ui/badge'; export function ArticleCard({ category, readTime, ...props }) { return ( &lt;ContentCard {...props} footer={ &lt;div className=&quot;flex items-center justify-between w-full&quot;&gt; &lt;Badge variant=&quot;outline&quot;&gt;{category}&lt;/Badge&gt; &lt;span className=&quot;text-sm text-muted-foreground&quot;&gt;{readTime} min read&lt;/span&gt; &lt;/div&gt; } /&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Grid Layout​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#integration-with-grid-layout","content":" &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt; &lt;ContentCard title=&quot;First Article&quot; description=&quot;Description for the first article&quot; image={{ src: &quot;/images/article1.jpg&quot;, alt: &quot;Article 1&quot; }} href=&quot;/articles/first-article&quot; /&gt; &lt;ContentCard title=&quot;Second Article&quot; description=&quot;Description for the second article&quot; image={{ src: &quot;/images/article2.jpg&quot;, alt: &quot;Article 2&quot; }} href=&quot;/articles/second-article&quot; /&gt; &lt;ContentCard title=&quot;Third Article&quot; description=&quot;Description for the third article&quot; image={{ src: &quot;/images/article3.jpg&quot;, alt: &quot;Article 3&quot; }} href=&quot;/articles/third-article&quot; /&gt; &lt;/div&gt;   ","version":"Next","tagName":"h3"},{"title":"Integration with Data Fetching​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#integration-with-data-fetching","content":" 'use client'; import { useEffect, useState } from 'react'; import { ContentCard } from '@/components/ui/content-card'; interface Article { id: string; title: string; description: string; imageUrl: string; slug: string; } export function ArticleList() { const [articles, setArticles] = useState&lt;Article[]&gt;([]); const [loading, setLoading] = useState(true); useEffect(() =&gt; { async function fetchArticles() { try { const response = await fetch('/api/articles'); const data = await response.json(); setArticles(data); } catch (error) { console.error('Error fetching articles:', error); } finally { setLoading(false); } } fetchArticles(); }, []); if (loading) { return &lt;div&gt;Loading articles...&lt;/div&gt;; } return ( &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt; {articles.map((article) =&gt; ( &lt;ContentCard key={article.id} title={article.title} description={article.description} image={{ src: article.imageUrl, alt: article.title }} href={`/articles/${article.slug}`} /&gt; ))} &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#responsive-behavior","content":" The component responds to different screen sizes in the following ways:  Mobile: Card takes full width, title uses smaller font sizeTablet: Multiple cards can be displayed in a grid, title font size increasesDesktop: Cards maintain consistent size with larger headings  The responsive behavior is primarily controlled by the parent container. The ContentCard itself adapts to its container width, making it flexible for various layouts.  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#accessibility","content":" The component follows these accessibility best practices:  Title is rendered as an h3 heading by default for proper document structureImages include required alt text descriptionsWhen used as a link, the entire card becomes clickable, increasing the target areaText content uses appropriate color contrast with the backgroundDescription is truncated with ellipsis to maintain visual consistency  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#implementation-details","content":" The component:  Builds upon the shadcn/ui Card component with additional featuresUses Next.js Image component for optimized image loadingTruncates both title and description text with ellipsis after specified line countsProvides consistent aspect ratios for images across the applicationWraps content in a Next.js Link component when href is providedIncludes a default &quot;Read more&quot; button with arrow icon when href is provided without custom footer  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#common-pitfalls","content":" Missing Image Alt Text: Always provide descriptive alt text when using images to maintain accessibility.Long Titles or Descriptions: Text is automatically truncated with ellipsis, which could cut off important information. Keep content concise or test to ensure truncation occurs at appropriate points.Inconsistent Heights: Cards may have different heights based on content. Consider using grid layouts with consistent card heights or limiting description length.Dark Mode Considerations: Test the component in both light and dark modes to ensure proper contrast and visibility.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#testing","content":" // Example test for the ContentCard component import { render, screen } from '@testing-library/react'; import { ContentCard } from '@/components/ui/content-card'; describe('ContentCard', () =&gt; { it('renders with title correctly', () =&gt; { render(&lt;ContentCard title=&quot;Test Card Title&quot; /&gt;); expect(screen.getByText('Test Card Title')).toBeInTheDocument(); }); it('renders with description when provided', () =&gt; { render( &lt;ContentCard title=&quot;Test Card&quot; description=&quot;This is a test card description&quot; /&gt; ); expect(screen.getByText('This is a test card description')).toBeInTheDocument(); }); it('wraps content in a link when href is provided', () =&gt; { render(&lt;ContentCard title=&quot;Test Card&quot; href=&quot;/test-page&quot; /&gt;); const link = screen.getByRole('link'); expect(link).toBeInTheDocument(); expect(link).toHaveAttribute('href', '/test-page'); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"ContentCard Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/content-card#related-components","content":" Card: The base card component from shadcn/ui that ContentCard extendsButton: Used in the default footer when providing an hrefTypography: Provides the Heading component used for card titles ","version":"Next","tagName":"h2"},{"title":"Card Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#import","content":" import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#basic-usage","content":" &lt;Card&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Card Title&lt;/CardTitle&gt; &lt;CardDescription&gt;Card Description&lt;/CardDescription&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;p&gt;Card Content&lt;/p&gt; &lt;/CardContent&gt; &lt;CardFooter&gt; &lt;p&gt;Card Footer&lt;/p&gt; &lt;/CardFooter&gt; &lt;/Card&gt;   ","version":"Next","tagName":"h3"},{"title":"Simple Content Card​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#simple-content-card","content":" &lt;Card&gt; &lt;CardContent className=&quot;pt-6&quot;&gt; &lt;p&gt;A simple card with just content and no header or footer.&lt;/p&gt; &lt;/CardContent&gt; &lt;/Card&gt;   ","version":"Next","tagName":"h3"},{"title":"Card with Custom Styling​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#card-with-custom-styling","content":" &lt;Card className=&quot;border-primary/50 bg-primary/5&quot;&gt; &lt;CardHeader className=&quot;pb-3&quot;&gt; &lt;CardTitle className=&quot;text-primary&quot;&gt;Highlighted Card&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;p&gt;This card has custom styling to make it stand out.&lt;/p&gt; &lt;/CardContent&gt; &lt;/Card&gt;   ","version":"Next","tagName":"h3"},{"title":"Interactive Card​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#interactive-card","content":" &lt;Card className=&quot;transition-all hover:shadow-md hover:border-primary cursor-pointer&quot;&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Interactive Card&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;p&gt;This card has hover effects to indicate interactivity.&lt;/p&gt; &lt;/CardContent&gt; &lt;CardFooter className=&quot;text-sm text-muted-foreground&quot;&gt; Click to learn more &lt;/CardFooter&gt; &lt;/Card&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#props","content":" ","version":"Next","tagName":"h2"},{"title":"Card Props​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#card-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the card children\tReactNode\tRequired\tContent to display inside the card ...props\tReact.HTMLAttributes&lt;HTMLDivElement&gt;\t-\tAll other props are passed to the underlying div element  ","version":"Next","tagName":"h3"},{"title":"CardHeader Props​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#cardheader-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the card header children\tReactNode\tRequired\tContent to display inside the card header ...props\tReact.HTMLAttributes&lt;HTMLDivElement&gt;\t-\tAll other props are passed to the underlying div element  ","version":"Next","tagName":"h3"},{"title":"CardTitle Props​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#cardtitle-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the card title children\tReactNode\tRequired\tContent to display as the card title ...props\tReact.HTMLAttributes&lt;HTMLDivElement&gt;\t-\tAll other props are passed to the underlying div element  ","version":"Next","tagName":"h3"},{"title":"CardDescription Props​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#carddescription-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the card description children\tReactNode\tRequired\tContent to display as the card description ...props\tReact.HTMLAttributes&lt;HTMLDivElement&gt;\t-\tAll other props are passed to the underlying div element  ","version":"Next","tagName":"h3"},{"title":"CardContent Props​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#cardcontent-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the card content children\tReactNode\tRequired\tContent to display inside the card content area ...props\tReact.HTMLAttributes&lt;HTMLDivElement&gt;\t-\tAll other props are passed to the underlying div element  ","version":"Next","tagName":"h3"},{"title":"CardFooter Props​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#cardfooter-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the card footer children\tReactNode\tRequired\tContent to display inside the card footer ...props\tReact.HTMLAttributes&lt;HTMLDivElement&gt;\t-\tAll other props are passed to the underlying div element  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#typescript","content":" // Card Component Types import * as React from 'react'; // Card Props type CardProps = React.HTMLAttributes&lt;HTMLDivElement&gt;; // CardHeader Props type CardHeaderProps = React.HTMLAttributes&lt;HTMLDivElement&gt;; // CardTitle Props type CardTitleProps = React.HTMLAttributes&lt;HTMLDivElement&gt;; // CardDescription Props type CardDescriptionProps = React.HTMLAttributes&lt;HTMLDivElement&gt;; // CardContent Props type CardContentProps = React.HTMLAttributes&lt;HTMLDivElement&gt;; // CardFooter Props type CardFooterProps = React.HTMLAttributes&lt;HTMLDivElement&gt;;   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#style-overrides","content":" The Card component and its sub-components can be customized using the following approaches:  Using the className prop to add additional Tailwind classes to each component:  &lt;Card className=&quot;max-w-md mx-auto bg-gradient-to-br from-card to-background&quot;&gt; &lt;CardHeader className=&quot;bg-card/50 backdrop-blur-sm&quot;&gt; &lt;CardTitle className=&quot;text-blue-500 dark:text-blue-400&quot;&gt;Custom Title&lt;/CardTitle&gt; &lt;CardDescription className=&quot;text-blue-700/70 dark:text-blue-300/70&quot;&gt;Custom Description&lt;/CardDescription&gt; &lt;/CardHeader&gt; &lt;CardContent className=&quot;space-y-4&quot;&gt; {/* Content */} &lt;/CardContent&gt; &lt;CardFooter className=&quot;justify-end border-t border-border/50 bg-muted/20&quot;&gt; {/* Footer content */} &lt;/CardFooter&gt; &lt;/Card&gt;   Customizing the spacing and padding within the card:  &lt;Card&gt; &lt;CardHeader className=&quot;p-4&quot;&gt; &lt;CardTitle&gt;Compact Header&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;CardContent className=&quot;p-4 pt-0&quot;&gt; {/* Content with custom padding */} &lt;/CardContent&gt; &lt;CardFooter className=&quot;p-4 pt-2&quot;&gt; {/* Footer with custom padding */} &lt;/CardFooter&gt; &lt;/Card&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#extending-the-component","content":" import { Card, CardProps, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; interface ActionCardProps extends CardProps { title: string; description?: string; actionLabel: string; onAction: () =&gt; void; } export function ActionCard({ title, description, actionLabel, onAction, children, className, ...props }: ActionCardProps) { return ( &lt;Card className={`hover:shadow-lg transition-shadow ${className || ''}`} {...props} &gt; &lt;CardHeader&gt; &lt;CardTitle&gt;{title}&lt;/CardTitle&gt; {description &amp;&amp; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{description}&lt;/p&gt;} &lt;/CardHeader&gt; &lt;CardContent&gt; {children} &lt;/CardContent&gt; &lt;CardFooter className=&quot;flex justify-end&quot;&gt; &lt;Button onClick={onAction}&gt;{actionLabel}&lt;/Button&gt; &lt;/CardFooter&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#integration-with-forms","content":" import { useForm } from 'react-hook-form'; import { z } from 'zod'; import { zodResolver } from '@hookform/resolvers/zod'; import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card'; import { Form, FormField, FormItem, FormLabel, FormControl } from '@/components/ui/form'; import { Input } from '@/components/ui/input'; import { Button } from '@/components/ui/button'; const formSchema = z.object({ name: z.string().min(2, { message: &quot;Name must be at least 2 characters.&quot;, }), email: z.string().email({ message: &quot;Please enter a valid email address.&quot;, }), }); export function ContactForm() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { name: &quot;&quot;, email: &quot;&quot;, }, }); function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { // Handle form submission console.log(values); } return ( &lt;Card className=&quot;w-full max-w-md mx-auto&quot;&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Contact Us&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt; &lt;FormField control={form.control} name=&quot;name&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Name&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;Your name&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;/FormItem&gt; )} /&gt; &lt;FormField control={form.control} name=&quot;email&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Email&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;Your email&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot;&gt;Submit&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; &lt;/CardContent&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#integration-with-other-components","content":" import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'; import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar'; import { Badge } from '@/components/ui/badge'; export function UserProfileCard({ user }) { return ( &lt;Card className=&quot;w-full max-w-sm&quot;&gt; &lt;CardHeader className=&quot;flex flex-row items-center gap-4&quot;&gt; &lt;Avatar&gt; &lt;AvatarImage src={user.avatarUrl} alt={user.name} /&gt; &lt;AvatarFallback&gt;{user.initials}&lt;/AvatarFallback&gt; &lt;/Avatar&gt; &lt;div className=&quot;flex flex-col&quot;&gt; &lt;CardTitle className=&quot;text-xl&quot;&gt;{user.name}&lt;/CardTitle&gt; &lt;div className=&quot;flex items-center gap-2 mt-1&quot;&gt; &lt;Badge variant=&quot;outline&quot;&gt;{user.role}&lt;/Badge&gt; {user.isVerified &amp;&amp; ( &lt;Badge variant=&quot;secondary&quot;&gt;Verified&lt;/Badge&gt; )} &lt;/div&gt; &lt;/div&gt; &lt;/CardHeader&gt; &lt;CardContent className=&quot;space-y-2&quot;&gt; &lt;div className=&quot;text-sm&quot;&gt; &lt;span className=&quot;font-medium text-muted-foreground&quot;&gt;Email:&lt;/span&gt; {user.email} &lt;/div&gt; {user.bio &amp;&amp; ( &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{user.bio}&lt;/p&gt; )} &lt;/CardContent&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#responsive-behavior","content":" The Card component can be made responsive using Tailwind's responsive modifiers:  &lt;Card className=&quot;w-full max-w-full sm:max-w-md md:max-w-lg lg:max-w-xl&quot;&gt; &lt;CardHeader className=&quot;p-4 sm:p-6&quot;&gt; &lt;CardTitle className=&quot;text-lg sm:text-xl md:text-2xl&quot;&gt;Responsive Card&lt;/CardTitle&gt; &lt;CardDescription className=&quot;text-xs sm:text-sm&quot;&gt; This card adjusts its size and spacing based on screen size &lt;/CardDescription&gt; &lt;/CardHeader&gt; &lt;CardContent className=&quot;p-4 sm:p-6 pt-0 sm:pt-0 text-sm sm:text-base&quot;&gt; &lt;p&gt;The content inside adapts to different screen sizes.&lt;/p&gt; &lt;/CardContent&gt; &lt;CardFooter className=&quot;p-4 sm:p-6 pt-0 sm:pt-0 flex-col sm:flex-row justify-start sm:justify-end gap-2&quot;&gt; &lt;Button size=&quot;sm&quot; variant=&quot;outline&quot; className=&quot;w-full sm:w-auto&quot;&gt;Cancel&lt;/Button&gt; &lt;Button size=&quot;sm&quot; className=&quot;w-full sm:w-auto&quot;&gt;Continue&lt;/Button&gt; &lt;/CardFooter&gt; &lt;/Card&gt;   The responsive behavior includes:  Mobile: Full width with smaller padding and text sizesTablet: Constrained width with medium padding and text sizesDesktop: Larger maximum width with standard padding and text sizes  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#accessibility","content":" The Card component follows these accessibility best practices:  Uses semantic HTML structures to organize contentMaintains proper color contrast for text against background colorsCardTitle and CardDescription components are div elements, allowing you to use appropriate heading levels for proper document outlineSupports keyboard focus when used as interactive elementsPreserves parent-child relationships for screen readersAllows for custom ARIA attributes to be passed through props where needed  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#implementation-details","content":" The component:  Is built using a composition pattern with multiple sub-components for flexible layoutsUses Tailwind CSS for styling with the ability to override via classNameApplies subtle shadows and borders for visual clarity and separation from backgroundMaintains proper spacing between elements with a consistent padding systemUses the cn utility to merge default and custom classNamesForwards refs to the underlying div elements for all sub-components  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#common-pitfalls","content":" Missing semantic structure: When CardTitle and CardDescription are used, consider wrapping them with appropriate semantic HTML (like &lt;h2&gt; or &lt;h3&gt;) for proper document outlineOverflow issues: Content that is too wide for the card may cause layout issues; use proper text wrapping and overflow handlingInconsistent padding: When customizing padding on CardContent, remember that it has pt-0 by default to align with CardHeader, so you may need to adjust bothInteractive cards: When making the entire card clickable, ensure proper keyboard accessibility and focus indicatorsNested cards: Be careful when nesting cards, as the visual hierarchy can become confusing; consider using different variants or styling  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#testing","content":" // Example test for the Card component import { render, screen } from '@testing-library/react'; import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'; describe('Card', () =&gt; { it('renders correctly with basic content', () =&gt; { render( &lt;Card&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Test Card&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;CardContent&gt;Card content&lt;/CardContent&gt; &lt;/Card&gt; ); expect(screen.getByText('Test Card')).toBeInTheDocument(); expect(screen.getByText('Card content')).toBeInTheDocument(); }); it('applies custom className to Card component', () =&gt; { const { container } = render( &lt;Card className=&quot;custom-class&quot;&gt; &lt;CardContent&gt;Content&lt;/CardContent&gt; &lt;/Card&gt; ); const cardElement = container.firstChild; expect(cardElement).toHaveClass('custom-class'); expect(cardElement).toHaveClass('rounded-lg'); // Default class }); it('forwards additional props to the underlying div', () =&gt; { render( &lt;Card data-testid=&quot;card-test&quot; aria-label=&quot;Card example&quot;&gt; &lt;CardContent&gt;Content&lt;/CardContent&gt; &lt;/Card&gt; ); const card = screen.getByTestId('card-test'); expect(card).toHaveAttribute('aria-label', 'Card example'); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Card Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/card#related-components","content":" Container: Can be used to wrap cards in a consistent layoutTypography: For consistent text styling within cardsButton: Commonly used in card footers for actionsHoverCard: For displaying rich previews in a card-like popupContentCard: A more specialized card implementation with predefined content structure ","version":"Next","tagName":"h2"},{"title":"SearchInput Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#import","content":" import { SearchInput } from '@/components/ui/search-input';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#basic-usage","content":" &lt;SearchInput onSearch={(value) =&gt; console.log(`Searching for: ${value}`)} /&gt;   ","version":"Next","tagName":"h3"},{"title":"Without Button​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#without-button","content":" &lt;SearchInput onSearch={(value) =&gt; console.log(`Searching for: ${value}`)} showButton={false} /&gt;   ","version":"Next","tagName":"h3"},{"title":"Custom Placeholder and Button Text​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#custom-placeholder-and-button-text","content":" &lt;SearchInput placeholder=&quot;Find products...&quot; buttonText=&quot;Find&quot; onSearch={(value) =&gt; console.log(`Finding products: ${value}`)} /&gt;   ","version":"Next","tagName":"h3"},{"title":"With Custom Styling​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#with-custom-styling","content":" &lt;SearchInput className=&quot;max-w-md bg-slate-50 p-2 rounded-lg&quot; onSearch={(value) =&gt; console.log(`Searching for: ${value}`)} /&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#props","content":" Prop\tType\tDefault\tDescriptiononSearch\t(value: string) =&gt; void\tundefined\tFunction called when the search form is submitted placeholder\tstring\t'Search...'\tPlaceholder text for the search input className\tstring\tundefined\tAdditional CSS classes to apply to the form container buttonText\tstring\t'Search'\tText to display on the search button showButton\tboolean\ttrue\tWhether to show the search button  Additionally, the component accepts all standard form HTML attributes since it extends HTMLAttributes&lt;HTMLFormElement&gt;.  ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#typescript","content":" interface SearchInputProps extends HTMLAttributes&lt;HTMLFormElement&gt; { onSearch?: (value: string) =&gt; void; placeholder?: string; className?: string; buttonText?: string; showButton?: boolean; }   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#style-overrides","content":" The component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes to the form containerCustomizing the appearance of the button by modifying the button.tsx componentCustomizing the appearance of the input by modifying the input.tsx component  ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#extending-the-component","content":" import { SearchInput } from '@/components/ui/search-input'; export function CustomSearchInput({ withIcon = true, ...props }) { return ( &lt;div className=&quot;my-custom-container&quot;&gt; &lt;h4 className=&quot;text-sm font-medium mb-2&quot;&gt;Search&lt;/h4&gt; &lt;SearchInput {...props} className={`bg-gray-50 ${props.className || ''}`} /&gt; {withIcon &amp;&amp; ( &lt;div className=&quot;mt-2 text-xs text-gray-500&quot;&gt; Click the search button or press Enter to search &lt;/div&gt; )} &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with React Hook Form​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#integration-with-react-hook-form","content":" import { useForm } from 'react-hook-form'; import { SearchInput } from '@/components/ui/search-input'; export function SearchForm() { const { handleSubmit } = useForm(); const onSubmit = (data) =&gt; { console.log('Form submitted:', data); }; return ( &lt;form onSubmit={handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt; &lt;div&gt; &lt;label htmlFor=&quot;searchField&quot; className=&quot;text-sm font-medium&quot;&gt; Search Products &lt;/label&gt; &lt;SearchInput id=&quot;searchField&quot; onSearch={(value) =&gt; console.log(`Searching for: ${value}`)} showButton={false} /&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot; className=&quot;w-full&quot;&gt;Submit Form&lt;/button&gt; &lt;/form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#integration-with-other-components","content":" import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'; import { SearchInput } from '@/components/ui/search-input'; export function SearchCard() { return ( &lt;Card&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Product Search&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;SearchInput onSearch={(value) =&gt; console.log(`Searching for: ${value}`)} placeholder=&quot;Find products by name...&quot; /&gt; &lt;/CardContent&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#responsive-behavior","content":" The SearchInput component automatically adapts to different screen sizes:  Mobile: The input field takes up the full width, and the button (if shown) is attached to the right side.Tablet/Desktop: Maintains the same layout but benefits from larger screen space.  The component uses responsive text size with text-base on mobile and text-sm on medium screens and above, as inherited from the Input component.  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#accessibility","content":" The component follows these accessibility best practices:  Uses semantic HTML with proper form elementsInput has a proper placeholderButton has a descriptive labelFocus states are visible via the input's focus stylesForm submission can be triggered by pressing EnterSearch icon provides visual indication of the input's purpose  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#implementation-details","content":" The component:  Uses the Lucide Search icon for visual indicationMaintains internal state for the input valueCombines shadcn/ui's Input and Button componentsProvides a form element that handles the submission eventUses a ref to potentially focus the input (though this functionality is not currently used in the implementation)Properly handles form submission to prevent page reload  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#common-pitfalls","content":" Not Handling the onSearch Callback: Make sure to implement the onSearch prop to process the search value when the form is submitted.CSS Conflicts with Parent Containers: The component uses w-full for the input, so ensure parent containers appropriately constrain the width if needed.Button Style Conflicts: If you're customizing button styles globally, be aware this might affect the search button's appearance.Using with Form Libraries: When using inside react-hook-form, you may need to handle the form submission differently, as the component manages its own input state.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#testing","content":" import { render, screen, fireEvent } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { SearchInput } from '@/components/ui/search-input'; describe('SearchInput', () =&gt; { it('renders correctly with default props', () =&gt; { render(&lt;SearchInput /&gt;); expect(screen.getByPlaceholderText('Search...')).toBeInTheDocument(); expect(screen.getByRole('button', { name: 'Search' })).toBeInTheDocument(); }); it('calls onSearch when the form is submitted', async () =&gt; { const handleSearch = jest.fn(); render(&lt;SearchInput onSearch={handleSearch} /&gt;); const input = screen.getByPlaceholderText('Search...'); await userEvent.type(input, 'test query'); const button = screen.getByRole('button', { name: 'Search' }); await userEvent.click(button); expect(handleSearch).toHaveBeenCalledWith('test query'); }); it('renders without button when showButton is false', () =&gt; { render(&lt;SearchInput showButton={false} /&gt;); expect(screen.queryByRole('button')).not.toBeInTheDocument(); }); it('uses custom placeholder and button text', () =&gt; { render(&lt;SearchInput placeholder=&quot;Find items...&quot; buttonText=&quot;Find&quot; /&gt;); expect(screen.getByPlaceholderText('Find items...')).toBeInTheDocument(); expect(screen.getByRole('button', { name: 'Find' })).toBeInTheDocument(); }); it('submits on pressing Enter', async () =&gt; { const handleSearch = jest.fn(); render(&lt;SearchInput onSearch={handleSearch} /&gt;); const input = screen.getByPlaceholderText('Search...'); await userEvent.type(input, 'test query{enter}'); expect(handleSearch).toHaveBeenCalledWith('test query'); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"SearchInput Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/search-input#related-components","content":" Input: The base input component used within SearchInput.Button: The button component used for the search action.Form: For more complex form handling that might incorporate the SearchInput. ","version":"Next","tagName":"h2"},{"title":"Dialog Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#import","content":" import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from '@/components/ui/dialog';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#basic-usage","content":" &lt;Dialog&gt; &lt;DialogTrigger&gt;Open Dialog&lt;/DialogTrigger&gt; &lt;DialogContent&gt; &lt;DialogHeader&gt; &lt;DialogTitle&gt;Dialog Title&lt;/DialogTitle&gt; &lt;DialogDescription&gt;This is a description of the dialog content.&lt;/DialogDescription&gt; &lt;/DialogHeader&gt; &lt;p&gt;Main content goes here.&lt;/p&gt; &lt;DialogFooter&gt; &lt;Button variant=&quot;outline&quot; onClick={() =&gt; {}}&gt;Cancel&lt;/Button&gt; &lt;Button onClick={() =&gt; {}}&gt;Save&lt;/Button&gt; &lt;/DialogFooter&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt;   ","version":"Next","tagName":"h3"},{"title":"Custom Trigger​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#custom-trigger","content":" &lt;Dialog&gt; &lt;DialogTrigger asChild&gt; &lt;Button variant=&quot;outline&quot;&gt;Custom Trigger Button&lt;/Button&gt; &lt;/DialogTrigger&gt; &lt;DialogContent&gt; &lt;DialogHeader&gt; &lt;DialogTitle&gt;Custom Trigger&lt;/DialogTitle&gt; &lt;DialogDescription&gt;A dialog triggered by a custom button element.&lt;/DialogDescription&gt; &lt;/DialogHeader&gt; &lt;p&gt;You can use any component as a trigger with the asChild prop.&lt;/p&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt;   ","version":"Next","tagName":"h3"},{"title":"Custom Close Button​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#custom-close-button","content":" &lt;Dialog&gt; &lt;DialogTrigger&gt;Open Dialog&lt;/DialogTrigger&gt; &lt;DialogContent&gt; &lt;DialogHeader&gt; &lt;DialogTitle&gt;Custom Close&lt;/DialogTitle&gt; &lt;DialogDescription&gt;This dialog has a custom close button.&lt;/DialogDescription&gt; &lt;/DialogHeader&gt; &lt;div className=&quot;py-4&quot;&gt;Dialog content here.&lt;/div&gt; &lt;DialogFooter&gt; &lt;DialogClose asChild&gt; &lt;Button variant=&quot;outline&quot;&gt;Close Dialog&lt;/Button&gt; &lt;/DialogClose&gt; &lt;/DialogFooter&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt;   ","version":"Next","tagName":"h3"},{"title":"Controlled Dialog​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#controlled-dialog","content":" 'use client'; import { useState } from 'react'; export function ControlledDialog() { const [open, setOpen] = useState(false); return ( &lt;Dialog open={open} onOpenChange={setOpen}&gt; &lt;DialogTrigger&gt;Open Controlled Dialog&lt;/DialogTrigger&gt; &lt;DialogContent&gt; &lt;DialogHeader&gt; &lt;DialogTitle&gt;Controlled Dialog&lt;/DialogTitle&gt; &lt;DialogDescription&gt;This dialog's state is controlled programmatically.&lt;/DialogDescription&gt; &lt;/DialogHeader&gt; &lt;p&gt;You can control the open state with your own state management.&lt;/p&gt; &lt;DialogFooter&gt; &lt;Button onClick={() =&gt; setOpen(false)}&gt;Close&lt;/Button&gt; &lt;/DialogFooter&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#props","content":" ","version":"Next","tagName":"h2"},{"title":"Dialog Props​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#dialog-props","content":" Prop\tType\tDefault\tDescriptionopen\tboolean\tundefined\tControls the open state when used as a controlled component defaultOpen\tboolean\tfalse\tThe default open state when uncontrolled onOpenChange\t(open: boolean) =&gt; void\tundefined\tCallback fired when the open state changes modal\tboolean\ttrue\tWhether to render as a modal dialog children\tReactNode\tRequired\tThe dialog trigger and content components  ","version":"Next","tagName":"h3"},{"title":"DialogTrigger Props​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#dialogtrigger-props","content":" Prop\tType\tDefault\tDescriptionasChild\tboolean\tfalse\tWhen true, the component will render its child instead of a default button children\tReactNode\tRequired\tThe element that triggers the dialog  ","version":"Next","tagName":"h3"},{"title":"DialogContent Props​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#dialogcontent-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the dialog content children\tReactNode\tRequired\tThe content to display inside the dialog forceMount\tboolean\tfalse\tForce the dialog to mount even when it's not open onEscapeKeyDown\t(event: KeyboardEvent) =&gt; void\tundefined\tEvent handler called when the escape key is pressed onPointerDownOutside\t(event: PointerDownOutsideEvent) =&gt; void\tundefined\tEvent handler called when a pointer event occurs outside the dialog onInteractOutside\t`(event: React.MouseEvent\tReact.TouchEvent) =&gt; void`\tundefined ...props\tReact.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Content&gt;\t-\tAll other props are passed to the underlying Radix UI Dialog Content  ","version":"Next","tagName":"h3"},{"title":"DialogHeader Props​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#dialogheader-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the dialog header children\tReactNode\tRequired\tThe content to display inside the dialog header ...props\tReact.HTMLAttributes&lt;HTMLDivElement&gt;\t-\tAll other props are passed to the underlying div element  ","version":"Next","tagName":"h3"},{"title":"DialogFooter Props​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#dialogfooter-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the dialog footer children\tReactNode\tRequired\tThe content to display inside the dialog footer ...props\tReact.HTMLAttributes&lt;HTMLDivElement&gt;\t-\tAll other props are passed to the underlying div element  ","version":"Next","tagName":"h3"},{"title":"DialogTitle Props​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#dialogtitle-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the dialog title children\tReactNode\tRequired\tThe content to display as the dialog title ...props\tReact.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Title&gt;\t-\tAll other props are passed to the underlying Radix UI Dialog Title  ","version":"Next","tagName":"h3"},{"title":"DialogDescription Props​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#dialogdescription-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes to apply to the dialog description children\tReactNode\tRequired\tThe content to display as the dialog description ...props\tReact.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Description&gt;\t-\tAll other props are passed to the underlying Radix UI Dialog Description  ","version":"Next","tagName":"h3"},{"title":"DialogClose Props​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#dialogclose-props","content":" Prop\tType\tDefault\tDescriptionasChild\tboolean\tfalse\tWhen true, the component will render its child instead of a default button children\tReactNode\t&lt;X /&gt;\tThe element used to close the dialog ...props\tReact.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Close&gt;\t-\tAll other props are passed to the underlying Radix UI Dialog Close  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#typescript","content":" import * as React from 'react'; import * as DialogPrimitive from '@radix-ui/react-dialog'; // Dialog Props type DialogProps = React.ComponentProps&lt;typeof DialogPrimitive.Root&gt;; // DialogTrigger Props type DialogTriggerProps = React.ComponentProps&lt;typeof DialogPrimitive.Trigger&gt;; // DialogContent Props type DialogContentProps = React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Content&gt;; // DialogHeader Props type DialogHeaderProps = React.HTMLAttributes&lt;HTMLDivElement&gt;; // DialogFooter Props type DialogFooterProps = React.HTMLAttributes&lt;HTMLDivElement&gt;; // DialogTitle Props type DialogTitleProps = React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Title&gt;; // DialogDescription Props type DialogDescriptionProps = React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Description&gt;; // DialogClose Props type DialogCloseProps = React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Close&gt;;   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#style-overrides","content":" The Dialog component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes to each sub-component:  &lt;Dialog&gt; &lt;DialogTrigger&gt;Open Dialog&lt;/DialogTrigger&gt; &lt;DialogContent className=&quot;max-w-md rounded-xl bg-slate-50 dark:bg-slate-900&quot;&gt; &lt;DialogHeader className=&quot;border-b pb-4&quot;&gt; &lt;DialogTitle className=&quot;text-xl text-primary&quot;&gt;Custom Title&lt;/DialogTitle&gt; &lt;DialogDescription className=&quot;text-primary/70&quot;&gt; This dialog has custom styling. &lt;/DialogDescription&gt; &lt;/DialogHeader&gt; &lt;div className=&quot;py-4&quot;&gt;Content with custom styling.&lt;/div&gt; &lt;DialogFooter className=&quot;border-t pt-4 gap-2&quot;&gt; &lt;Button variant=&quot;outline&quot; className=&quot;flex-1&quot;&gt;Cancel&lt;/Button&gt; &lt;Button className=&quot;flex-1&quot;&gt;Save&lt;/Button&gt; &lt;/DialogFooter&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt;   Customizing the animation and transition properties:  &lt;DialogContent className=&quot;data-[state=open]:animate-customFadeIn data-[state=closed]:animate-customFadeOut&quot; style={{ animationDuration: '400ms' }} &gt; {/* Dialog content */} &lt;/DialogContent&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#extending-the-component","content":" 'use client'; import { ReactNode } from 'react'; import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog'; import { Button } from '@/components/ui/button'; interface ConfirmDialogProps { open: boolean; onOpenChange: (open: boolean) =&gt; void; title: string; description?: string; confirmLabel?: string; cancelLabel?: string; onConfirm: () =&gt; void; onCancel?: () =&gt; void; children?: ReactNode; variant?: 'default' | 'destructive'; } export function ConfirmDialog({ open, onOpenChange, title, description, confirmLabel = 'Confirm', cancelLabel = 'Cancel', onConfirm, onCancel, children, variant = 'default' }: ConfirmDialogProps) { const handleCancel = () =&gt; { onOpenChange(false); onCancel?.(); }; const handleConfirm = () =&gt; { onConfirm(); onOpenChange(false); }; return ( &lt;Dialog open={open} onOpenChange={onOpenChange}&gt; &lt;DialogContent&gt; &lt;DialogHeader&gt; &lt;DialogTitle&gt;{title}&lt;/DialogTitle&gt; {description &amp;&amp; &lt;DialogDescription&gt;{description}&lt;/DialogDescription&gt;} &lt;/DialogHeader&gt; {children} &lt;DialogFooter&gt; &lt;Button variant=&quot;outline&quot; onClick={handleCancel}&gt; {cancelLabel} &lt;/Button&gt; &lt;Button variant={variant === 'destructive' ? 'destructive' : 'default'} onClick={handleConfirm} &gt; {confirmLabel} &lt;/Button&gt; &lt;/DialogFooter&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#integration-with-forms","content":" 'use client'; import { zodResolver } from '@hookform/resolvers/zod'; import { useForm } from 'react-hook-form'; import * as z from 'zod'; import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'; import { Button } from '@/components/ui/button'; import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'; import { Input } from '@/components/ui/input'; const formSchema = z.object({ name: z.string().min(2, { message: 'Name must be at least 2 characters' }), email: z.string().email({ message: 'Please enter a valid email address' }), }); export function FormDialog() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { name: '', email: '', }, }); function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { console.log(values); // Handle form submission } return ( &lt;Dialog&gt; &lt;DialogTrigger asChild&gt; &lt;Button&gt;Open Form Dialog&lt;/Button&gt; &lt;/DialogTrigger&gt; &lt;DialogContent className=&quot;sm:max-w-[425px]&quot;&gt; &lt;DialogHeader&gt; &lt;DialogTitle&gt;Edit Profile&lt;/DialogTitle&gt; &lt;/DialogHeader&gt; &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt; &lt;FormField control={form.control} name=&quot;name&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Name&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;Enter your name&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;FormField control={form.control} name=&quot;email&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Email&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;Enter your email&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;div className=&quot;flex justify-end space-x-2 pt-4&quot;&gt; &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={() =&gt; form.reset()}&gt; Cancel &lt;/Button&gt; &lt;Button type=&quot;submit&quot;&gt;Save&lt;/Button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/Form&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#integration-with-other-components","content":" 'use client'; import { useState } from 'react'; import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger } from '@/components/ui/dialog'; import { Button } from '@/components/ui/button'; import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; import { Input } from '@/components/ui/input'; export function ComplexDialog() { const [activeTab, setActiveTab] = useState('details'); return ( &lt;Dialog&gt; &lt;DialogTrigger asChild&gt; &lt;Button&gt;View Product Options&lt;/Button&gt; &lt;/DialogTrigger&gt; &lt;DialogContent className=&quot;sm:max-w-[600px]&quot;&gt; &lt;DialogHeader&gt; &lt;DialogTitle&gt;Product Configuration&lt;/DialogTitle&gt; &lt;DialogDescription&gt; Configure product options and save your preferences. &lt;/DialogDescription&gt; &lt;/DialogHeader&gt; &lt;Tabs defaultValue=&quot;details&quot; onValueChange={setActiveTab}&gt; &lt;TabsList className=&quot;grid w-full grid-cols-2&quot;&gt; &lt;TabsTrigger value=&quot;details&quot;&gt;Details&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;preferences&quot;&gt;Preferences&lt;/TabsTrigger&gt; &lt;/TabsList&gt; &lt;TabsContent value=&quot;details&quot;&gt; &lt;Card&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Product Details&lt;/CardTitle&gt; &lt;CardDescription&gt;Configure basic product information.&lt;/CardDescription&gt; &lt;/CardHeader&gt; &lt;CardContent className=&quot;space-y-4&quot;&gt; &lt;div className=&quot;space-y-2&quot;&gt; &lt;label htmlFor=&quot;name&quot; className=&quot;text-sm font-medium&quot;&gt;Name&lt;/label&gt; &lt;Input id=&quot;name&quot; placeholder=&quot;Product name&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;space-y-2&quot;&gt; &lt;label htmlFor=&quot;description&quot; className=&quot;text-sm font-medium&quot;&gt;Description&lt;/label&gt; &lt;Input id=&quot;description&quot; placeholder=&quot;Product description&quot; /&gt; &lt;/div&gt; &lt;/CardContent&gt; &lt;/Card&gt; &lt;/TabsContent&gt; &lt;TabsContent value=&quot;preferences&quot;&gt; &lt;Card&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;User Preferences&lt;/CardTitle&gt; &lt;CardDescription&gt;Configure your personal preferences.&lt;/CardDescription&gt; &lt;/CardHeader&gt; &lt;CardContent className=&quot;space-y-4&quot;&gt; &lt;div className=&quot;space-y-2&quot;&gt; &lt;label htmlFor=&quot;theme&quot; className=&quot;text-sm font-medium&quot;&gt;Theme&lt;/label&gt; &lt;Input id=&quot;theme&quot; placeholder=&quot;Choose theme&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;space-y-2&quot;&gt; &lt;label htmlFor=&quot;language&quot; className=&quot;text-sm font-medium&quot;&gt;Language&lt;/label&gt; &lt;Input id=&quot;language&quot; placeholder=&quot;Select language&quot; /&gt; &lt;/div&gt; &lt;/CardContent&gt; &lt;/Card&gt; &lt;/TabsContent&gt; &lt;/Tabs&gt; &lt;DialogFooter&gt; &lt;Button variant=&quot;outline&quot;&gt;Cancel&lt;/Button&gt; &lt;Button&gt;Save Changes&lt;/Button&gt; &lt;/DialogFooter&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#responsive-behavior","content":" The Dialog component is responsive by default, but you can enhance its behavior across different device sizes:  &lt;Dialog&gt; &lt;DialogTrigger&gt;Open Dialog&lt;/DialogTrigger&gt; &lt;DialogContent className=&quot;w-[90vw] max-w-[90vw] md:w-auto md:max-w-md lg:max-w-lg&quot;&gt; &lt;DialogHeader className=&quot;text-center sm:text-left&quot;&gt; &lt;DialogTitle className=&quot;text-xl sm:text-2xl&quot;&gt;Responsive Dialog&lt;/DialogTitle&gt; &lt;DialogDescription className=&quot;text-sm sm:text-base&quot;&gt; This dialog adjusts its size and layout based on screen size. &lt;/DialogDescription&gt; &lt;/DialogHeader&gt; &lt;div className=&quot;py-4&quot;&gt; &lt;p className=&quot;text-sm sm:text-base&quot;&gt; Content will reflow and resize based on the viewport. &lt;/p&gt; &lt;/div&gt; &lt;DialogFooter className=&quot;flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2&quot;&gt; &lt;Button variant=&quot;outline&quot; className=&quot;w-full sm:w-auto&quot;&gt;Cancel&lt;/Button&gt; &lt;Button className=&quot;w-full sm:w-auto&quot;&gt;Continue&lt;/Button&gt; &lt;/DialogFooter&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt;   The responsive behavior includes:  Mobile: Full-width dialog with stacked footer buttonsTablet: Constrained width with horizontal footer buttonsDesktop: Larger maximum width with standard layout  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#accessibility","content":" The Dialog component follows these accessibility best practices:  Implements the WAI-ARIA Dialog PatternUses appropriate ARIA roles (dialog and alertdialog) based on contentTraps focus within the dialog when openSupports keyboard navigation (Tab, Shift+Tab) for interactive elementsCloses on Escape key press by defaultPrevents interaction with content behind the dialog when openIncludes a visible close button with screen reader accessible labelHas properly associated DialogTitle and DialogDescription elementsAutomatically manages focus restoration when the dialog is closedAnnounces dialog content to screen readers when opened  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#implementation-details","content":" The component:  Is built on Radix UI's Dialog primitive for robust accessibility and keyboard handlingUses a Portal to render outside the normal DOM hierarchy, preventing stacking issuesApplies smooth animations for opening and closing transitionsRenders with a semi-transparent backdrop that prevents interaction with content underneathCenters content in the viewport with proper positioningIncludes responsive styling using Tailwind CSS with breakpoint adaptationsHandles both controlled (with open and onOpenChange) and uncontrolled usage patternsIncludes specialized layout components (Header, Footer) for consistent structureImplements a close button in the top right corner by default  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#common-pitfalls","content":" Z-index conflicts: The Dialog uses z-50 by default. If it appears behind other elements, you may need to adjust z-index values.Scrolling behavior: Long dialog content can cause issues. Use max-height constraints and enable overflow scrolling on the content section where needed.Controlled state management: When using the controlled pattern, ensure state updates are properly handled to avoid the dialog getting stuck in an open or closed state.Focus management: Custom implementations should maintain proper focus handling for accessibility.Using within Context Menu or Dropdown Menu: To activate a Dialog from these components, ensure you wrap the Menu component with the Dialog component as noted in the Shadcn documentation.Server components: The Dialog component uses client-side features and must be used within client components or with the 'use client' directive.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#testing","content":" // Example test for the Dialog component import { render, screen, fireEvent, waitFor } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { Dialog, DialogTrigger, DialogContent, DialogTitle } from '@/components/ui/dialog'; describe('Dialog', () =&gt; { it('opens when trigger is clicked', async () =&gt; { render( &lt;Dialog&gt; &lt;DialogTrigger&gt;Open Dialog&lt;/DialogTrigger&gt; &lt;DialogContent&gt; &lt;DialogTitle&gt;Test Dialog&lt;/DialogTitle&gt; &lt;p&gt;Dialog content&lt;/p&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt; ); // Check that dialog is not initially in the document expect(screen.queryByRole('dialog')).not.toBeInTheDocument(); // Click the trigger button await userEvent.click(screen.getByText('Open Dialog')); // Check that dialog is now in the document await waitFor(() =&gt; { expect(screen.getByRole('dialog')).toBeInTheDocument(); expect(screen.getByText('Test Dialog')).toBeInTheDocument(); expect(screen.getByText('Dialog content')).toBeInTheDocument(); }); }); it('closes when close button is clicked', async () =&gt; { render( &lt;Dialog&gt; &lt;DialogTrigger&gt;Open Dialog&lt;/DialogTrigger&gt; &lt;DialogContent&gt; &lt;DialogTitle&gt;Test Dialog&lt;/DialogTitle&gt; &lt;p&gt;Dialog content&lt;/p&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt; ); // Open the dialog await userEvent.click(screen.getByText('Open Dialog')); // Check that dialog is open await waitFor(() =&gt; { expect(screen.getByRole('dialog')).toBeInTheDocument(); }); // Click the close button (X in the corner) const closeButton = screen.getByRole('button', { name: /close/i }); await userEvent.click(closeButton); // Check that dialog is closed await waitFor(() =&gt; { expect(screen.queryByRole('dialog')).not.toBeInTheDocument(); }); }); it('supports controlled open state', async () =&gt; { const ControlledDialogTest = () =&gt; { const [open, setOpen] = React.useState(false); return ( &lt;div&gt; &lt;button onClick={() =&gt; setOpen(true)}&gt;Open Controlled&lt;/button&gt; &lt;Dialog open={open} onOpenChange={setOpen}&gt; &lt;DialogContent&gt; &lt;DialogTitle&gt;Controlled Dialog&lt;/DialogTitle&gt; &lt;button onClick={() =&gt; setOpen(false)}&gt;Close&lt;/button&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt; &lt;/div&gt; ); }; render(&lt;ControlledDialogTest /&gt;); // Open dialog with external button await userEvent.click(screen.getByText('Open Controlled')); // Check dialog is open await waitFor(() =&gt; { expect(screen.getByRole('dialog')).toBeInTheDocument(); }); // Close with internal button await userEvent.click(screen.getByText('Close')); // Check dialog is closed await waitFor(() =&gt; { expect(screen.queryByRole('dialog')).not.toBeInTheDocument(); }); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Dialog Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dialog#related-components","content":" AlertDialog: Similar to Dialog, but for critical confirmations that interrupt the userSheet: Extends the Dialog component to create a slide-in panel from the edge of the screenPopover: For smaller, non-modal overlays that don't block the main contentDropdownMenu: For dropdown menus that can trigger dialogsDrawer: Alternative to Dialog for mobile-friendly slide-in panels ","version":"Next","tagName":"h2"},{"title":"DropdownMenu Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#import","content":" import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem, DropdownMenuCheckboxItem, DropdownMenuRadioItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuShortcut, DropdownMenuGroup, DropdownMenuPortal, DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger, DropdownMenuRadioGroup } from '@/components/ui/dropdown-menu';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#basic-usage","content":" &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger&gt;Open Menu&lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent&gt; &lt;DropdownMenuLabel&gt;My Account&lt;/DropdownMenuLabel&gt; &lt;DropdownMenuSeparator /&gt; &lt;DropdownMenuItem&gt;Profile&lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem&gt;Settings&lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem&gt;Logout&lt;/DropdownMenuItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt;   ","version":"Next","tagName":"h3"},{"title":"With Icons and Shortcuts​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#with-icons-and-shortcuts","content":" import { UserIcon, SettingsIcon, LogOutIcon } from 'lucide-react'; &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger&gt;Options&lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent&gt; &lt;DropdownMenuLabel&gt;Actions&lt;/DropdownMenuLabel&gt; &lt;DropdownMenuSeparator /&gt; &lt;DropdownMenuItem&gt; &lt;UserIcon className=&quot;mr-2 h-4 w-4&quot; /&gt; Profile &lt;DropdownMenuShortcut&gt;⇧⌘P&lt;/DropdownMenuShortcut&gt; &lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem&gt; &lt;SettingsIcon className=&quot;mr-2 h-4 w-4&quot; /&gt; Settings &lt;DropdownMenuShortcut&gt;⌘S&lt;/DropdownMenuShortcut&gt; &lt;/DropdownMenuItem&gt; &lt;DropdownMenuSeparator /&gt; &lt;DropdownMenuItem&gt; &lt;LogOutIcon className=&quot;mr-2 h-4 w-4&quot; /&gt; Logout &lt;DropdownMenuShortcut&gt;⇧⌘Q&lt;/DropdownMenuShortcut&gt; &lt;/DropdownMenuItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt;   ","version":"Next","tagName":"h3"},{"title":"With Checkbox Items​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#with-checkbox-items","content":" import { useState } from 'react'; export function CheckboxDropdown() { const [showStatusBar, setShowStatusBar] = useState(true); const [showActivityBar, setShowActivityBar] = useState(false); const [showPanel, setShowPanel] = useState(false); return ( &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger&gt;View Options&lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent className=&quot;w-56&quot;&gt; &lt;DropdownMenuLabel&gt;Appearance&lt;/DropdownMenuLabel&gt; &lt;DropdownMenuSeparator /&gt; &lt;DropdownMenuCheckboxItem checked={showStatusBar} onCheckedChange={setShowStatusBar} &gt; Status Bar &lt;/DropdownMenuCheckboxItem&gt; &lt;DropdownMenuCheckboxItem checked={showActivityBar} onCheckedChange={setShowActivityBar} &gt; Activity Bar &lt;/DropdownMenuCheckboxItem&gt; &lt;DropdownMenuCheckboxItem checked={showPanel} onCheckedChange={setShowPanel} &gt; Panel &lt;/DropdownMenuCheckboxItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"With Radio Items​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#with-radio-items","content":" import { useState } from 'react'; export function RadioDropdown() { const [position, setPosition] = useState(&quot;bottom&quot;); return ( &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger&gt;Panel Position&lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent className=&quot;w-56&quot;&gt; &lt;DropdownMenuLabel&gt;Panel Position&lt;/DropdownMenuLabel&gt; &lt;DropdownMenuSeparator /&gt; &lt;DropdownMenuRadioGroup value={position} onValueChange={setPosition}&gt; &lt;DropdownMenuRadioItem value=&quot;top&quot;&gt;Top&lt;/DropdownMenuRadioItem&gt; &lt;DropdownMenuRadioItem value=&quot;right&quot;&gt;Right&lt;/DropdownMenuRadioItem&gt; &lt;DropdownMenuRadioItem value=&quot;bottom&quot;&gt;Bottom&lt;/DropdownMenuRadioItem&gt; &lt;DropdownMenuRadioItem value=&quot;left&quot;&gt;Left&lt;/DropdownMenuRadioItem&gt; &lt;/DropdownMenuRadioGroup&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"With Nested Submenus​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#with-nested-submenus","content":" &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger&gt;Open Menu&lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent&gt; &lt;DropdownMenuLabel&gt;Actions&lt;/DropdownMenuLabel&gt; &lt;DropdownMenuItem&gt;Direct Action&lt;/DropdownMenuItem&gt; &lt;DropdownMenuSub&gt; &lt;DropdownMenuSubTrigger&gt;More Options&lt;/DropdownMenuSubTrigger&gt; &lt;DropdownMenuSubContent&gt; &lt;DropdownMenuItem&gt;Sub Item 1&lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem&gt;Sub Item 2&lt;/DropdownMenuItem&gt; &lt;DropdownMenuSub&gt; &lt;DropdownMenuSubTrigger&gt;More Nested Options&lt;/DropdownMenuSubTrigger&gt; &lt;DropdownMenuSubContent&gt; &lt;DropdownMenuItem&gt;Deep Nested Item 1&lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem&gt;Deep Nested Item 2&lt;/DropdownMenuItem&gt; &lt;/DropdownMenuSubContent&gt; &lt;/DropdownMenuSub&gt; &lt;/DropdownMenuSubContent&gt; &lt;/DropdownMenuSub&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#props","content":" ","version":"Next","tagName":"h2"},{"title":"DropdownMenu Props​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#dropdownmenu-props","content":" Prop\tType\tDefault\tDescriptiondefaultOpen\tboolean\tfalse\tDefault open state when uncontrolled open\tboolean\tundefined\tOpen state when controlled onOpenChange\t(open: boolean) =&gt; void\tundefined\tCallback when open state changes modal\tboolean\ttrue\tWhether the dropdown is modal (blocks interaction outside) children\tReactNode\tRequired\tThe content of the dropdown menu (trigger and content)  ","version":"Next","tagName":"h3"},{"title":"DropdownMenuTrigger Props​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#dropdownmenutrigger-props","content":" Prop\tType\tDefault\tDescriptionasChild\tboolean\tfalse\tWhen true, will use child as trigger instead of a button className\tstring\tundefined\tAdditional CSS classes children\tReactNode\tRequired\tThe content of the trigger element  ","version":"Next","tagName":"h3"},{"title":"DropdownMenuContent Props​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#dropdownmenucontent-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes sideOffset\tnumber\t4\tOffset from the trigger in pixels align\t'start' | 'center' | 'end'\t'center'\tPreferred alignment of the content children\tReactNode\tRequired\tThe content of the dropdown menu ...props\tDropdownMenuContentProps All other properties passed to the Radix UI content component  ","version":"Next","tagName":"h3"},{"title":"DropdownMenuItem Props​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#dropdownmenuitem-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes inset\tboolean\tfalse\tIndents the item to align with checkbox/radio items disabled\tboolean\tfalse\tWhether the item is disabled onSelect\t(event: Event) =&gt; void\tundefined\tCallback when the item is selected children\tReactNode\tRequired\tThe content of the menu item ...props\tDropdownMenuItemProps All other properties passed to the Radix UI item component  ","version":"Next","tagName":"h3"},{"title":"DropdownMenuCheckboxItem Props​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#dropdownmenucheckboxitem-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes checked\tboolean\tfalse\tWhether the checkbox is checked onCheckedChange\t(checked: boolean) =&gt; void\tundefined\tCallback when checked state changes disabled\tboolean\tfalse\tWhether the item is disabled children\tReactNode\tRequired\tThe content of the checkbox item ...props\tDropdownMenuCheckboxItemProps All other properties passed to the Radix UI checkbox item component  ","version":"Next","tagName":"h3"},{"title":"DropdownMenuRadioItem Props​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#dropdownmenuradioitem-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes value\tstring\tRequired\tValue of this radio item disabled\tboolean\tfalse\tWhether the item is disabled children\tReactNode\tRequired\tThe content of the radio item ...props\tDropdownMenuRadioItemProps All other properties passed to the Radix UI radio item component  ","version":"Next","tagName":"h3"},{"title":"DropdownMenuRadioGroup Props​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#dropdownmenuradiogroup-props","content":" Prop\tType\tDefault\tDescriptionvalue\tstring\tundefined\tCurrent value of the radio group onValueChange\t(value: string) =&gt; void\tundefined\tCallback when value changes children\tReactNode\tRequired\tThe radio items  ","version":"Next","tagName":"h3"},{"title":"DropdownMenuLabel Props​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#dropdownmenulabel-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes inset\tboolean\tfalse\tIndents the label to align with checkbox/radio items children\tReactNode\tRequired\tThe content of the label ...props\tDropdownMenuLabelProps All other properties passed to the Radix UI label component  ","version":"Next","tagName":"h3"},{"title":"DropdownMenuSeparator Props​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#dropdownmenuseparator-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes ...props\tDropdownMenuSeparatorProps All other properties passed to the Radix UI separator component  ","version":"Next","tagName":"h3"},{"title":"DropdownMenuShortcut Props​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#dropdownmenushortcut-props","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional CSS classes children\tReactNode\tRequired\tThe shortcut text (e.g., &quot;⌘S&quot;) ...props\tHTMLAttributes&lt;HTMLSpanElement&gt; All other properties passed to the underlying span element  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#typescript","content":" import * as React from 'react'; import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'; // Basic DropdownMenu props type DropdownMenuProps = React.ComponentProps&lt;typeof DropdownMenuPrimitive.Root&gt;; // DropdownMenuTrigger props type DropdownMenuTriggerProps = React.ComponentProps&lt;typeof DropdownMenuPrimitive.Trigger&gt;; // DropdownMenuContent props type DropdownMenuContentProps = React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Content&gt;; // DropdownMenuItem props with optional inset property type DropdownMenuItemProps = React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Item&gt; &amp; { inset?: boolean; }; // DropdownMenuCheckboxItem props type DropdownMenuCheckboxItemProps = React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.CheckboxItem&gt;; // DropdownMenuRadioItem props type DropdownMenuRadioItemProps = React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.RadioItem&gt;; // DropdownMenuRadioGroup props type DropdownMenuRadioGroupProps = React.ComponentProps&lt;typeof DropdownMenuPrimitive.RadioGroup&gt;; // DropdownMenuLabel props with optional inset property type DropdownMenuLabelProps = React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Label&gt; &amp; { inset?: boolean; }; // DropdownMenuSeparator props type DropdownMenuSeparatorProps = React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Separator&gt;; // DropdownMenuShortcut props (custom component) type DropdownMenuShortcutProps = React.HTMLAttributes&lt;HTMLSpanElement&gt;; // DropdownMenuSubTrigger props with optional inset property type DropdownMenuSubTriggerProps = React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.SubTrigger&gt; &amp; { inset?: boolean; }; // DropdownMenuSubContent props type DropdownMenuSubContentProps = React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.SubContent&gt;;   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#style-overrides","content":" The DropdownMenu component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes to each sub-component:  &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger className=&quot;font-medium bg-primary text-primary-foreground hover:bg-primary/90 px-4 py-2 rounded-md&quot;&gt; Custom Trigger &lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent className=&quot;w-64 bg-zinc-50 dark:bg-zinc-900 border-zinc-300 dark:border-zinc-700&quot;&gt; &lt;DropdownMenuItem className=&quot;hover:bg-zinc-200 dark:hover:bg-zinc-800 cursor-pointer&quot;&gt; Custom Styled Item &lt;/DropdownMenuItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt;   Customizing the position and alignment:  &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger&gt;Open Menu&lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent align=&quot;end&quot; sideOffset={8} alignOffset={8}&gt; {/* Content aligned to the end with custom offsets */} &lt;DropdownMenuItem&gt;Aligned to End&lt;/DropdownMenuItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#extending-the-component","content":" import { Button } from '@/components/ui/button'; import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'; interface UserDropdownProps { username: string; userRole: string; avatarUrl?: string; onProfileClick: () =&gt; void; onSettingsClick: () =&gt; void; onLogoutClick: () =&gt; void; } export function UserDropdown({ username, userRole, avatarUrl, onProfileClick, onSettingsClick, onLogoutClick }: UserDropdownProps) { return ( &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger asChild&gt; &lt;Button variant=&quot;ghost&quot; className=&quot;relative h-8 w-8 rounded-full&quot;&gt; {avatarUrl ? ( &lt;img src={avatarUrl} alt={username} className=&quot;h-8 w-8 rounded-full&quot; /&gt; ) : ( &lt;div className=&quot;flex h-8 w-8 items-center justify-center rounded-full bg-muted&quot;&gt; {username.charAt(0).toUpperCase()} &lt;/div&gt; )} &lt;/Button&gt; &lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent className=&quot;w-56&quot; align=&quot;end&quot; forceMount&gt; &lt;div className=&quot;flex flex-col space-y-1 p-2&quot;&gt; &lt;p className=&quot;text-sm font-medium&quot;&gt;{username}&lt;/p&gt; &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;{userRole}&lt;/p&gt; &lt;/div&gt; &lt;DropdownMenuSeparator /&gt; &lt;DropdownMenuItem onClick={onProfileClick}&gt; Profile &lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem onClick={onSettingsClick}&gt; Settings &lt;/DropdownMenuItem&gt; &lt;DropdownMenuSeparator /&gt; &lt;DropdownMenuItem className=&quot;text-red-500 focus:bg-red-50 dark:focus:bg-red-950/50&quot; onClick={onLogoutClick} &gt; Logout &lt;/DropdownMenuItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#integration-with-forms","content":" import { zodResolver } from '@hookform/resolvers/zod'; import { useForm } from 'react-hook-form'; import * as z from 'zod'; import { Button } from '@/components/ui/button'; import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/Form'; import { DropdownMenu, DropdownMenuContent, DropdownMenuRadioGroup, DropdownMenuRadioItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'; const formSchema = z.object({ theme: z.enum(['light', 'dark', 'system'], { required_error: &quot;Please select a theme&quot;, }), }); export function ThemeSelector() { const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { theme: 'system', }, }); function onSubmit(values: z.infer&lt;typeof formSchema&gt;) { console.log(values); // Apply theme logic } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt; &lt;FormField control={form.control} name=&quot;theme&quot; render={({ field }) =&gt; ( &lt;FormItem className=&quot;flex flex-col&quot;&gt; &lt;FormLabel&gt;Theme&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger asChild&gt; &lt;Button variant=&quot;outline&quot; className=&quot;w-full justify-between&quot;&gt; {field.value.charAt(0).toUpperCase() + field.value.slice(1)} &lt;span className=&quot;sr-only&quot;&gt;Toggle theme menu&lt;/span&gt; &lt;/Button&gt; &lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent className=&quot;w-full min-w-[200px]&quot;&gt; &lt;DropdownMenuRadioGroup value={field.value} onValueChange={field.onChange} &gt; &lt;DropdownMenuRadioItem value=&quot;light&quot;&gt;Light&lt;/DropdownMenuRadioItem&gt; &lt;DropdownMenuRadioItem value=&quot;dark&quot;&gt;Dark&lt;/DropdownMenuRadioItem&gt; &lt;DropdownMenuRadioItem value=&quot;system&quot;&gt;System&lt;/DropdownMenuRadioItem&gt; &lt;/DropdownMenuRadioGroup&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;Button type=&quot;submit&quot;&gt;Save preferences&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#integration-with-other-components","content":" import { Button } from '@/components/ui/button'; import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'; import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'; import { MoreHorizontal } from 'lucide-react'; export function ProjectCard({ project }) { return ( &lt;Card&gt; &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt; &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt; {project.name} &lt;/CardTitle&gt; &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger asChild&gt; &lt;Button variant=&quot;ghost&quot; className=&quot;h-8 w-8 p-0&quot;&gt; &lt;span className=&quot;sr-only&quot;&gt;Open menu&lt;/span&gt; &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt; &lt;/Button&gt; &lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent align=&quot;end&quot;&gt; &lt;DropdownMenuItem onClick={() =&gt; window.location.href = `/projects/${project.id}`}&gt; View &lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem onClick={() =&gt; window.location.href = `/projects/${project.id}/edit`}&gt; Edit &lt;/DropdownMenuItem&gt; &lt;DropdownMenuSeparator /&gt; &lt;DropdownMenuItem className=&quot;text-red-500 focus:bg-red-50 dark:focus:bg-red-950/50&quot; onClick={() =&gt; alert(`Delete ${project.name}`)} &gt; Delete &lt;/DropdownMenuItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;{project.description}&lt;/p&gt; &lt;div className=&quot;mt-4 text-2xl font-bold&quot;&gt;{project.stats.value}&lt;/div&gt; &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;{project.stats.label}&lt;/p&gt; &lt;/CardContent&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#responsive-behavior","content":" The DropdownMenu component adapts to different screen sizes automatically, but you can enhance its behavior on specific devices:  &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger className=&quot;hidden md:flex&quot;&gt; Desktop Menu &lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent className=&quot;w-40 md:w-56 lg:w-64&quot;&gt; &lt;DropdownMenuItem className=&quot;hidden md:flex&quot;&gt; Desktop-only Option &lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem&gt; Responsive Option &lt;/DropdownMenuItem&gt; &lt;DropdownMenuSub&gt; &lt;DropdownMenuSubTrigger&gt;More Options&lt;/DropdownMenuSubTrigger&gt; &lt;DropdownMenuSubContent className=&quot;w-32 md:w-48&quot;&gt; &lt;DropdownMenuItem className=&quot;text-xs md:text-sm&quot;&gt; Responsive submenu option &lt;/DropdownMenuItem&gt; &lt;/DropdownMenuSubContent&gt; &lt;/DropdownMenuSub&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt;   The responsive behavior includes:  Mobile: Smaller width dropdown with appropriate text and spacingTablet: Medium width dropdown with standard text sizeDesktop: Full-featured dropdown with all options visible  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#accessibility","content":" The DropdownMenu component follows these accessibility best practices:  Uses the WAI-ARIA menu pattern for proper accessibilityImplements keyboard navigation for all menu items and submenusSupports arrow key navigation (up/down to navigate, right to enter a submenu, left to close a submenu)Allows escape key to close menus and submenusManages focus properly when opening and closing menusProvides proper ARIA roles, states, and propertiesIncludes proper contrast ratios for all elements and statesUses Radix UI's primitives which prioritize accessibilitySupports screen readers with proper labelingHandles disabled states appropriately for menu itemsManages menu positioning based on available viewport space  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#implementation-details","content":" The component:  Is built on Radix UI's DropdownMenu primitive for robust accessibilityUses portals to render menu content outside the DOM hierarchy to avoid clippingApplies consistent styling with Tailwind CSSHandles animations for opening/closing with proper transitionsSupports submenus with proper nesting and transitionsIncludes specialized item types (checkbox, radio) with correct indicatorsSupports controlled and uncontrolled usage patternsUses the inset prop to align items with different indentation needsAdds keyboard shortcut display support via the DropdownMenuShortcut componentIs configured for appropriate z-index layering to work well with other overlay components  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#common-pitfalls","content":" Event propagation: Use onSelect={(e) =&gt; e.preventDefault()} when you need to prevent menu closing on item clickForm integration: When using within forms, ensure proper state management to avoid form submission on menu item selectionControlled state: When using controlled open state, ensure you handle state updates properly to avoid the dropdown being stuckPortal conflicts: If using multiple dropdown menus or other portaled components close to each other, z-index conflicts might occurResponsive design: Be cautious with very wide dropdown content on mobile screens, as it might extend beyond the viewportNesting depth: Avoid deeply nested submenus as they can create poor user experience, especially on mobileAnimation performance: Complex animations in dropdown menus can cause performance issues on lower-end devicesServer components: The DropdownMenu component uses client-side features and must be used within client components (note the 'use client' directive)  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#testing","content":" // Example test for the DropdownMenu component import { render, screen, fireEvent, waitFor } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from '@/components/ui/dropdown-menu'; describe('DropdownMenu', () =&gt; { it('opens the dropdown when trigger is clicked', async () =&gt; { render( &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger&gt;Open Menu&lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent&gt; &lt;DropdownMenuItem&gt;Item 1&lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem&gt;Item 2&lt;/DropdownMenuItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt; ); // Trigger is visible and menu is not initially expect(screen.getByText('Open Menu')).toBeInTheDocument(); expect(screen.queryByText('Item 1')).not.toBeInTheDocument(); // Click trigger to open menu await userEvent.click(screen.getByText('Open Menu')); // Menu items should now be visible await waitFor(() =&gt; { expect(screen.getByText('Item 1')).toBeInTheDocument(); expect(screen.getByText('Item 2')).toBeInTheDocument(); }); }); it('calls onSelect when menu item is clicked', async () =&gt; { const handleSelect = jest.fn(); render( &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger&gt;Open Menu&lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent&gt; &lt;DropdownMenuItem onSelect={handleSelect}&gt; Clickable Item &lt;/DropdownMenuItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt; ); // Open the menu await userEvent.click(screen.getByText('Open Menu')); // Click the menu item await waitFor(() =&gt; { expect(screen.getByText('Clickable Item')).toBeInTheDocument(); }); await userEvent.click(screen.getByText('Clickable Item')); // Check if handler was called expect(handleSelect).toHaveBeenCalledTimes(1); }); it('supports checkbox items with checked states', async () =&gt; { const handleCheckedChange = jest.fn(); function TestComponent() { const [checked, setChecked] = React.useState(false); return ( &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger&gt;Open Menu&lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent&gt; &lt;DropdownMenuCheckboxItem checked={checked} onCheckedChange={(value) =&gt; { setChecked(value); handleCheckedChange(value); }} &gt; Toggle Option &lt;/DropdownMenuCheckboxItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt; ); } render(&lt;TestComponent /&gt;); // Open the menu await userEvent.click(screen.getByText('Open Menu')); // Click the checkbox item await waitFor(() =&gt; { expect(screen.getByText('Toggle Option')).toBeInTheDocument(); }); await userEvent.click(screen.getByText('Toggle Option')); // Check if handler was called with true expect(handleCheckedChange).toHaveBeenCalledWith(true); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"DropdownMenu Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/dropdown-menu#related-components","content":" NavigationMenu: For main navigation with link-based navigation patternsSelect: For selecting a single value from a list of optionsDialog: For displaying content that requires user interaction in a modalPopover: For displaying floating content that doesn't close when interacting with other parts of the pageContextMenu: Similar to DropdownMenu but triggered by right-click instead of a button ","version":"Next","tagName":"h2"},{"title":"Popover Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#import","content":" import { Popover, PopoverTrigger, PopoverContent } from '@/components/ui/popover';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#basic-usage","content":" &lt;Popover&gt; &lt;PopoverTrigger&gt;Open&lt;/PopoverTrigger&gt; &lt;PopoverContent&gt; Place content for the popover here. &lt;/PopoverContent&gt; &lt;/Popover&gt;   ","version":"Next","tagName":"h3"},{"title":"With Custom Trigger​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#with-custom-trigger","content":" import { Button } from '@/components/ui/button'; &lt;Popover&gt; &lt;PopoverTrigger asChild&gt; &lt;Button variant=&quot;outline&quot;&gt;Open Settings&lt;/Button&gt; &lt;/PopoverTrigger&gt; &lt;PopoverContent&gt; &lt;div className=&quot;grid gap-4&quot;&gt; &lt;div className=&quot;space-y-2&quot;&gt; &lt;h4 className=&quot;font-medium leading-none&quot;&gt;Settings&lt;/h4&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt; Configure your preferences here. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/PopoverContent&gt; &lt;/Popover&gt;   ","version":"Next","tagName":"h3"},{"title":"With Form Elements​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#with-form-elements","content":" import { Button } from '@/components/ui/button'; import { Input } from '@/components/ui/input'; import { Label } from '@/components/ui/label'; &lt;Popover&gt; &lt;PopoverTrigger asChild&gt; &lt;Button variant=&quot;outline&quot;&gt;Open Dimensions&lt;/Button&gt; &lt;/PopoverTrigger&gt; &lt;PopoverContent className=&quot;w-80&quot;&gt; &lt;div className=&quot;grid gap-4&quot;&gt; &lt;div className=&quot;space-y-2&quot;&gt; &lt;h4 className=&quot;font-medium leading-none&quot;&gt;Dimensions&lt;/h4&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt; Set the dimensions for the layer. &lt;/p&gt; &lt;/div&gt; &lt;div className=&quot;grid gap-2&quot;&gt; &lt;div className=&quot;grid grid-cols-3 items-center gap-4&quot;&gt; &lt;Label htmlFor=&quot;width&quot;&gt;Width&lt;/Label&gt; &lt;Input id=&quot;width&quot; defaultValue=&quot;100%&quot; className=&quot;col-span-2 h-8&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;grid grid-cols-3 items-center gap-4&quot;&gt; &lt;Label htmlFor=&quot;maxWidth&quot;&gt;Max. width&lt;/Label&gt; &lt;Input id=&quot;maxWidth&quot; defaultValue=&quot;300px&quot; className=&quot;col-span-2 h-8&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;grid grid-cols-3 items-center gap-4&quot;&gt; &lt;Label htmlFor=&quot;height&quot;&gt;Height&lt;/Label&gt; &lt;Input id=&quot;height&quot; defaultValue=&quot;25px&quot; className=&quot;col-span-2 h-8&quot; /&gt; &lt;/div&gt; &lt;div className=&quot;grid grid-cols-3 items-center gap-4&quot;&gt; &lt;Label htmlFor=&quot;maxHeight&quot;&gt;Max. height&lt;/Label&gt; &lt;Input id=&quot;maxHeight&quot; defaultValue=&quot;none&quot; className=&quot;col-span-2 h-8&quot; /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/PopoverContent&gt; &lt;/Popover&gt;   ","version":"Next","tagName":"h3"},{"title":"With Controlled State​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#with-controlled-state","content":" import { useState } from 'react'; import { Button } from '@/components/ui/button'; const MyComponent = () =&gt; { const [open, setOpen] = useState(false); return ( &lt;Popover open={open} onOpenChange={setOpen}&gt; &lt;PopoverTrigger asChild&gt; &lt;Button variant=&quot;outline&quot;&gt; {open ? 'Close' : 'Open'} Settings &lt;/Button&gt; &lt;/PopoverTrigger&gt; &lt;PopoverContent&gt; &lt;div className=&quot;grid gap-4&quot;&gt; &lt;div className=&quot;space-y-2&quot;&gt; &lt;h4 className=&quot;font-medium leading-none&quot;&gt;Settings&lt;/h4&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt; This is a controlled popover, managed by state. &lt;/p&gt; &lt;/div&gt; &lt;Button onClick={() =&gt; setOpen(false)}&gt;Close&lt;/Button&gt; &lt;/div&gt; &lt;/PopoverContent&gt; &lt;/Popover&gt; ); };   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#props","content":" ","version":"Next","tagName":"h2"},{"title":"Popover Props​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#popover-props","content":" Prop\tType\tDefault\tDescriptionopen\tboolean\tundefined\tControls the open state of the popover when using controlled mode defaultOpen\tboolean\tfalse\tThe initial open state when uncontrolled onOpenChange\t(open: boolean) =&gt; void\tundefined\tEvent handler called when the open state changes modal\tboolean\tfalse\tWhen true, interaction with outside elements will be disabled and only popover content will be visible to screen readers  ","version":"Next","tagName":"h3"},{"title":"PopoverTrigger Props​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#popovertrigger-props","content":" Prop\tType\tDefault\tDescriptionasChild\tboolean\tfalse\tWhen true, the trigger will use the child element as its trigger instead of wrapping it All HTML button attributes\tButtonHTMLAttributes&lt;HTMLButtonElement&gt;\t-\tSupports all HTML button attributes  ","version":"Next","tagName":"h3"},{"title":"PopoverContent Props​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#popovercontent-props","content":" Prop\tType\tDefault\tDescriptionalign\t'start' | 'center' | 'end'\t'center'\tAlignment of the popover relative to the trigger sideOffset\tnumber\t4\tDistance in pixels from the trigger alignOffset\tnumber\t0\tAdditional offset along the alignment axis avoidCollisions\tboolean\ttrue\tWhether to move content to avoid collisions with the viewport edges collisionBoundary\tElement | null | Array&lt;Element | null&gt;\t[]\tElement(s) to avoid collisions with collisionPadding\tnumber | Partial&lt;Record&lt;Side, number&gt;&gt;\t0\tSpace between content and the boundary arrowPadding\tnumber\t0\tPadding between the arrow and the edges of the content sticky\t'partial' | 'always'\t'partial'\tBehavior when content hits the boundary edges hideWhenDetached\tboolean\tfalse\tWhether to hide content when it's trigger is fully obscured className\tstring\tundefined\tAdditional CSS classes to apply to the content All HTML div attributes\tHTMLAttributes&lt;HTMLDivElement&gt;\t-\tSupports all HTML div attributes  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#typescript","content":" // Popover Component Types import * as PopoverPrimitive from '@radix-ui/react-popover'; import React from 'react'; // Main Popover type PopoverProps = React.ComponentProps&lt;typeof PopoverPrimitive.Root&gt;; // PopoverTrigger type PopoverTriggerProps = React.ComponentProps&lt;typeof PopoverPrimitive.Trigger&gt;; // PopoverContent type PopoverContentProps = React.ComponentPropsWithoutRef&lt;typeof PopoverPrimitive.Content&gt; &amp; { className?: string; align?: 'start' | 'center' | 'end'; sideOffset?: number; };   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#style-overrides","content":" The Popover component can be customized in the following ways:  Using the className prop on the PopoverContent component to add additional Tailwind classesModifying the component's base styles in your project's CSSCustomizing the Popover through the Tailwind theme in your tailwind.config.js file  &lt;PopoverContent className=&quot;w-96 bg-blue-50 p-6 border-blue-200&quot;&gt; Custom styled content here &lt;/PopoverContent&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#extending-the-component","content":" import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'; import { Button } from '@/components/ui/button'; export function ColorPickerPopover({ onColorSelect, ...props }) { const colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF']; return ( &lt;Popover {...props}&gt; &lt;PopoverTrigger asChild&gt; &lt;Button variant=&quot;outline&quot;&gt;Select Color&lt;/Button&gt; &lt;/PopoverTrigger&gt; &lt;PopoverContent className=&quot;w-64 p-2&quot;&gt; &lt;div className=&quot;grid grid-cols-5 gap-2&quot;&gt; {colors.map((color) =&gt; ( &lt;button key={color} className=&quot;h-8 w-8 rounded-md border&quot; style={{ backgroundColor: color }} onClick={() =&gt; onColorSelect(color)} /&gt; ))} &lt;/div&gt; &lt;/PopoverContent&gt; &lt;/Popover&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with React Hook Form​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#integration-with-react-hook-form","content":" import { useForm } from 'react-hook-form'; import { Button } from '@/components/ui/button'; import { Input } from '@/components/ui/input'; import { Label } from '@/components/ui/label'; import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'; function FilterForm() { const { register, handleSubmit } = useForm({ defaultValues: { name: '', price: '', } }); const onSubmit = (data) =&gt; { console.log(data); }; return ( &lt;Popover&gt; &lt;PopoverTrigger asChild&gt; &lt;Button variant=&quot;outline&quot;&gt;Filters&lt;/Button&gt; &lt;/PopoverTrigger&gt; &lt;PopoverContent className=&quot;w-80&quot;&gt; &lt;form onSubmit={handleSubmit(onSubmit)}&gt; &lt;div className=&quot;grid gap-4&quot;&gt; &lt;div className=&quot;space-y-2&quot;&gt; &lt;h4 className=&quot;font-medium leading-none&quot;&gt;Filters&lt;/h4&gt; &lt;/div&gt; &lt;div className=&quot;grid gap-2&quot;&gt; &lt;div className=&quot;grid gap-1&quot;&gt; &lt;Label htmlFor=&quot;name&quot;&gt;Name&lt;/Label&gt; &lt;Input id=&quot;name&quot; {...register('name')} /&gt; &lt;/div&gt; &lt;div className=&quot;grid gap-1&quot;&gt; &lt;Label htmlFor=&quot;price&quot;&gt;Price&lt;/Label&gt; &lt;Input id=&quot;price&quot; type=&quot;number&quot; {...register('price')} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;Button type=&quot;submit&quot;&gt;Apply Filters&lt;/Button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/PopoverContent&gt; &lt;/Popover&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#integration-with-other-components","content":" import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'; import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'; import { Button } from '@/components/ui/button'; import { HelpCircle } from 'lucide-react'; function DashboardCard() { return ( &lt;Card&gt; &lt;CardHeader className=&quot;flex flex-row items-center justify-between&quot;&gt; &lt;CardTitle&gt;Monthly Revenue&lt;/CardTitle&gt; &lt;Popover&gt; &lt;PopoverTrigger asChild&gt; &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot;&gt; &lt;HelpCircle className=&quot;h-4 w-4&quot; /&gt; &lt;/Button&gt; &lt;/PopoverTrigger&gt; &lt;PopoverContent className=&quot;w-80&quot;&gt; &lt;div className=&quot;space-y-2&quot;&gt; &lt;h4 className=&quot;font-medium leading-none&quot;&gt;About this chart&lt;/h4&gt; &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt; This chart shows the monthly revenue for the current year. The data is updated at the beginning of each month. &lt;/p&gt; &lt;/div&gt; &lt;/PopoverContent&gt; &lt;/Popover&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; {/* Chart content */} &lt;/CardContent&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#responsive-behavior","content":" The Popover component responds to different screen sizes in the following ways:  Mobile: On mobile devices, the popover content has a smaller width by default, with the content adjusting to fit available space.Tablet: Width expands to accommodate the content better, but still maintains constraints.Desktop: Full width as defined (default: 18rem/w-72), with positioning relative to the trigger.  Responsive customization example:  &lt;PopoverContent className=&quot;w-[280px] md:w-[350px] lg:w-[450px]&quot;&gt; {/* Content that adapts to screen size */} &lt;/PopoverContent&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#accessibility","content":" The Popover component follows these accessibility best practices:  Uses the WAI-ARIA design pattern for popovers and tooltipsManages focus correctly, trapping it inside the popover when openSupports keyboard navigation with Tab key for internal elementsUses proper ARIA attributes for describing relationships and statesClose the popover when the Escape key is pressedProperly announces state changes to screen readers  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#implementation-details","content":" The component:  Is built on top of Radix UI's Popover primitive componentUses React's forwardRef to properly forward refs to the underlying DOM elementsImplements a Portal to render the popover content outside the DOM hierarchy for proper z-index stackingUses animations for smooth opening and closing transitionsAdopts Tailwind's animation classes for consistent animation behaviorsUses CSS custom properties for positioning through Radix's transform origin  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#common-pitfalls","content":" State Management Issues: When using controlled mode with open and onOpenChange, ensure you correctly update the state or the popover may behave unexpectedly.Z-index Conflicts: The popover has a z-index of 50 by default, which may need adjustment if used inside other components with higher z-index values.Overflowing Content: The popover has a fixed width by default (18rem/w-72). For wider content, specify a custom width className.Modal Behavior: When using modal={true}, be aware that it prevents interaction with the rest of the application, which might not be desired in all cases.Positioning in Scrolling Containers: If the trigger is inside a scrolling container, the popover may not position correctly. Use portals appropriately.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#testing","content":" // Example test for the Popover component import { render, screen, fireEvent } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { Popover, PopoverTrigger, PopoverContent } from '@/components/ui/popover'; describe('Popover', () =&gt; { it('renders the trigger and shows content when clicked', async () =&gt; { render( &lt;Popover&gt; &lt;PopoverTrigger&gt;Open Popover&lt;/PopoverTrigger&gt; &lt;PopoverContent&gt;Popover Content&lt;/PopoverContent&gt; &lt;/Popover&gt; ); expect(screen.getByText('Open Popover')).toBeInTheDocument(); // Content should not be visible initially expect(screen.queryByText('Popover Content')).not.toBeInTheDocument(); // Click the trigger await userEvent.click(screen.getByText('Open Popover')); // Content should now be visible expect(screen.getByText('Popover Content')).toBeInTheDocument(); // Click outside should close the popover await userEvent.click(document.body); // Content should not be visible again expect(screen.queryByText('Popover Content')).not.toBeInTheDocument(); }); it('supports controlled mode', async () =&gt; { const TestComponent = () =&gt; { const [open, setOpen] = React.useState(false); return ( &lt;Popover open={open} onOpenChange={setOpen}&gt; &lt;PopoverTrigger&gt;Toggle&lt;/PopoverTrigger&gt; &lt;PopoverContent&gt;Controlled Content&lt;/PopoverContent&gt; &lt;/Popover&gt; ); }; render(&lt;TestComponent /&gt;); // Content should not be visible initially expect(screen.queryByText('Controlled Content')).not.toBeInTheDocument(); // Click the trigger await userEvent.click(screen.getByText('Toggle')); // Content should now be visible expect(screen.getByText('Controlled Content')).toBeInTheDocument(); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Popover Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/popover#related-components","content":" Dialog: Similar to Popover but designed for more complex modal interactions that require user attention.Tooltip: Used for simple text hints, with hover/focus activation rather than click.DropdownMenu: Used for creating dropdown menus with multiple options.HoverCard: Similar to Popover but activated on hover instead of click. ","version":"Next","tagName":"h2"},{"title":"Development Blueprint","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint","content":"","keywords":"","version":"Next"},{"title":"Decomposition into Manageable Chunks​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#decomposition-into-manageable-chunks","content":" ","version":"Next","tagName":"h2"},{"title":"Chunk 1: Project Setup​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-1-project-setup","content":" Initialize Next.js 14 project with TypeScript 5.2+Configure TailwindCSS 3.3+Set up ESLint 8.x and Prettier 3.xCreate basic project structureImplement basic layout components  ","version":"Next","tagName":"h3"},{"title":"Chunk 2: Supabase Integration​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-2-supabase-integration","content":" Set up Supabase 2.x projectConfigure environment variablesCreate database connection utilitiesImplement authentication contextCreate database schema for core entities  ","version":"Next","tagName":"h3"},{"title":"Chunk 3: User Authentication​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-3-user-authentication","content":" Implement registration flowImplement login flowCreate anonymous session handlingBuild user profile managementImplement session persistence with Supabase Auth  ","version":"Next","tagName":"h3"},{"title":"Chunk 4: Core API Routes​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-4-core-api-routes","content":" Implement authentication API routesCreate testing infrastructure for API routes using Jest 29.x  ","version":"Next","tagName":"h3"},{"title":"Detailed Implementation Steps​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#detailed-implementation-steps","content":" ","version":"Next","tagName":"h2"},{"title":"Chunk 1: Project Setup​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-1-project-setup-1","content":" Initialize Next.js 14 project with TypeScript 5.2+ configurationInstall and configure TailwindCSS 3.3+Set up ESLint 8.x and Prettier 3.x with appropriate rulesCreate basic folder structure (app, components, lib, utils, contexts)Implement basic layout components (Header, Footer, Layout)Create placeholder pages for main app routesSet up testing infrastructure with Jest 29.x and React Testing Library 14.x  ","version":"Next","tagName":"h3"},{"title":"Chunk 2: Supabase Integration​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-2-supabase-integration-1","content":" Create Supabase 2.x project and configure settingsSet up environment variables for Supabase connectionCreate Supabase client utility with @supabase/supabase-js v2.xDefine TypeScript interfaces for database schemaImplement database schema for users tableSet up Row Level Security policiesCreate database helper functions  ","version":"Next","tagName":"h3"},{"title":"Chunk 3: User Authentication​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-3-user-authentication-1","content":" Create authentication context provider using Supabase AuthImplement email/password registrationBuild login form and functionalityCreate anonymous session creationImplement session persistence using Supabase session managementBuild user profile componentCreate authentication hooks for componentsImplement protected routes  ","version":"Next","tagName":"h3"},{"title":"Chunk 4: Core API Routes​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-4-core-api-routes-1","content":" Create authentication API routes (register, login, anonymous)Create testing helpers for API routes with Jest 29.xBuild middleware for authentication and authorization  ","version":"Next","tagName":"h3"},{"title":"Refined Implementation Tasks (Smallest Units of Work)​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#refined-implementation-tasks-smallest-units-of-work","content":" ","version":"Next","tagName":"h2"},{"title":"Chunk 1: Project Setup​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-1-project-setup-2","content":" Initialize Next.js Project Create Next.js 14 project with TypeScript 5.2+Set up Git repositoryConfigure basic Next.js settings with app router Configure Styling and Linting Install and configure TailwindCSS 3.3+Set up ESLint 8.x with TypeScript rulesConfigure Prettier 3.xCreate linting scripts Set Up Project Structure Create folder structure for components, app directory, lib, utils, contexts, and testsAdd README with project setup instructionsCreate .env.example file Implement Basic Layout Components Create Layout component with React 18.x featuresBuild Header component using TailwindCSS 3.3+ utilitiesImplement Footer componentAdd global styles Configure Testing Infrastructure Install Jest 29.x and React Testing Library 14.xSet up testing configurationCreate test helpersWrite example test for Layout component  ","version":"Next","tagName":"h3"},{"title":"Chunk 2: Supabase Integration​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-2-supabase-integration-2","content":" Set Up Supabase Project Create Supabase project (v2.x)Configure authentication settingsSet up environment variablesCreate Supabase client utility with @supabase/supabase-js v2.x Define Core TypeScript Interfaces Create User interfaceDefine database types fileImplement TypeScript 5.2+ features for type safety Implement Users Table Schema Create SQL for users tableSet up RLS policies for usersTest user table operationsCreate user utility functions Create Database Helper Functions Implement user database functionsCreate helper functions with Supabase 2.x Query BuilderWrite tests for database functions  ","version":"Next","tagName":"h3"},{"title":"Chunk 3: User Authentication​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-3-user-authentication-2","content":" Create Authentication Context Build AuthContext with React 18.x Context APIImplement useAuth hookCreate authentication state types with TypeScript 5.2+Write tests for authentication context Implement Registration Flow Create registration form componentBuild form validation with Zod 3.xImplement registration API call with Supabase AuthHandle registration success/failure Build Login Functionality Create login form componentImplement login API callHandle login success/failureAdd &quot;remember me&quot; functionality Create Anonymous Session Handling Implement anonymous login flow with Supabase AuthCreate session storageBuild session recovery mechanismTest anonymous sessions Implement Protected Routes Create authentication check middleware for Next.js 14Build protected page wrappersImplement redirect logicTest protected routes  ","version":"Next","tagName":"h3"},{"title":"Chunk 4: Core API Routes​","type":1,"pageTitle":"Development Blueprint","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/blueprint#chunk-4-core-api-routes-2","content":" Create Authentication API Routes Implement register endpoint with Next.js 14 API routesBuild login endpointCreate anonymous session endpointAdd session validation middleware Implement API Testing Infrastructure Create API test helpers with Jest 29.xBuild mock Supabase client for testingImplement request/response mocksWrite example API tests ","version":"Next","tagName":"h3"},{"title":"Contributing","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#getting-started","content":" ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#prerequisites","content":" Before you begin, ensure you have the following installed:  Node.js 18.0 or laternpm or yarnGit  ","version":"Next","tagName":"h3"},{"title":"Fork and Clone​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#fork-and-clone","content":" Fork the repository on GitHubClone your fork locally:  git clone https://github.com/YOUR-USERNAME/nextjs-ts-tailwind-supabase-starter.git cd nextjs-ts-tailwind-supabase-starter   Add the original repository as a remote:  git remote add upstream https://github.com/MGH/nextjs-ts-tailwind-supabase-starter.git   Install dependencies:  npm install   ","version":"Next","tagName":"h3"},{"title":"Development Workflow​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#development-workflow","content":" ","version":"Next","tagName":"h2"},{"title":"Creating a Branch​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#creating-a-branch","content":" Create a new branch for your changes:  git checkout -b feature/your-feature-name   Use a descriptive branch name that reflects the changes you're making. Prefix the branch name with:  feature/ for new featuresfix/ for bug fixesdocs/ for documentation changeschore/ for maintenance tasks  ","version":"Next","tagName":"h3"},{"title":"Making Changes​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#making-changes","content":" Make your changes to the codebaseEnsure your code follows the project's coding standards (ESLint and Prettier are configured)Run tests to ensure your changes don't break existing functionality:  npm run test   If you're adding a new feature, make sure to add appropriate tests  ","version":"Next","tagName":"h3"},{"title":"Committing Changes​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#committing-changes","content":" Follow the Conventional Commits format for your commit messages:  type(scope): short description longer description if necessary   Where type is one of:  feat: A new featurefix: A bug fixdocs: Documentation changesstyle: Changes that don't affect the code's functionality (formatting, etc.)refactor: Code changes that neither fix a bug nor add a featuretest: Adding or fixing testschore: Changes to the build process, tools, etc.  And scope is optional but should indicate what part of the codebase is affected.  Example:  feat(auth): add support for magic link authentication   ","version":"Next","tagName":"h3"},{"title":"Submitting a Pull Request​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#submitting-a-pull-request","content":" Push your changes to your fork:  git push origin feature/your-feature-name   Go to the original repository on GitHub and click &quot;New Pull Request&quot;Select your branch and fill out the PR templateSubmit the pull request  ","version":"Next","tagName":"h3"},{"title":"Pull Request Review Process​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#pull-request-review-process","content":" Pull requests will be reviewed by the maintainers. During the review:  Automated tests will run to verify your changesMaintainers will review your code for: FunctionalityCode qualityTest coverageDocumentation Feedback may be provided requesting changesOnce approved, your PR will be merged  ","version":"Next","tagName":"h3"},{"title":"Coding Standards​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#coding-standards","content":" ","version":"Next","tagName":"h2"},{"title":"TypeScript​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#typescript","content":" Use TypeScript for all new codeEnsure strong typing (avoid any)Follow the existing type structure  ","version":"Next","tagName":"h3"},{"title":"React and Next.js​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#react-and-nextjs","content":" Use functional components with hooksFollow React 18 best practicesUse Next.js 14 App Router conventionsPrefer server components when appropriate  ","version":"Next","tagName":"h3"},{"title":"CSS and Styling​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#css-and-styling","content":" Use TailwindCSS for stylingFollow the project's utility-first approachUse the shadcn/ui component patterns when applicable  ","version":"Next","tagName":"h3"},{"title":"Testing​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#testing","content":" Write tests for all new functionalityMaintain or improve test coverageFollow the testing patterns described in the Testing documentation  ","version":"Next","tagName":"h3"},{"title":"Documentation​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#documentation","content":" When making changes, update the relevant documentation:  Add or update docstrings for functions and componentsUpdate markdown documentation in the /docs-website directoryFor significant features, add examples  ","version":"Next","tagName":"h2"},{"title":"Versioning​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#versioning","content":" We follow Semantic Versioning:  MAJOR version for incompatible API changesMINOR version for backwards-compatible functionalityPATCH version for backwards-compatible bug fixes  ","version":"Next","tagName":"h2"},{"title":"Code of Conduct​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#code-of-conduct","content":" By participating in this project, you agree to abide by our Code of Conduct:  Be respectful and inclusiveBe constructive in feedbackFocus on the issue, not the personBe patient with others, especially newcomers  ","version":"Next","tagName":"h2"},{"title":"Recognition​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#recognition","content":" Contributors will be acknowledged in the project's README.md and CONTRIBUTORS.md files.  ","version":"Next","tagName":"h2"},{"title":"Questions and Support​","type":1,"pageTitle":"Contributing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/contributing#questions-and-support","content":" If you have questions or need support:  Open an issue for bugs or feature requestsUse discussions for general questionsRefer to the documentation first  Thank you for contributing to the Next.js TS Tailwind Supabase Starter project! ","version":"Next","tagName":"h2"},{"title":"Table Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#import","content":" import { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption } from '@/components/ui/table';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#basic-usage","content":" &lt;Table&gt; &lt;TableHeader&gt; &lt;TableRow&gt; &lt;TableHead&gt;Name&lt;/TableHead&gt; &lt;TableHead&gt;Status&lt;/TableHead&gt; &lt;TableHead&gt;Role&lt;/TableHead&gt; &lt;/TableRow&gt; &lt;/TableHeader&gt; &lt;TableBody&gt; &lt;TableRow&gt; &lt;TableCell&gt;John Doe&lt;/TableCell&gt; &lt;TableCell&gt;Active&lt;/TableCell&gt; &lt;TableCell&gt;Developer&lt;/TableCell&gt; &lt;/TableRow&gt; &lt;TableRow&gt; &lt;TableCell&gt;Jane Smith&lt;/TableCell&gt; &lt;TableCell&gt;Inactive&lt;/TableCell&gt; &lt;TableCell&gt;Designer&lt;/TableCell&gt; &lt;/TableRow&gt; &lt;/TableBody&gt; &lt;/Table&gt;   ","version":"Next","tagName":"h3"},{"title":"With Caption and Footer​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#with-caption-and-footer","content":" &lt;Table&gt; &lt;TableCaption&gt;Employee list with roles and status&lt;/TableCaption&gt; &lt;TableHeader&gt; &lt;TableRow&gt; &lt;TableHead className=&quot;w-[200px]&quot;&gt;Name&lt;/TableHead&gt; &lt;TableHead&gt;Status&lt;/TableHead&gt; &lt;TableHead className=&quot;text-right&quot;&gt;Role&lt;/TableHead&gt; &lt;/TableRow&gt; &lt;/TableHeader&gt; &lt;TableBody&gt; &lt;TableRow&gt; &lt;TableCell className=&quot;font-medium&quot;&gt;John Doe&lt;/TableCell&gt; &lt;TableCell&gt;Active&lt;/TableCell&gt; &lt;TableCell className=&quot;text-right&quot;&gt;Developer&lt;/TableCell&gt; &lt;/TableRow&gt; &lt;TableRow&gt; &lt;TableCell className=&quot;font-medium&quot;&gt;Jane Smith&lt;/TableCell&gt; &lt;TableCell&gt;Inactive&lt;/TableCell&gt; &lt;TableCell className=&quot;text-right&quot;&gt;Designer&lt;/TableCell&gt; &lt;/TableRow&gt; &lt;/TableBody&gt; &lt;TableFooter&gt; &lt;TableRow&gt; &lt;TableCell colSpan={2}&gt;Total&lt;/TableCell&gt; &lt;TableCell className=&quot;text-right&quot;&gt;2 Employees&lt;/TableCell&gt; &lt;/TableRow&gt; &lt;/TableFooter&gt; &lt;/Table&gt;   ","version":"Next","tagName":"h3"},{"title":"Customized Table with Selection​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#customized-table-with-selection","content":" &lt;Table&gt; &lt;TableHeader&gt; &lt;TableRow&gt; &lt;TableHead className=&quot;w-[50px]&quot;&gt; &lt;input type=&quot;checkbox&quot; aria-label=&quot;Select all&quot; /&gt; &lt;/TableHead&gt; &lt;TableHead&gt;Name&lt;/TableHead&gt; &lt;TableHead&gt;Status&lt;/TableHead&gt; &lt;TableHead&gt;Role&lt;/TableHead&gt; &lt;TableHead className=&quot;text-right&quot;&gt;Actions&lt;/TableHead&gt; &lt;/TableRow&gt; &lt;/TableHeader&gt; &lt;TableBody&gt; &lt;TableRow data-state=&quot;selected&quot;&gt; &lt;TableCell&gt; &lt;input type=&quot;checkbox&quot; aria-label=&quot;Select row&quot; checked /&gt; &lt;/TableCell&gt; &lt;TableCell className=&quot;font-medium&quot;&gt;John Doe&lt;/TableCell&gt; &lt;TableCell&gt;Active&lt;/TableCell&gt; &lt;TableCell&gt;Developer&lt;/TableCell&gt; &lt;TableCell className=&quot;text-right&quot;&gt; &lt;button className=&quot;text-blue-500 hover:underline&quot;&gt;Edit&lt;/button&gt; &lt;/TableCell&gt; &lt;/TableRow&gt; &lt;TableRow&gt; &lt;TableCell&gt; &lt;input type=&quot;checkbox&quot; aria-label=&quot;Select row&quot; /&gt; &lt;/TableCell&gt; &lt;TableCell className=&quot;font-medium&quot;&gt;Jane Smith&lt;/TableCell&gt; &lt;TableCell&gt;Inactive&lt;/TableCell&gt; &lt;TableCell&gt;Designer&lt;/TableCell&gt; &lt;TableCell className=&quot;text-right&quot;&gt; &lt;button className=&quot;text-blue-500 hover:underline&quot;&gt;Edit&lt;/button&gt; &lt;/TableCell&gt; &lt;/TableRow&gt; &lt;/TableBody&gt; &lt;/Table&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#props","content":" ","version":"Next","tagName":"h2"},{"title":"Table​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#table","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional classes to apply to the table ...rest\tReact.HTMLAttributes&lt;HTMLTableElement&gt;\t-\tAll other props are passed to the underlying table element  ","version":"Next","tagName":"h3"},{"title":"TableHeader​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#tableheader","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional classes to apply to the table header ...rest\tReact.HTMLAttributes&lt;HTMLTableSectionElement&gt;\t-\tAll other props are passed to the underlying thead element  ","version":"Next","tagName":"h3"},{"title":"TableBody​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#tablebody","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional classes to apply to the table body ...rest\tReact.HTMLAttributes&lt;HTMLTableSectionElement&gt;\t-\tAll other props are passed to the underlying tbody element  ","version":"Next","tagName":"h3"},{"title":"TableFooter​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#tablefooter","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional classes to apply to the table footer ...rest\tReact.HTMLAttributes&lt;HTMLTableSectionElement&gt;\t-\tAll other props are passed to the underlying tfoot element  ","version":"Next","tagName":"h3"},{"title":"TableRow​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#tablerow","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional classes to apply to the table row ...rest\tReact.HTMLAttributes&lt;HTMLTableRowElement&gt;\t-\tAll other props are passed to the underlying tr element  ","version":"Next","tagName":"h3"},{"title":"TableHead​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#tablehead","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional classes to apply to the table head cell ...rest\tReact.ThHTMLAttributes&lt;HTMLTableCellElement&gt;\t-\tAll other props are passed to the underlying th element  ","version":"Next","tagName":"h3"},{"title":"TableCell​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#tablecell","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional classes to apply to the table cell ...rest\tReact.TdHTMLAttributes&lt;HTMLTableCellElement&gt;\t-\tAll other props are passed to the underlying td element  ","version":"Next","tagName":"h3"},{"title":"TableCaption​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#tablecaption","content":" Prop\tType\tDefault\tDescriptionclassName\tstring\tundefined\tAdditional classes to apply to the table caption ...rest\tReact.HTMLAttributes&lt;HTMLTableCaptionElement&gt;\t-\tAll other props are passed to the underlying caption element  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#typescript","content":" // Component Type Definitions interface TableProps extends React.HTMLAttributes&lt;HTMLTableElement&gt; {} interface TableHeaderProps extends React.HTMLAttributes&lt;HTMLTableSectionElement&gt; {} interface TableBodyProps extends React.HTMLAttributes&lt;HTMLTableSectionElement&gt; {} interface TableFooterProps extends React.HTMLAttributes&lt;HTMLTableSectionElement&gt; {} interface TableRowProps extends React.HTMLAttributes&lt;HTMLTableRowElement&gt; {} interface TableHeadProps extends React.ThHTMLAttributes&lt;HTMLTableCellElement&gt; {} interface TableCellProps extends React.TdHTMLAttributes&lt;HTMLTableCellElement&gt; {} interface TableCaptionProps extends React.HTMLAttributes&lt;HTMLTableCaptionElement&gt; {}   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#style-overrides","content":" The table components can be customized using the following approaches:  Using the className prop to add additional Tailwind classes to any componentExtending the component with custom stylesApplying data attributes like data-state=&quot;selected&quot; to TableRow for specific styling  // Example of custom styling &lt;Table className=&quot;min-w-[800px] rounded-md border&quot;&gt; &lt;TableHeader className=&quot;bg-gray-100&quot;&gt; &lt;TableRow&gt; &lt;TableHead className=&quot;w-[100px] font-bold text-gray-700&quot;&gt;ID&lt;/TableHead&gt; &lt;TableHead className=&quot;font-bold text-gray-700&quot;&gt;Name&lt;/TableHead&gt; &lt;/TableRow&gt; &lt;/TableHeader&gt; &lt;TableBody&gt; &lt;TableRow className=&quot;hover:bg-blue-50&quot;&gt; &lt;TableCell className=&quot;font-medium&quot;&gt;1&lt;/TableCell&gt; &lt;TableCell&gt;John Doe&lt;/TableCell&gt; &lt;/TableRow&gt; &lt;/TableBody&gt; &lt;/Table&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#extending-the-component","content":" import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@/components/ui/table'; export function SortableTable({ data, columns, sortColumn, sortDirection, onSort, ...props }) { return ( &lt;Table {...props}&gt; &lt;TableHeader&gt; &lt;TableRow&gt; {columns.map((column) =&gt; ( &lt;TableHead key={column.key} className={`cursor-pointer ${sortColumn === column.key ? 'text-primary' : ''}`} onClick={() =&gt; onSort(column.key)} &gt; {column.label} {sortColumn === column.key &amp;&amp; ( &lt;span className=&quot;ml-1&quot;&gt;{sortDirection === 'asc' ? '↑' : '↓'}&lt;/span&gt; )} &lt;/TableHead&gt; ))} &lt;/TableRow&gt; &lt;/TableHeader&gt; &lt;TableBody&gt; {data.map((row, rowIndex) =&gt; ( &lt;TableRow key={rowIndex}&gt; {columns.map((column) =&gt; ( &lt;TableCell key={column.key}&gt;{row[column.key]}&lt;/TableCell&gt; ))} &lt;/TableRow&gt; ))} &lt;/TableBody&gt; &lt;/Table&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with React Hook Form​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#integration-with-react-hook-form","content":" import { useForm } from 'react-hook-form'; import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'; import { Button } from '@/components/ui/button'; export function EditableTable({ initialData }) { const { register, handleSubmit, formState: { errors } } = useForm({ defaultValues: { rows: initialData } }); const onSubmit = (data) =&gt; { console.log('Form data:', data); }; return ( &lt;form onSubmit={handleSubmit(onSubmit)}&gt; &lt;Table&gt; &lt;TableHeader&gt; &lt;TableRow&gt; &lt;TableHead&gt;Name&lt;/TableHead&gt; &lt;TableHead&gt;Email&lt;/TableHead&gt; &lt;TableHead&gt;Role&lt;/TableHead&gt; &lt;/TableRow&gt; &lt;/TableHeader&gt; &lt;TableBody&gt; {initialData.map((row, index) =&gt; ( &lt;TableRow key={index}&gt; &lt;TableCell&gt; &lt;input className=&quot;w-full p-2 border rounded&quot; {...register(`rows.${index}.name`, { required: 'Name is required' })} /&gt; {errors.rows?.[index]?.name &amp;&amp; ( &lt;p className=&quot;text-red-500 text-xs mt-1&quot;&gt;{errors.rows[index].name.message}&lt;/p&gt; )} &lt;/TableCell&gt; &lt;TableCell&gt; &lt;input className=&quot;w-full p-2 border rounded&quot; type=&quot;email&quot; {...register(`rows.${index}.email`, { required: 'Email is required', pattern: { value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i, message: 'Invalid email address' } })} /&gt; {errors.rows?.[index]?.email &amp;&amp; ( &lt;p className=&quot;text-red-500 text-xs mt-1&quot;&gt;{errors.rows[index].email.message}&lt;/p&gt; )} &lt;/TableCell&gt; &lt;TableCell&gt; &lt;select className=&quot;w-full p-2 border rounded&quot; {...register(`rows.${index}.role`, { required: 'Role is required' })} &gt; &lt;option value=&quot;&quot;&gt;Select role&lt;/option&gt; &lt;option value=&quot;admin&quot;&gt;Admin&lt;/option&gt; &lt;option value=&quot;user&quot;&gt;User&lt;/option&gt; &lt;option value=&quot;editor&quot;&gt;Editor&lt;/option&gt; &lt;/select&gt; {errors.rows?.[index]?.role &amp;&amp; ( &lt;p className=&quot;text-red-500 text-xs mt-1&quot;&gt;{errors.rows[index].role.message}&lt;/p&gt; )} &lt;/TableCell&gt; &lt;/TableRow&gt; ))} &lt;/TableBody&gt; &lt;/Table&gt; &lt;div className=&quot;mt-4&quot;&gt; &lt;Button type=&quot;submit&quot;&gt;Save Changes&lt;/Button&gt; &lt;/div&gt; &lt;/form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with TanStack Table (React Table)​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#integration-with-tanstack-table-react-table","content":" import { useState } from 'react'; import { flexRender, getCoreRowModel, getSortedRowModel, useReactTable, SortingState, } from '@tanstack/react-table'; import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, } from '@/components/ui/table'; export function DataTable({ columns, data }) { const [sorting, setSorting] = useState&lt;SortingState&gt;([]); const table = useReactTable({ data, columns, state: { sorting, }, onSortingChange: setSorting, getCoreRowModel: getCoreRowModel(), getSortedRowModel: getSortedRowModel(), }); return ( &lt;div className=&quot;rounded-md border&quot;&gt; &lt;Table&gt; &lt;TableHeader&gt; {table.getHeaderGroups().map((headerGroup) =&gt; ( &lt;TableRow key={headerGroup.id}&gt; {headerGroup.headers.map((header) =&gt; ( &lt;TableHead key={header.id} className={header.column.getCanSort() ? 'cursor-pointer select-none' : ''} onClick={header.column.getToggleSortingHandler()} &gt; {flexRender(header.column.columnDef.header, header.getContext())} {{ asc: ' ↑', desc: ' ↓', }[header.column.getIsSorted() as string] ?? null} &lt;/TableHead&gt; ))} &lt;/TableRow&gt; ))} &lt;/TableHeader&gt; &lt;TableBody&gt; {table.getRowModel().rows.length ? ( table.getRowModel().rows.map((row) =&gt; ( &lt;TableRow key={row.id} data-state={row.getIsSelected() ? 'selected' : undefined}&gt; {row.getVisibleCells().map((cell) =&gt; ( &lt;TableCell key={cell.id}&gt; {flexRender(cell.column.columnDef.cell, cell.getContext())} &lt;/TableCell&gt; ))} &lt;/TableRow&gt; )) ) : ( &lt;TableRow&gt; &lt;TableCell colSpan={columns.length} className=&quot;h-24 text-center&quot;&gt; No results. &lt;/TableCell&gt; &lt;/TableRow&gt; )} &lt;/TableBody&gt; &lt;/Table&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#responsive-behavior","content":" The component responds to different screen sizes in the following ways:  Mobile: The table becomes horizontally scrollable within its container to accommodate all columnsTablet: Still horizontally scrollable but with more visible columnsDesktop: Full table is visible with optimum spacing  For improved mobile responsiveness, consider these approaches:  // Responsive table with stacked layout on mobile function ResponsiveTable({ data }) { return ( &lt;div&gt; {/* Desktop and tablet view */} &lt;div className=&quot;hidden sm:block&quot;&gt; &lt;Table&gt; &lt;TableHeader&gt; &lt;TableRow&gt; &lt;TableHead&gt;Name&lt;/TableHead&gt; &lt;TableHead&gt;Email&lt;/TableHead&gt; &lt;TableHead&gt;Role&lt;/TableHead&gt; &lt;/TableRow&gt; &lt;/TableHeader&gt; &lt;TableBody&gt; {data.map((item) =&gt; ( &lt;TableRow key={item.id}&gt; &lt;TableCell&gt;{item.name}&lt;/TableCell&gt; &lt;TableCell&gt;{item.email}&lt;/TableCell&gt; &lt;TableCell&gt;{item.role}&lt;/TableCell&gt; &lt;/TableRow&gt; ))} &lt;/TableBody&gt; &lt;/Table&gt; &lt;/div&gt; {/* Mobile view - Cards instead of table */} &lt;div className=&quot;grid grid-cols-1 gap-4 sm:hidden&quot;&gt; {data.map((item) =&gt; ( &lt;div key={item.id} className=&quot;bg-white p-4 rounded shadow&quot;&gt; &lt;div className=&quot;font-medium&quot;&gt;{item.name}&lt;/div&gt; &lt;div className=&quot;text-sm text-gray-500&quot;&gt;{item.email}&lt;/div&gt; &lt;div className=&quot;mt-2 text-sm&quot;&gt;{item.role}&lt;/div&gt; &lt;/div&gt; ))} &lt;/div&gt; &lt;/div&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#accessibility","content":" The Table component follows these accessibility best practices:  Semantic HTML structure using proper &lt;table&gt;, &lt;thead&gt;, &lt;tbody&gt;, &lt;tfoot&gt;, &lt;tr&gt;, &lt;th&gt;, and &lt;td&gt; elementsAppropriate captions via the &lt;TableCaption&gt; component for screen readersSupport for row selection with proper data-state=&quot;selected&quot; attributesProper alignment of text for readabilitySupport for column headers with proper scopeSupport for keyboard navigation through table cells  For improved accessibility:  &lt;Table aria-label=&quot;User data table&quot;&gt; &lt;TableCaption&gt;List of users and their roles in the system&lt;/TableCaption&gt; &lt;TableHeader&gt; &lt;TableRow&gt; &lt;TableHead scope=&quot;col&quot;&gt;Name&lt;/TableHead&gt; &lt;TableHead scope=&quot;col&quot;&gt;Email&lt;/TableHead&gt; &lt;TableHead scope=&quot;col&quot;&gt;Role&lt;/TableHead&gt; &lt;/TableRow&gt; &lt;/TableHeader&gt; &lt;TableBody&gt; {users.map((user) =&gt; ( &lt;TableRow key={user.id}&gt; &lt;TableCell&gt;{user.name}&lt;/TableCell&gt; &lt;TableCell&gt;{user.email}&lt;/TableCell&gt; &lt;TableCell&gt;{user.role}&lt;/TableCell&gt; &lt;/TableRow&gt; ))} &lt;/TableBody&gt; &lt;/Table&gt;   ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#implementation-details","content":" The Table component:  Uses React.forwardRef to allow ref forwarding to the underlying HTML elementsWraps the table in a responsive container with overflow handlingUses Tailwind's utility classes for styling and responsive designApplies hover states to rows for better user interactionSupports selection states through data attributesMaintains border styling consistently between rows and on the table boundariesProperly aligns checkboxes and form elements within cellsUses appropriate text colors for header, body, and footer elements  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#common-pitfalls","content":" Responsive overflow issues: By default, tables can overflow on smaller screens. The component addresses this by wrapping the table in a container with overflow-auto, but for complex tables, consider a responsive redesign approach.Row selection management: When implementing row selection, ensure you're properly tracking selected states and applying the data-state=&quot;selected&quot; attribute.Column width management: For tables with many columns, explicitly set widths using classes like w-[200px] on TableHead components to control layout.Form integration conflicts: When embedding form elements in table cells, ensure proper event propagation and styling compatibility.TypeScript prop spreading: When extending the components, ensure proper type spreading to maintain type safety.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#testing","content":" // Example test for the Table component import { render, screen } from '@testing-library/react'; import { Table, TableHeader, TableBody, TableRow, TableHead, TableCell } from '@/components/ui/table'; describe('Table', () =&gt; { it('renders a basic table correctly', () =&gt; { render( &lt;Table&gt; &lt;TableHeader&gt; &lt;TableRow&gt; &lt;TableHead&gt;Name&lt;/TableHead&gt; &lt;TableHead&gt;Role&lt;/TableHead&gt; &lt;/TableRow&gt; &lt;/TableHeader&gt; &lt;TableBody&gt; &lt;TableRow&gt; &lt;TableCell&gt;John Doe&lt;/TableCell&gt; &lt;TableCell&gt;Developer&lt;/TableCell&gt; &lt;/TableRow&gt; &lt;/TableBody&gt; &lt;/Table&gt; ); expect(screen.getByText('Name')).toBeInTheDocument(); expect(screen.getByText('Role')).toBeInTheDocument(); expect(screen.getByText('John Doe')).toBeInTheDocument(); expect(screen.getByText('Developer')).toBeInTheDocument(); }); it('applies custom className to table elements', () =&gt; { render( &lt;Table className=&quot;test-table&quot;&gt; &lt;TableHeader className=&quot;test-header&quot;&gt; &lt;TableRow className=&quot;test-row&quot;&gt; &lt;TableHead className=&quot;test-head&quot;&gt;Name&lt;/TableHead&gt; &lt;/TableRow&gt; &lt;/TableHeader&gt; &lt;TableBody className=&quot;test-body&quot;&gt; &lt;TableRow className=&quot;test-row&quot;&gt; &lt;TableCell className=&quot;test-cell&quot;&gt;John Doe&lt;/TableCell&gt; &lt;/TableRow&gt; &lt;/TableBody&gt; &lt;/Table&gt; ); expect(document.querySelector('.test-table')).toBeInTheDocument(); expect(document.querySelector('.test-header')).toBeInTheDocument(); expect(document.querySelector('.test-body')).toBeInTheDocument(); expect(document.querySelectorAll('.test-row')).toHaveLength(2); expect(document.querySelector('.test-head')).toBeInTheDocument(); expect(document.querySelector('.test-cell')).toBeInTheDocument(); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Table Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/table#related-components","content":" DataTable: Extension of the Table component that adds sorting, filtering, and pagination using TanStack Table.Form: Can be used together with Table to create editable data tables.Card: Alternative to tables for displaying data in a more mobile-friendly format.Select: Often used within table cells for data selection operations. ","version":"Next","tagName":"h2"},{"title":"Sonner Toast Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#import","content":" // Import the Toaster component for rendering toasts import { Toaster } from &quot;@/components/ui/sonner&quot;; // Import the toast function for triggering toasts import { toast } from &quot;sonner&quot;;   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Setup​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#basic-setup","content":" Add the &lt;Toaster /&gt; component to your root layout, which serves as the container for all toast notifications:  // In app/layout.tsx or your root layout import { Toaster } from &quot;@/components/ui/sonner&quot;; export default function RootLayout({ children }) { return ( &lt;html lang=&quot;en&quot;&gt; &lt;head /&gt; &lt;body&gt; &lt;main&gt;{children}&lt;/main&gt; &lt;Toaster /&gt; &lt;/body&gt; &lt;/html&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Basic Usage​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#basic-usage","content":" The simplest way to trigger a toast notification:  import { toast } from &quot;sonner&quot;; export function ToastDemo() { return ( &lt;Button onClick={() =&gt; toast(&quot;Your message has been sent&quot;)}&gt; Show Toast &lt;/Button&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Toast Types​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#toast-types","content":" The component provides various toast types for different situations:  // Default toast toast(&quot;This is a default toast&quot;); // Success toast with checkmark icon toast.success(&quot;Your account has been created&quot;); // Error toast for alerts toast.error(&quot;There was a problem with your request&quot;); // Info toast for general information toast.info(&quot;New features are available&quot;); // Warning toast for cautionary messages toast.warning(&quot;Your subscription will expire soon&quot;);   ","version":"Next","tagName":"h3"},{"title":"With Description​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#with-description","content":" Add more detailed information with a description:  toast(&quot;Event created&quot;, { description: &quot;Your event has been scheduled for March 15, 2025&quot;, });   ","version":"Next","tagName":"h3"},{"title":"With Action Button​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#with-action-button","content":" Include an action button for user interaction:  toast(&quot;Email sent&quot;, { description: &quot;Your message has been delivered&quot;, action: { label: &quot;Undo&quot;, onClick: () =&gt; console.log(&quot;Undo sending email&quot;), }, });   ","version":"Next","tagName":"h3"},{"title":"Promise Toast​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#promise-toast","content":" Show loading state while waiting for a promise to resolve:  const saveData = async () =&gt; { // Simulate API call await new Promise(resolve =&gt; setTimeout(resolve, 2000)); return { success: true }; }; function PromiseToastExample() { return ( &lt;Button onClick={() =&gt; { toast.promise(saveData, { loading: &quot;Saving changes...&quot;, success: &quot;Changes saved successfully&quot;, error: &quot;Failed to save changes&quot;, }); }} &gt; Save Changes &lt;/Button&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#props","content":" ","version":"Next","tagName":"h2"},{"title":"Toaster Props​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#toaster-props","content":" Prop\tType\tDefault\tDescriptionposition\t'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right'\t'bottom-right'\tPosition of the toast on the screen expand\tboolean\tfalse\tWhether to expand toasts to fill the width of the container visibleToasts\tnumber\t3\tMaximum number of toasts visible at one time hotkey\tstring[]\t['altKey', 'KeyT']\tKeyboard shortcut to focus last toast richColors\tboolean\tfalse\tWhether to use enhanced colors for different toast types closeButton\tboolean\tfalse\tWhether to show a close button on each toast offset\tstring | number\t32\tDistance in pixels from the edge of the viewport duration\tnumber\t4000\tDefault duration in milliseconds for which a toast is shown theme\t'light' | 'dark' | 'system'\t'system'\tColor theme of the toasts className\tstring\t''\tAdditional CSS classes to add to the toaster container  ","version":"Next","tagName":"h3"},{"title":"Toast Function Options​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#toast-function-options","content":" Option\tType\tDefault\tDescriptionduration\tnumber\t4000\tDuration in milliseconds for which the toast is shown description\tReact.ReactNode\t—\tAdditional descriptive text for the toast icon\tReact.ReactNode\t—\tCustom icon displayed before the toast message action\t{ label: string; onClick: () =&gt; void }\t—\tAction button with label and click handler cancel\t{ label: string; onClick: () =&gt; void }\t—\tCancel button with label and click handler dismissible\tboolean\ttrue\tWhether the toast can be dismissed by clicking id\tstring\t—\tCustom ID for the toast, useful for programmatic control important\tboolean\tfalse\tWhether the toast should not be automatically dismissed className\tstring\t—\tAdditional CSS classes for the toast element style\tReact.CSSProperties\t—\tInline styles for the toast element  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#typescript","content":" // Toaster component props type import type { ToasterProps } from &quot;sonner&quot;; // Toast function and its options import { toast } from &quot;sonner&quot;; type ToastOptions = { duration?: number; description?: React.ReactNode; icon?: React.ReactNode; action?: { label: string; onClick: () =&gt; void; }; cancel?: { label: string; onClick: () =&gt; void; }; dismissible?: boolean; id?: string; important?: boolean; className?: string; style?: React.CSSProperties; }; // Usage with TypeScript const showToast = (message: string, options?: ToastOptions) =&gt; { return toast(message, options); };   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#style-overrides","content":" The component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes to the Toaster component:  &lt;Toaster className=&quot;font-sans&quot; toastOptions={{ className: &quot;rounded-sm border-accent&quot;, }} /&gt;   Customizing individual toasts with the className option:  toast(&quot;Custom styled toast&quot;, { className: &quot;bg-primary text-primary-foreground border-primary&quot;, });   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#extending-the-component","content":" You can create a customized Toaster component with your project's default settings:  import { Toaster as SonnerToaster } from &quot;sonner&quot;; export function Toaster() { return ( &lt;SonnerToaster position=&quot;top-right&quot; richColors closeButton toastOptions={{ duration: 5000, className: &quot;border-border rounded-md&quot;, }} /&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#integration-with-forms","content":" import { useForm } from &quot;react-hook-form&quot;; import { toast } from &quot;sonner&quot;; export function ContactForm() { const { register, handleSubmit, formState } = useForm(); const onSubmit = async (data) =&gt; { try { // Simulate form submission await new Promise(resolve =&gt; setTimeout(resolve, 1000)); toast.success(&quot;Message sent!&quot;, { description: &quot;We'll get back to you as soon as possible.&quot;, }); } catch (error) { toast.error(&quot;Failed to send message&quot;, { description: &quot;Please try again later.&quot;, }); } }; return ( &lt;form onSubmit={handleSubmit(onSubmit)}&gt; &lt;input {...register(&quot;email&quot;, { required: true })} /&gt; &lt;button type=&quot;submit&quot; disabled={formState.isSubmitting}&gt; {formState.isSubmitting ? &quot;Sending...&quot; : &quot;Send&quot;} &lt;/button&gt; &lt;/form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#integration-with-other-components","content":" import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;; import { Button } from &quot;@/components/ui/button&quot;; import { toast } from &quot;sonner&quot;; export function FeatureCard({ title, description, actionLabel }) { return ( &lt;Card&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;{title}&lt;/CardTitle&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;p&gt;{description}&lt;/p&gt; &lt;Button onClick={() =&gt; toast.info(`Activated: ${title}`)} className=&quot;mt-4&quot; &gt; {actionLabel} &lt;/Button&gt; &lt;/CardContent&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#responsive-behavior","content":" The Sonner toast component is responsive by default, but you can enhance the behavior:  import { useMediaQuery } from &quot;@/hooks/use-media-query&quot;; import { Toaster } from &quot;@/components/ui/sonner&quot;; export function ResponsiveToaster() { const isMobile = useMediaQuery(&quot;(max-width: 640px)&quot;); return ( &lt;Toaster position={isMobile ? &quot;bottom-center&quot; : &quot;top-right&quot;} expand={isMobile} visibleToasts={isMobile ? 1 : 3} closeButton={!isMobile} className={isMobile ? &quot;w-full max-w-full&quot; : &quot;&quot;} /&gt; ); }   The component responds to different screen sizes in the following ways:  Mobile: On small screens, toasts can be configured to appear at the bottom-center and expand to full width for better visibilityTablet: Maintains standard toast size but can be positioned differently for optimal viewingDesktop: Can display multiple toasts simultaneously and offers more interaction options like close buttons and actions  ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#accessibility","content":" The component follows these accessibility best practices:  Focus management: Pressing the hotkey (Alt+T by default) focuses the newest toast for keyboard navigationToast notifications can be dismissed via keyboard using the Escape keyVisual feedback is accompanied by role=&quot;status&quot; for screen readersElements maintain proper contrast ratios for readabilityInteractive elements within toasts are properly focusable and have appropriate ARIA attributesToasts automatically disappear, preventing screen reader users from being interrupted by persistent notices  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#implementation-details","content":" The component:  Uses CSS animations for smooth entrance and exit transitionsLeverages a centralized state management system for toast managementProperly handles the creation, updating, and dismissal of multiple toastsUses a queue system to manage multiple toast notificationsIntegrates with React context for global access throughout the application  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#common-pitfalls","content":" Toast Not Appearing: Ensure the &lt;Toaster /&gt; component is included in your root layout or application wrapperToast Disappearing Too Quickly: Adjust the duration property (in milliseconds) to increase display timeZ-index Issues with Dialogs: If toasts appear behind other elements, ensure proper z-index layering or set a higher z-index using the className propMobile Usability: Consider using expand= on mobile for better visibility and touch targetsDark Mode Inconsistency: Use the theme=&quot;system&quot; prop to respect user preferences or sync with your app's theme  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#testing","content":" // Example test for the toast component import { render, screen, waitFor } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { toast } from &quot;sonner&quot;; import { Toaster } from &quot;@/components/ui/sonner&quot;; import { ToastDemo } from &quot;./ToastDemo&quot;; describe('Toast Component', () =&gt; { beforeEach(() =&gt; { // Setup a fresh Toaster for each test render(&lt;Toaster /&gt;); }); it('displays a toast when triggered', async () =&gt; { render(&lt;ToastDemo /&gt;); const button = screen.getByRole('button', { name: /show toast/i }); await userEvent.click(button); expect(await screen.findByText('Your message has been sent')).toBeInTheDocument(); }); it('dismisses a toast after clicking the close button', async () =&gt; { render( &lt;&gt; &lt;Toaster closeButton /&gt; &lt;button onClick={() =&gt; toast('Test toast')}&gt;Show Toast&lt;/button&gt; &lt;/&gt; ); await userEvent.click(screen.getByRole('button')); const toastMessage = await screen.findByText('Test toast'); const closeButton = screen.getByRole('button', { name: /close/i }); await userEvent.click(closeButton); await waitFor(() =&gt; { expect(toastMessage).not.toBeInTheDocument(); }); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Sonner Toast Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/toast#related-components","content":" Alert: Used for persistent notifications within the page contentDialog: For more interactive notifications requiring user confirmation or inputPopover: For contextual information attached to specific UI elements ","version":"Next","tagName":"h2"},{"title":"Authentication","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication","content":"","keywords":"","version":"Next"},{"title":"Authentication Context​","type":1,"pageTitle":"Authentication","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication#authentication-context","content":" The authentication system is built around the AuthContext (located in contexts/AuthContext.tsx), which provides authentication state and methods to all components via React's Context API.  import { createContext, useContext, useState, useEffect } from 'react'; import { supabase } from '@/lib/supabase'; import type { User, Session } from '@supabase/supabase-js'; interface AuthContextType { user: User | null; session: Session | null; isLoading: boolean; signUp: (email: string, password: string) =&gt; Promise&lt;void&gt;; signIn: (email: string, password: string) =&gt; Promise&lt;void&gt;; signInAnonymously: () =&gt; Promise&lt;void&gt;; signOut: () =&gt; Promise&lt;void&gt;; } const AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined); export const useAuth = () =&gt; { const context = useContext(AuthContext); if (context === undefined) { throw new Error('useAuth must be used within an AuthProvider'); } return context; };   ","version":"Next","tagName":"h2"},{"title":"Authentication Methods​","type":1,"pageTitle":"Authentication","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication#authentication-methods","content":" ","version":"Next","tagName":"h2"},{"title":"Registration (Sign Up)​","type":1,"pageTitle":"Authentication","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication#registration-sign-up","content":" The starter template provides a complete registration flow using Supabase Auth:  const signUp = async (email: string, password: string) =&gt; { const { error } = await supabase.auth.signUp({ email, password, }); if (error) { throw error; } };   Registration is handled in the RegisterForm.tsx component with form validation using Zod.  ","version":"Next","tagName":"h3"},{"title":"Login (Sign In)​","type":1,"pageTitle":"Authentication","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication#login-sign-in","content":" Login functionality is provided through Supabase Auth:  const signIn = async (email: string, password: string) =&gt; { const { error } = await supabase.auth.signInWithPassword({ email, password, }); if (error) { throw error; } };   The login form is implemented in the LoginForm.tsx component.  ","version":"Next","tagName":"h3"},{"title":"Anonymous Sessions​","type":1,"pageTitle":"Authentication","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication#anonymous-sessions","content":" The starter template supports anonymous sessions for users who want to use the application without creating an account:  const signInAnonymously = async () =&gt; { const { error } = await supabase.auth.signInAnonymously(); if (error) { throw error; } };   Anonymous users can later convert to registered users if desired.  ","version":"Next","tagName":"h3"},{"title":"Sign Out​","type":1,"pageTitle":"Authentication","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication#sign-out","content":" Users can sign out using the provided method:  const signOut = async () =&gt; { const { error } = await supabase.auth.signOut(); if (error) { throw error; } };   ","version":"Next","tagName":"h3"},{"title":"Protected Routes​","type":1,"pageTitle":"Authentication","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication#protected-routes","content":" The template includes a system for protecting routes that require authentication using Next.js 14 middleware:  // middleware.ts import { NextResponse } from 'next/server'; import type { NextRequest } from 'next/server'; import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'; export async function middleware(req: NextRequest) { const res = NextResponse.next(); const supabase = createMiddlewareClient({ req, res }); const { data: { session } } = await supabase.auth.getSession(); if (!session &amp;&amp; req.nextUrl.pathname.startsWith('/dashboard')) { const redirectUrl = new URL('/login', req.url); redirectUrl.searchParams.set('redirectedFrom', req.nextUrl.pathname); return NextResponse.redirect(redirectUrl); } return res; } export const config = { matcher: ['/dashboard/:path*'], };   ","version":"Next","tagName":"h2"},{"title":"Session Management​","type":1,"pageTitle":"Authentication","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication#session-management","content":" The starter template handles session persistence automatically using Supabase Auth:  // In AuthContext.tsx useEffect(() =&gt; { const { data: { subscription } } = supabase.auth.onAuthStateChange( (event, session) =&gt; { setSession(session); setUser(session?.user ?? null); setIsLoading(false); } ); return () =&gt; { subscription.unsubscribe(); }; }, []);   This ensures that users remain authenticated across page refreshes and browser sessions if they choose to remain logged in.  ","version":"Next","tagName":"h2"},{"title":"Authentication Components​","type":1,"pageTitle":"Authentication","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication#authentication-components","content":" The template includes pre-built authentication components:  RegisterForm.tsx - User registration form with validationLoginForm.tsx - Login form with &quot;Remember me&quot; optionAnonymousLoginForm.tsx - One-click anonymous session creationUserMenu.tsx - User profile and logout menu  ","version":"Next","tagName":"h2"},{"title":"Custom Hooks​","type":1,"pageTitle":"Authentication","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication#custom-hooks","content":" The useAuth hook provides an easy way to access authentication functionality:  // Example usage in a component import { useAuth } from '@/contexts/AuthContext'; const ProfilePage = () =&gt; { const { user, signOut } = useAuth(); return ( &lt;div&gt; &lt;h1&gt;Profile&lt;/h1&gt; &lt;p&gt;Email: {user?.email}&lt;/p&gt; &lt;button onClick={signOut}&gt;Sign Out&lt;/button&gt; &lt;/div&gt; ); };   ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"Authentication","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/authentication#next-steps","content":" Learn about database operations to understand how user data is storedCheck the protected routes documentation for more advanced security scenarios ","version":"Next","tagName":"h2"},{"title":"Tabs Component","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs","content":"","keywords":"","version":"Next"},{"title":"Import​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#import","content":" import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Usage​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#basic-usage","content":" &lt;Tabs defaultValue=&quot;account&quot;&gt; &lt;TabsList&gt; &lt;TabsTrigger value=&quot;account&quot;&gt;Account&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;password&quot;&gt;Password&lt;/TabsTrigger&gt; &lt;/TabsList&gt; &lt;TabsContent value=&quot;account&quot;&gt; &lt;p&gt;Account tab content&lt;/p&gt; &lt;/TabsContent&gt; &lt;TabsContent value=&quot;password&quot;&gt; &lt;p&gt;Password tab content&lt;/p&gt; &lt;/TabsContent&gt; &lt;/Tabs&gt;   ","version":"Next","tagName":"h3"},{"title":"Controlled Tabs​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#controlled-tabs","content":" import { useState } from 'react'; function ControlledTabs() { const [activeTab, setActiveTab] = useState('account'); return ( &lt;Tabs value={activeTab} onValueChange={setActiveTab}&gt; &lt;TabsList&gt; &lt;TabsTrigger value=&quot;account&quot;&gt;Account&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;password&quot;&gt;Password&lt;/TabsTrigger&gt; &lt;/TabsList&gt; &lt;TabsContent value=&quot;account&quot;&gt; &lt;p&gt;Account tab content&lt;/p&gt; &lt;/TabsContent&gt; &lt;TabsContent value=&quot;password&quot;&gt; &lt;p&gt;Password tab content&lt;/p&gt; &lt;/TabsContent&gt; &lt;/Tabs&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Disabled Tabs​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#disabled-tabs","content":" &lt;Tabs defaultValue=&quot;account&quot;&gt; &lt;TabsList&gt; &lt;TabsTrigger value=&quot;account&quot;&gt;Account&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;password&quot;&gt;Password&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;settings&quot; disabled&gt;Settings&lt;/TabsTrigger&gt; &lt;/TabsList&gt; &lt;TabsContent value=&quot;account&quot;&gt; &lt;p&gt;Account tab content&lt;/p&gt; &lt;/TabsContent&gt; &lt;TabsContent value=&quot;password&quot;&gt; &lt;p&gt;Password tab content&lt;/p&gt; &lt;/TabsContent&gt; &lt;TabsContent value=&quot;settings&quot;&gt; &lt;p&gt;Settings tab content&lt;/p&gt; &lt;/TabsContent&gt; &lt;/Tabs&gt;   ","version":"Next","tagName":"h3"},{"title":"Props​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#props","content":" ","version":"Next","tagName":"h2"},{"title":"Tabs​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#tabs","content":" Prop\tType\tDefault\tDescriptionvalue\tstring\t-\tThe controlled value of the tab to activate. Used when controlling the component. defaultValue\tstring\t-\tThe value of the tab that should be active when initially rendered. Use when not controlling the component. onValueChange\t(value: string) =&gt; void\t-\tCallback invoked when a tab is selected. orientation\t'horizontal' | 'vertical'\t'horizontal'\tThe orientation of the component. dir\t'ltr' | 'rtl'\t'ltr'\tThe reading direction of the tabs. activationMode\t'automatic' | 'manual'\t'automatic'\tWhether tabs are activated automatically on click or manually through arrow keys.  ","version":"Next","tagName":"h3"},{"title":"TabsList​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#tabslist","content":" Prop\tType\tDefault\tDescriptionloop\tboolean\ttrue\tWhen true, keyboard navigation will loop from the last tab to the first and vice versa. className\tstring\t-\tAdditional class names for custom styling.  ","version":"Next","tagName":"h3"},{"title":"TabsTrigger​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#tabstrigger","content":" Prop\tType\tDefault\tDescriptionvalue\tstring\tRequired\tA unique value that associates the trigger with a content panel. disabled\tboolean\tfalse\tWhen true, prevents the user from interacting with the tab. className\tstring\t-\tAdditional class names for custom styling.  ","version":"Next","tagName":"h3"},{"title":"TabsContent​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#tabscontent","content":" Prop\tType\tDefault\tDescriptionvalue\tstring\tRequired\tA unique value that associates the content with a trigger. forceMount\tboolean\tfalse\tForce mounting content when true. Useful when controlling animations with React animation libraries. className\tstring\t-\tAdditional class names for custom styling.  ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#typescript","content":" // Component Type Definitions from Radix UI import * as React from 'react'; import * as TabsPrimitive from '@radix-ui/react-tabs'; // Usage example with TypeScript interface TabData { value: string; label: string; content: React.ReactNode; disabled?: boolean; } function TypedTabs({ tabs }: { tabs: TabData[] }) { return ( &lt;Tabs defaultValue={tabs[0]?.value}&gt; &lt;TabsList&gt; {tabs.map((tab) =&gt; ( &lt;TabsTrigger key={tab.value} value={tab.value} disabled={tab.disabled} &gt; {tab.label} &lt;/TabsTrigger&gt; ))} &lt;/TabsList&gt; {tabs.map((tab) =&gt; ( &lt;TabsContent key={tab.value} value={tab.value}&gt; {tab.content} &lt;/TabsContent&gt; ))} &lt;/Tabs&gt; ); }   ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#customization","content":" ","version":"Next","tagName":"h2"},{"title":"Style Overrides​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#style-overrides","content":" The component can be customized using the following approaches:  Using the className prop to add additional Tailwind classes to any componentModifying the component styles directly in the source fileUsing CSS variables for theming  // Custom styled tabs &lt;Tabs defaultValue=&quot;account&quot;&gt; &lt;TabsList className=&quot;grid w-full grid-cols-2 bg-gray-100 rounded-xl p-1&quot;&gt; &lt;TabsTrigger value=&quot;account&quot; className=&quot;data-[state=active]:bg-white data-[state=active]:text-primary rounded-lg&quot; &gt; Account &lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;password&quot; className=&quot;data-[state=active]:bg-white data-[state=active]:text-primary rounded-lg&quot; &gt; Password &lt;/TabsTrigger&gt; &lt;/TabsList&gt; &lt;TabsContent value=&quot;account&quot; className=&quot;mt-6 p-4 bg-white rounded-lg&quot;&gt; &lt;p&gt;Account tab content&lt;/p&gt; &lt;/TabsContent&gt; &lt;TabsContent value=&quot;password&quot; className=&quot;mt-6 p-4 bg-white rounded-lg&quot;&gt; &lt;p&gt;Password tab content&lt;/p&gt; &lt;/TabsContent&gt; &lt;/Tabs&gt;   ","version":"Next","tagName":"h3"},{"title":"Extending the Component​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#extending-the-component","content":" import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs'; export function IconTabs() { return ( &lt;Tabs defaultValue=&quot;profile&quot; className=&quot;w-full&quot;&gt; &lt;TabsList className=&quot;grid w-full grid-cols-3&quot;&gt; &lt;TabsTrigger value=&quot;profile&quot; className=&quot;flex items-center gap-2&quot;&gt; &lt;UserIcon className=&quot;h-4 w-4&quot; /&gt; &lt;span&gt;Profile&lt;/span&gt; &lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;dashboard&quot; className=&quot;flex items-center gap-2&quot;&gt; &lt;LayoutDashboardIcon className=&quot;h-4 w-4&quot; /&gt; &lt;span&gt;Dashboard&lt;/span&gt; &lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;settings&quot; className=&quot;flex items-center gap-2&quot;&gt; &lt;SettingsIcon className=&quot;h-4 w-4&quot; /&gt; &lt;span&gt;Settings&lt;/span&gt; &lt;/TabsTrigger&gt; &lt;/TabsList&gt; &lt;TabsContent value=&quot;profile&quot;&gt;Profile content&lt;/TabsContent&gt; &lt;TabsContent value=&quot;dashboard&quot;&gt;Dashboard content&lt;/TabsContent&gt; &lt;TabsContent value=&quot;settings&quot;&gt;Settings content&lt;/TabsContent&gt; &lt;/Tabs&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with Forms​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#integration-with-forms","content":" import { useForm } from 'react-hook-form'; import { zodResolver } from '@hookform/resolvers/zod'; import { z } from 'zod'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; import { Input } from '@/components/ui/input'; import { Button } from '@/components/ui/button'; import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'; const userFormSchema = z.object({ username: z.string().min(2).max(50), email: z.string().email(), password: z.string().min(8) }); type UserFormValues = z.infer&lt;typeof userFormSchema&gt;; export function UserSettingsForm() { const form = useForm&lt;UserFormValues&gt;({ resolver: zodResolver(userFormSchema), defaultValues: { username: '', email: '', password: '' } }); function onSubmit(data: UserFormValues) { console.log(data); } return ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt; &lt;Tabs defaultValue=&quot;account&quot; className=&quot;w-full&quot;&gt; &lt;TabsList className=&quot;grid w-full grid-cols-2&quot;&gt; &lt;TabsTrigger value=&quot;account&quot;&gt;Account&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;password&quot;&gt;Password&lt;/TabsTrigger&gt; &lt;/TabsList&gt; &lt;TabsContent value=&quot;account&quot; className=&quot;space-y-4 pt-4&quot;&gt; &lt;FormField control={form.control} name=&quot;username&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Username&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;Enter username&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;FormField control={form.control} name=&quot;email&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;Email&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;Enter email&quot; type=&quot;email&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;/TabsContent&gt; &lt;TabsContent value=&quot;password&quot; className=&quot;space-y-4 pt-4&quot;&gt; &lt;FormField control={form.control} name=&quot;password&quot; render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt;New Password&lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input placeholder=&quot;Enter password&quot; type=&quot;password&quot; {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;/TabsContent&gt; &lt;/Tabs&gt; &lt;Button type=&quot;submit&quot;&gt;Save changes&lt;/Button&gt; &lt;/form&gt; &lt;/Form&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Components​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#integration-with-other-components","content":" import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; export function DashboardTabs() { return ( &lt;Card&gt; &lt;CardHeader&gt; &lt;CardTitle&gt;Dashboard&lt;/CardTitle&gt; &lt;CardDescription&gt;View and manage your account details.&lt;/CardDescription&gt; &lt;/CardHeader&gt; &lt;CardContent&gt; &lt;Tabs defaultValue=&quot;overview&quot;&gt; &lt;TabsList&gt; &lt;TabsTrigger value=&quot;overview&quot;&gt;Overview&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;analytics&quot;&gt;Analytics&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;reports&quot;&gt;Reports&lt;/TabsTrigger&gt; &lt;/TabsList&gt; &lt;TabsContent value=&quot;overview&quot; className=&quot;pt-4&quot;&gt; Overview content goes here... &lt;/TabsContent&gt; &lt;TabsContent value=&quot;analytics&quot; className=&quot;pt-4&quot;&gt; Analytics content goes here... &lt;/TabsContent&gt; &lt;TabsContent value=&quot;reports&quot; className=&quot;pt-4&quot;&gt; Reports content goes here... &lt;/TabsContent&gt; &lt;/Tabs&gt; &lt;/CardContent&gt; &lt;/Card&gt; ); }   ","version":"Next","tagName":"h3"},{"title":"Responsive Behavior​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#responsive-behavior","content":" The component responds to different screen sizes in the following ways:  Mobile: On small screens, tabs can stack vertically by adding responsive classes:  &lt;TabsList className=&quot;flex-col sm:flex-row&quot;&gt; &lt;TabsTrigger value=&quot;tab1&quot;&gt;Tab 1&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;tab2&quot;&gt;Tab 2&lt;/TabsTrigger&gt; &lt;/TabsList&gt;   Tablet: On medium screens, tabs can adjust their padding and sizing:  &lt;TabsList className=&quot;px-1 sm:px-2&quot;&gt; &lt;TabsTrigger className=&quot;px-2 py-1 sm:px-4 sm:py-2&quot; value=&quot;tab1&quot;&gt; Tab 1 &lt;/TabsTrigger&gt; &lt;TabsTrigger className=&quot;px-2 py-1 sm:px-4 sm:py-2&quot; value=&quot;tab2&quot;&gt; Tab 2 &lt;/TabsTrigger&gt; &lt;/TabsList&gt;   Desktop: On larger screens, tabs can expand to fill available space:  &lt;TabsList className=&quot;w-full md:w-auto&quot;&gt; &lt;TabsTrigger value=&quot;tab1&quot;&gt;Tab 1&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;tab2&quot;&gt;Tab 2&lt;/TabsTrigger&gt; &lt;/TabsList&gt;   For very long lists of tabs that might not fit on smaller screens, consider using overflow with horizontal scrolling:  &lt;TabsList className=&quot;w-full overflow-x-auto flex-nowrap&quot;&gt; &lt;TabsTrigger value=&quot;tab1&quot;&gt;Tab 1&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;tab2&quot;&gt;Tab 2&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;tab3&quot;&gt;Tab 3&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;tab4&quot;&gt;Tab 4&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;tab5&quot;&gt;Tab 5&lt;/TabsTrigger&gt; &lt;/TabsList&gt;   ","version":"Next","tagName":"h3"},{"title":"Accessibility​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#accessibility","content":" The Tabs component follows the WAI-ARIA Tabs design pattern and includes the following accessibility features:  Proper ARIA Roles: The component uses appropriate ARIA roles (tablist, tab, tabpanel) automatically.Keyboard Navigation: Tab to focus on the active tabArrow Left/Right to navigate between tabs horizontallyArrow Up/Down to navigate between tabs vertically (when using vertical orientation)Home/End to navigate to the first/last tabSpace/Enter to activate the focused tab Focus Management: Focus is properly managed when switching tabs.Screen Reader Announcements: Tab selection changes are properly announced to screen readers.State Management: Active and disabled states are visually indicated and communicated to assistive technologies.  ","version":"Next","tagName":"h2"},{"title":"Implementation Details​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#implementation-details","content":" The component:  Is built on top of Radix UI's accessible Tabs primitiveUses CSS transitions for smooth tab switching effectsLeverages Tailwind CSS for styling with proper focus and hover statesSupports both controlled and uncontrolled usage patternsCan be integrated with form libraries like react-hook-formMaintains content in the DOM even when not visible (hidden with CSS), which helps preserve stateCan conditionally render tab content using the forceMount prop when needed for animations  ","version":"Next","tagName":"h2"},{"title":"Common Pitfalls​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#common-pitfalls","content":" Missing Values: Ensure each TabsTrigger and TabsContent has a matching value prop, or tabs won't work correctly.Controlled Component Issues: When using controlled mode with value and onValueChange, make sure the state is correctly managed to avoid unexpected behavior.Accessibility for Dynamic Tabs: When generating tabs dynamically, ensure proper labeling and id references are maintained.CSS Display Properties: Avoid overriding the display property on tab components as it may break the layout and interactions.Next.js Client Components: Remember that Tabs uses client-side interactivity, so ensure you add the 'use client' directive at the top of any file using the Tabs component.  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#testing","content":" // Example test for the Tabs component import { render, screen } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; describe('Tabs', () =&gt; { it('renders correctly with the default tab selected', () =&gt; { render( &lt;Tabs defaultValue=&quot;tab1&quot;&gt; &lt;TabsList&gt; &lt;TabsTrigger value=&quot;tab1&quot;&gt;Tab 1&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;tab2&quot;&gt;Tab 2&lt;/TabsTrigger&gt; &lt;/TabsList&gt; &lt;TabsContent value=&quot;tab1&quot;&gt;Tab 1 content&lt;/TabsContent&gt; &lt;TabsContent value=&quot;tab2&quot;&gt;Tab 2 content&lt;/TabsContent&gt; &lt;/Tabs&gt; ); expect(screen.getByRole('tab', { name: 'Tab 1' })).toHaveAttribute('aria-selected', 'true'); expect(screen.getByText('Tab 1 content')).toBeInTheDocument(); expect(screen.queryByText('Tab 2 content')).toBeInTheDocument(); }); it('switches tab when clicked', async () =&gt; { const user = userEvent.setup(); render( &lt;Tabs defaultValue=&quot;tab1&quot;&gt; &lt;TabsList&gt; &lt;TabsTrigger value=&quot;tab1&quot;&gt;Tab 1&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;tab2&quot;&gt;Tab 2&lt;/TabsTrigger&gt; &lt;/TabsList&gt; &lt;TabsContent value=&quot;tab1&quot;&gt;Tab 1 content&lt;/TabsContent&gt; &lt;TabsContent value=&quot;tab2&quot;&gt;Tab 2 content&lt;/TabsContent&gt; &lt;/Tabs&gt; ); const tab2 = screen.getByRole('tab', { name: 'Tab 2' }); await user.click(tab2); expect(tab2).toHaveAttribute('aria-selected', 'true'); expect(screen.getByText('Tab 2 content')).toBeVisible(); }); it('respects the disabled state', async () =&gt; { const user = userEvent.setup(); render( &lt;Tabs defaultValue=&quot;tab1&quot;&gt; &lt;TabsList&gt; &lt;TabsTrigger value=&quot;tab1&quot;&gt;Tab 1&lt;/TabsTrigger&gt; &lt;TabsTrigger value=&quot;tab2&quot; disabled&gt;Tab 2&lt;/TabsTrigger&gt; &lt;/TabsList&gt; &lt;TabsContent value=&quot;tab1&quot;&gt;Tab 1 content&lt;/TabsContent&gt; &lt;TabsContent value=&quot;tab2&quot;&gt;Tab 2 content&lt;/TabsContent&gt; &lt;/Tabs&gt; ); const tab2 = screen.getByRole('tab', { name: 'Tab 2' }); expect(tab2).toBeDisabled(); await user.click(tab2); expect(screen.getByRole('tab', { name: 'Tab 1' })).toHaveAttribute('aria-selected', 'true'); }); });   ","version":"Next","tagName":"h2"},{"title":"Related Components​","type":1,"pageTitle":"Tabs Component","url":"/nextjs-ts-tailwind-supabase-starter/components/ui/tabs#related-components","content":" Card: Often used to contain tab components for a more structured UIForm: Can be integrated with tabs for multi-step formsDialog: Can contain tabs for organizing content in modal dialogs ","version":"Next","tagName":"h2"},{"title":"Deployment","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment","content":"","keywords":"","version":"Next"},{"title":"Deployment Options​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#deployment-options","content":" The starter template supports various deployment options:  Vercel (recommended for Next.js applications)NetlifyAWS AmplifyDocker + Self-hosted  ","version":"Next","tagName":"h2"},{"title":"Environment Setup​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#environment-setup","content":" Before deploying, ensure you have set up the following environment variables in your deployment environment:  # Next.js NEXT_PUBLIC_APP_URL=https://your-app-domain.com # Supabase NEXT_PUBLIC_SUPABASE_URL=your-supabase-url NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key SUPABASE_SERVICE_ROLE_KEY=your-service-role-key   ","version":"Next","tagName":"h2"},{"title":"Deploying to Vercel​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#deploying-to-vercel","content":" Vercel is the platform created by the team behind Next.js and offers the most seamless deployment experience.  ","version":"Next","tagName":"h2"},{"title":"Steps:​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#steps","content":" Push your code to a Git repository (GitHub, GitLab, BitBucket) Connect your repository to Vercel: Create a Vercel account at vercel.comClick &quot;New Project&quot; and import your repositorySelect &quot;Next.js&quot; as the framework preset Configure environment variables: Add the environment variables mentioned aboveYou can set different values for production, preview, and development environments Deploy: Click &quot;Deploy&quot; to trigger the initial deploymentVercel will automatically build and deploy your application Set up automatic deployments: By default, Vercel deploys automatically on every push to the main branchYou can customize this behavior in the project settings  ","version":"Next","tagName":"h3"},{"title":"Deploying to Netlify​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#deploying-to-netlify","content":" Netlify is another popular option for deploying Next.js applications.  ","version":"Next","tagName":"h2"},{"title":"Steps:​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#steps-1","content":" Push your code to a Git repository Connect your repository to Netlify: Create a Netlify account at netlify.comClick &quot;New site from Git&quot; and import your repository Configure build settings: Build command: npm run buildPublish directory: .next Configure environment variables: Add the environment variables in the site settings Deploy: Click &quot;Deploy site&quot; to trigger the initial deployment Add the Netlify Next.js plugin: Install the plugin with npm install -D @netlify/plugin-nextjsAdd a netlify.toml file to your project root:  [[plugins]] package = &quot;@netlify/plugin-nextjs&quot;   ","version":"Next","tagName":"h3"},{"title":"Deploying with Docker​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#deploying-with-docker","content":" For self-hosted deployments, you can use Docker.  ","version":"Next","tagName":"h2"},{"title":"Creating a Dockerfile​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#creating-a-dockerfile","content":" # Dockerfile FROM node:18-alpine AS base # Install dependencies only when needed FROM base AS deps WORKDIR /app COPY package.json package-lock.json ./ RUN npm ci # Rebuild the source code only when needed FROM base AS builder WORKDIR /app COPY --from=deps /app/node_modules ./node_modules COPY . . RUN npm run build # Production image, copy all the files and run next FROM base AS runner WORKDIR /app ENV NODE_ENV production RUN addgroup --system --gid 1001 nodejs RUN adduser --system --uid 1001 nextjs COPY --from=builder /app/public ./public COPY --from=builder /app/.next/standalone ./ COPY --from=builder /app/.next/static ./.next/static USER nextjs EXPOSE 3000 ENV PORT 3000 CMD [&quot;node&quot;, &quot;server.js&quot;]   ","version":"Next","tagName":"h3"},{"title":"Configuring Next.js for Docker​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#configuring-nextjs-for-docker","content":" Update your next.config.js to enable standalone mode:  /** @type {import('next').NextConfig} */ const nextConfig = { output: 'standalone', // ... other config }; module.exports = nextConfig;   ","version":"Next","tagName":"h3"},{"title":"Docker Compose (Optional)​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#docker-compose-optional","content":" For local development with Docker:  # docker-compose.yml version: '3' services: web: build: . ports: - &quot;3000:3000&quot; environment: - NEXT_PUBLIC_SUPABASE_URL=your-supabase-url - NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key   ","version":"Next","tagName":"h3"},{"title":"Supabase Configuration for Production​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#supabase-configuration-for-production","content":" When deploying to production, ensure your Supabase project is properly configured:  Update authentication settings: Set the Site URL to your production domainConfigure redirect URLs for authenticationSet up email templates for authentication emails Update Row Level Security policies: Review and test RLS policies before deploying to productionEnsure all tables have appropriate RLS policies Database backups: Set up regular database backupsConsider implementing point-in-time recovery  ","version":"Next","tagName":"h2"},{"title":"CI/CD Pipeline​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#cicd-pipeline","content":" The starter template can be integrated with popular CI/CD tools:  ","version":"Next","tagName":"h2"},{"title":"GitHub Actions Example​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#github-actions-example","content":" # .github/workflows/deploy.yml name: Deploy on: push: branches: [main] jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: '18' cache: 'npm' - name: Install dependencies run: npm ci - name: Run tests run: npm test - name: Build run: npm run build - name: Deploy to Vercel uses: amondnet/vercel-action@v20 with: vercel-token: ${{ secrets.VERCEL_TOKEN }} vercel-org-id: ${{ secrets.VERCEL_ORG_ID }} vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }} vercel-args: '--prod'   ","version":"Next","tagName":"h3"},{"title":"Post-Deployment Checks​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#post-deployment-checks","content":" After deploying, perform these checks:  Test authentication flows in the production environmentVerify database connections are working correctlyCheck for any CORS issues with SupabaseTest protected routes to ensure they're properly securedVerify environment variables are correctly set  ","version":"Next","tagName":"h2"},{"title":"Performance Optimization​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#performance-optimization","content":" For production deployments, consider these optimizations:  Enable Edge Runtime for API routes where possibleImplement ISR (Incremental Static Regeneration) for frequently accessed pagesConfigure caching headers for static assetsOptimize images using Next.js Image optimizationConfigure Content Security Policy headers  ","version":"Next","tagName":"h2"},{"title":"Monitoring and Analytics​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#monitoring-and-analytics","content":" Consider adding:  Error tracking (Sentry, LogRocket)Analytics (Google Analytics, Plausible, Fathom)Performance monitoring (Vercel Analytics)Uptime monitoring (UptimeRobot, Pingdom)  ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"Deployment","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/deployment#next-steps","content":" Check out the Version Reference for recommended versions of all dependenciesRead the Contributing guide for information on contributing to the project ","version":"Next","tagName":"h2"},{"title":"Documentation Prompts","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/documentation-prompts","content":"","keywords":"","version":"Next"},{"title":"Components​","type":1,"pageTitle":"Documentation Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/documentation-prompts#components","content":" # Documentation Creation Task for `[Component Name]` ## Background I need to create comprehensive documentation for the `[ComponentName]` component that follows our project's standardized format. This component was integrated from shadcn/ui into our Next.js TypeScript TailwindCSS Supabase starter project. ## Component Research 1. First, use the fetch MCP server to the fetch the official Shadcn UI [Component Name] documentation from `https://ui.shadcn.com/docs/components/[component-name]` and then conduct a targeted web search to understand: - The component's purpose and core functionality - Available props and their default values - Variants and styling options - Accessibility considerations - Known limitations 2. Then, examine our project's implementation: - Use the filesystem MCP server to look at our source code at `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/src/components/[path]/[component-name].tsx` - Note any customizations we've made to the original shadcn component - Identify any project-specific usage patterns - Check existing imports in other components to see real usage examples ## Documentation Creation 1. Use the filesystem MCP server to copy our template at `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/docs-website/docs/developer-guide/templates/component-template.md` as your base structure. 2. Complete each section of the template with specific information: - Write a clear, concise component description (1-2 sentences) - Include correct import statements using our project's path conventions - Show basic usage examples with minimal props - Demonstrate all major variants and prop combinations - Create a complete props table with accurate types, defaults, and descriptions - Include TypeScript type definitions that match our implementation - Show realistic customization examples using TailwindCSS classes - Provide integration examples with other components in our library - Document responsive behavior across device sizes - Detail any accessibility features or considerations 3. Add react-hook-form integration examples where applicable, as our project uses this library. 4. Include any shadcn/ui installation commands if the component requires additional dependencies. ## Special Considerations - Focus on our project's specific implementation, not just generic shadcn/ui usage - Include common pitfalls specific to our tech stack (Next.js + TypeScript + TailwindCSS) - Reference related components from our library when appropriate - Add testing examples using our project's testing setup (React Testing Library) - Use consistent code formatting matching our project style ## Deliverable A comprehensive markdown document that follows our template structure and provides detailed, accurate guidance for developers in our specific project context.   ","version":"Next","tagName":"h2"},{"title":"Compound Components​","type":1,"pageTitle":"Documentation Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/documentation-prompts#compound-components","content":" # Documentation Creation Task for `Search Input` ## Background I need to create comprehensive documentation for the `SearchInput` component that follows our project's standardized format. This compound component was created from the shadcn/ui `Input` and `Button` components for our Next.js TypeScript TailwindCSS Supabase starter project. ## Component Research 1. First, examine our project's implementation: - Use the filesystem MCP server to look at our source code at `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/src/components/[path]/search-input.tsx` - Note any customizations we've made to the original shadcn component - Identify any project-specific usage patterns - Check existing imports in other components to see real usage examples 2. Then, then conduct a targeted web search to understand: - The component's purpose and core functionality - Available props and their default values - Variants and styling options - Accessibility considerations - Known limitations ## Documentation Creation 1. Use the filesystem MCP server to copy our template at `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/docs-website/docs/developer-guide/templates/component-template.md` as your base structure. 2. Complete each section of the template with specific information: - Write a clear, concise component description (1-2 sentences) - Include correct import statements using our project's path conventions - Show basic usage examples with minimal props - Demonstrate all major variants and prop combinations - Create a complete props table with accurate types, defaults, and descriptions - Include TypeScript type definitions that match our implementation - Show realistic customization examples using TailwindCSS classes - Provide integration examples with other components in our library - Document responsive behavior across device sizes - Detail any accessibility features or considerations 3. Add react-hook-form integration examples where applicable, as our project uses this library. 4. Include any shadcn/ui installation commands if the component requires additional dependencies. ## Special Considerations - Focus on our project's specific implementation, not just generic shadcn/ui usage - Include common pitfalls specific to our tech stack (Next.js + TypeScript + TailwindCSS) - Reference related components from our library when appropriate - Add testing examples using our project's testing setup (React Testing Library) - Use consistent code formatting matching our project style ## Deliverable A comprehensive markdown document that follows our template structure and provides detailed, accurate guidance for developers in our specific project context.   ","version":"Next","tagName":"h2"},{"title":"Tools​","type":1,"pageTitle":"Documentation Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/documentation-prompts#tools","content":" # Documentation Creation Task for [Tool Name] ## Background I need to create comprehensive documentation for [Tool Name] that follows our project's standardized format. ## Steps 1. First, review the official documentation at [URL to README.md or official docs] to understand the tool's purpose, features, configuration options, and best practices. 2. Examine our existing template at `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/docs-website/docs/developer-guide/templates/tool-template.md` to understand the required structure. 3. Create a new markdown file called `[tool-name].md` in the `/Users/matth/Github/MGH/nextjs-ts-tailwind-supabase-starter/docs-website/docs/developer-guide/tools` directory that follows our template format. 4. When filling in the template: - Replace all placeholders in [brackets] with accurate, tool-specific information - Include the current version we're using in our project (check package.json) - Document all npm scripts related to this tool that exist in our package.json - Provide clear, working code examples specifically tailored to our project structure - Remove any sections that aren't relevant to this particular tool - Add any tool-specific sections that aren't covered by the template but are important 5. Pay special attention to: - Integration with our existing tools and workflow - Common issues our team might encounter and their solutions - Best practices specific to our project's use of the tool ## Deliverable A clear, comprehensive markdown file that would help a new developer understand how to use [Tool Name] effectively within our project.  ","version":"Next","tagName":"h2"},{"title":"Database Integration","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/integration","content":"","keywords":"","version":"Next"},{"title":"Database Schema​","type":1,"pageTitle":"Database Integration","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/integration#database-schema","content":" The core database schema includes the following tables:  ","version":"Next","tagName":"h2"},{"title":"Users Table​","type":1,"pageTitle":"Database Integration","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/integration#users-table","content":" The users table extends Supabase Auth's built-in users with additional profile information:  CREATE TABLE public.profiles ( id UUID REFERENCES auth.users(id) PRIMARY KEY, display_name TEXT, avatar_url TEXT, created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL, updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL ); -- Set up Row Level Security ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY; -- Create secure policies CREATE POLICY &quot;Users can view their own profile&quot; ON public.profiles FOR SELECT USING (auth.uid() = id); CREATE POLICY &quot;Users can update their own profile&quot; ON public.profiles FOR UPDATE USING (auth.uid() = id); -- Create a trigger to create a profile when a user signs up CREATE OR REPLACE FUNCTION public.handle_new_user() RETURNS TRIGGER AS $$ BEGIN INSERT INTO public.profiles (id) VALUES (NEW.id); RETURN NEW; END; $$ LANGUAGE plpgsql SECURITY DEFINER; CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();   ","version":"Next","tagName":"h3"},{"title":"TypeScript Integration​","type":1,"pageTitle":"Database Integration","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/integration#typescript-integration","content":" The database schema is fully typed using TypeScript 5.4+ to provide type safety:  // types/database.types.ts export interface Database { public: { Tables: { profiles: { Row: { id: string; display_name: string | null; avatar_url: string | null; created_at: string; updated_at: string; }; Insert: { id: string; display_name?: string | null; avatar_url?: string | null; created_at?: string; updated_at?: string; }; Update: { id?: string; display_name?: string | null; avatar_url?: string | null; created_at?: string; updated_at?: string; }; }; }; }; }   ","version":"Next","tagName":"h2"},{"title":"Database Utilities​","type":1,"pageTitle":"Database Integration","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/integration#database-utilities","content":" The starter template provides utility functions for common database operations:  // lib/db/users.ts import { supabase } from '../supabase'; import type { Database } from '@/types/database.types'; type Profile = Database['public']['Tables']['profiles']['Row']; export const getUserProfile = async (userId: string): Promise&lt;Profile | null&gt; =&gt; { const { data, error } = await supabase .from('profiles') .select('*') .eq('id', userId) .single(); if (error) { console.error('Error fetching user profile:', error); return null; } return data; }; export const updateUserProfile = async ( userId: string, updates: Partial&lt;Profile&gt; ): Promise&lt;Profile | null&gt; =&gt; { const { data, error } = await supabase .from('profiles') .update(updates) .eq('id', userId) .select() .single(); if (error) { console.error('Error updating user profile:', error); return null; } return data; };   ","version":"Next","tagName":"h2"},{"title":"Row Level Security (RLS)​","type":1,"pageTitle":"Database Integration","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/integration#row-level-security-rls","content":" The template uses Supabase's Row Level Security to protect data at the database level. RLS ensures that users can only access data they are authorized to see, even if the application code has a security vulnerability.  Key RLS policies included:  Users can only read their own profile dataUsers can only update their own profile dataAnonymous users have limited access to public data  ","version":"Next","tagName":"h2"},{"title":"Using the Database in Components​","type":1,"pageTitle":"Database Integration","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/integration#using-the-database-in-components","content":" Example of using the database in a React component:  import { useEffect, useState } from 'react'; import { useAuth } from '@/contexts/AuthContext'; import { getUserProfile } from '@/lib/db/users'; import type { Database } from '@/types/database.types'; type Profile = Database['public']['Tables']['profiles']['Row']; const ProfilePage = () =&gt; { const { user } = useAuth(); const [profile, setProfile] = useState&lt;Profile | null&gt;(null); const [loading, setLoading] = useState(true); useEffect(() =&gt; { const fetchProfile = async () =&gt; { if (user) { const profileData = await getUserProfile(user.id); setProfile(profileData); } setLoading(false); }; fetchProfile(); }, [user]); if (loading) return &lt;div&gt;Loading...&lt;/div&gt;; if (!profile) return &lt;div&gt;Profile not found&lt;/div&gt;; return ( &lt;div&gt; &lt;h1&gt;Profile&lt;/h1&gt; &lt;p&gt;Display Name: {profile.display_name || 'Not set'}&lt;/p&gt; {/* More profile details */} &lt;/div&gt; ); };   ","version":"Next","tagName":"h2"},{"title":"Realtime Subscriptions​","type":1,"pageTitle":"Database Integration","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/integration#realtime-subscriptions","content":" The starter template supports Supabase Realtime for live data updates:  import { useEffect, useState } from 'react'; import { supabase } from '@/lib/supabase'; import type { Database } from '@/types/database.types'; type Profile = Database['public']['Tables']['profiles']['Row']; const useRealtimeProfile = (userId: string) =&gt; { const [profile, setProfile] = useState&lt;Profile | null&gt;(null); useEffect(() =&gt; { // Initial fetch const fetchProfile = async () =&gt; { const { data } = await supabase .from('profiles') .select('*') .eq('id', userId) .single(); setProfile(data); }; fetchProfile(); // Set up realtime subscription const subscription = supabase .channel('profile-changes') .on( 'postgres_changes', { event: 'UPDATE', schema: 'public', table: 'profiles', filter: `id=eq.${userId}`, }, (payload) =&gt; { setProfile(payload.new as Profile); } ) .subscribe(); return () =&gt; { supabase.removeChannel(subscription); }; }, [userId]); return profile; };   ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"Database Integration","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/database-features/integration#next-steps","content":" Learn about testing to understand how to test database operationsCheck the API routes documentation for implementing server-side endpoints ","version":"Next","tagName":"h2"},{"title":"Project Structure","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/structure","content":"","keywords":"","version":"Next"},{"title":"Directory Structure​","type":1,"pageTitle":"Project Structure","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/structure#directory-structure","content":" nextjs-ts-tailwind-supabase-starter/ ├── app/ # Next.js 14 App Router │ ├── api/ # API routes │ ├── (auth)/ # Authentication-related pages │ ├── layout.tsx # Root layout │ └── page.tsx # Homepage ├── components/ # React components │ ├── auth/ # Authentication components │ ├── layout/ # Layout components (Header, Footer) │ └── ui/ # Reusable UI components ├── contexts/ # React contexts │ └── AuthContext.tsx # Authentication context ├── lib/ # Library code and utilities │ ├── db/ # Database utilities │ └── supabase.ts # Supabase client ├── hooks/ # Custom React hooks ├── utils/ # Utility functions ├── types/ # TypeScript type definitions ├── styles/ # Global styles and Tailwind config └── tests/ # Test files   ","version":"Next","tagName":"h2"},{"title":"Key Files​","type":1,"pageTitle":"Project Structure","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/structure#key-files","content":" app/layout.tsx: The main layout wrapper for the application.app/page.tsx: The homepage of the application.components/layout/Layout.tsx: The main layout component.contexts/AuthContext.tsx: Provides authentication state and methods.lib/supabase.ts: Configures and exports the Supabase client.types/database.types.ts: TypeScript interfaces for the database schema.  ","version":"Next","tagName":"h2"},{"title":"Component Architecture​","type":1,"pageTitle":"Project Structure","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/structure#component-architecture","content":" This starter uses a component-based architecture with reusable UI components and composition patterns. Components are organized by feature and responsibility:  ","version":"Next","tagName":"h2"},{"title":"Layout Components​","type":1,"pageTitle":"Project Structure","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/structure#layout-components","content":" Located in components/layout/, these components form the structural elements of the application:  Layout.tsx: The main wrapper componentHeader.tsx: The site header with navigationFooter.tsx: The site footer  ","version":"Next","tagName":"h3"},{"title":"UI Components​","type":1,"pageTitle":"Project Structure","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/structure#ui-components","content":" Located in components/ui/, these are reusable UI elements:  Button.tsx: Customized button componentInput.tsx: Form input componentCard.tsx: Container component for content  ","version":"Next","tagName":"h3"},{"title":"Authentication Components​","type":1,"pageTitle":"Project Structure","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/structure#authentication-components","content":" Located in components/auth/, these handle user authentication:  LoginForm.tsx: Email/password login formRegisterForm.tsx: User registration formAnonymousLoginForm.tsx: Anonymous session creation  ","version":"Next","tagName":"h3"},{"title":"App Router Structure​","type":1,"pageTitle":"Project Structure","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/structure#app-router-structure","content":" This template uses Next.js 14's App Router for routing. The main directories include:  app/: Contains routes and layoutsapp/api/: Server-side API routesapp/(auth)/: Authentication-related pages (grouped)  ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"Project Structure","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/structure#next-steps","content":" Read the Authentication guide to understand how user authentication worksCheck the Database documentation for database schema and operationsExplore the Testing guide for writing tests ","version":"Next","tagName":"h2"},{"title":"Setup Prompts","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/setup-prompts","content":"","keywords":"","version":"Next"},{"title":"Prompt 1: Project Initialization​","type":1,"pageTitle":"Setup Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/setup-prompts#prompt-1-project-initialization","content":" You are an expert software developer tasked with building the foundation of a starter template for a contemporary web-based application. For this first step, you need to initialize the project with Next.js 14, TypeScript 5.2+, and TailwindCSS 3.3+. Requirements: 1. Create a Next.js 14 project with TypeScript 5.2+ using the App Router 2. Configure TailwindCSS 3.3+ with a basic configuration 3. Set up ESLint 8.x and Prettier 3.x with appropriate rules for a Next.js TypeScript project 4. Create a basic folder structure following Next.js 14 App Router conventions 5. Implement a simple Layout component with header and footer using React 18 components 6. Add a basic page that uses the Layout component Please provide: 1. Commands to initialize the project 2. Configuration files for Next.js 14, TypeScript 5.2+, TailwindCSS 3.3+, ESLint 8.x, and Prettier 3.x 3. Folder structure description 4. Implementation of the Layout component with basic Header and Footer 5. A simple page using the Layout Ensure the implementation follows best practices for Next.js 14 applications and TypeScript 5.2+, taking advantage of React 18 features where appropriate.   ","version":"Next","tagName":"h2"},{"title":"Prompt 2: Set Up Testing Infrastructure​","type":1,"pageTitle":"Setup Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/setup-prompts#prompt-2-set-up-testing-infrastructure","content":" You've successfully initialized the starter template with Next.js 14, TypeScript 5.2+, and TailwindCSS 3.3+. Now, you need to set up a robust testing infrastructure. Your task is to implement a testing setup using Jest 29.x and React Testing Library 14.x. Requirements: 1. Install and configure Jest 29.x with TypeScript 5.2+ support 2. Set up React Testing Library 14.x 3. Configure test file patterns and test environment 4. Create test utilities for common testing scenarios 5. Write example tests for the existing Layout component 6. Ensure tests can be run with npm commands Please provide: 1. Commands to install testing dependencies 2. Configuration files for Jest 29.x 3. Test utility files (if needed) 4. Example test for the Layout component 5. Updates to package.json for test scripts Make sure the testing setup follows best practices for Next.js 14 applications and enables effective testing of both UI components and utility functions. Also refer to the tasks listed in 1.5 Configure Testing Infrastructure in ./to-do.md. As tasks are completed mark them with [x].   ","version":"Next","tagName":"h2"},{"title":"Prompt 3: Supabase Setup and Configuration​","type":1,"pageTitle":"Setup Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/setup-prompts#prompt-3-supabase-setup-and-configuration","content":" Now that you have the starter template application set up with Next.js 14, TypeScript 5.2+, TailwindCSS 3.3+, and testing infrastructure, it's time to integrate Supabase 2.x for authentication and database functionality. Your task is to set up Supabase integration for the application. Requirements: 1. Install Supabase client library (@supabase/supabase-js v2.x) 2. Create a Supabase client utility 3. Set up environment variables for Supabase connection 4. Create a basic authentication provider using React 18's Context API 5. Implement a useSupabase hook for easy access to Supabase client 6. Ensure the configuration works in both development and production 7. Add appropriate TypeScript 5.2+ types for Supabase Please provide: 1. Commands to install Supabase dependencies 2. Supabase client utility implementation 3. Environment variable setup (.env.example file) 4. Basic authentication context implementation 5. useSupabase hook implementation 6. Any necessary types for Supabase integration Make sure to follow best practices for managing environment variables in Next.js 14 and creating reusable React 18 contexts.   ","version":"Next","tagName":"h2"},{"title":"Prompt 4: Database Schema Implementation​","type":1,"pageTitle":"Setup Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/setup-prompts#prompt-4-database-schema-implementation","content":" Now that you have set up Supabase 2.x integration for the starter template application, you need to implement the database schema for the core entities. Your task is to create the SQL scripts and TypeScript 5.2+ interfaces for the database schema. Requirements: 1. Create SQL scripts for the following tables: - users 2. Implement Row Level Security (RLS) policies for these tables in Supabase 3. Define TypeScript 5.2+ interfaces that match the database schema 4. Create a database types file for use throughout the application 5. Implement basic database helper functions for common operations with Supabase 2.x Please provide: 1. SQL scripts for creating tables in Supabase 2. SQL scripts for setting up RLS policies 3. TypeScript 5.2+ interfaces for database entities 4. Database helper functions for common operations 5. Any necessary type guards or utility types Ensure the schema follows the specifications from the project requirements and implements proper security practices with RLS in Supabase.   ","version":"Next","tagName":"h2"},{"title":"Prompt 5: Authentication Context Implementation​","type":1,"pageTitle":"Setup Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/setup-prompts#prompt-5-authentication-context-implementation","content":" With the Supabase 2.x integration and database schema in place for the starter template application, you now need to implement a comprehensive authentication context to manage user sessions. Your task is to create a full-featured authentication context that handles login, registration, and anonymous sessions using Supabase Auth. Requirements: 1. Create a comprehensive AuthContext with React 18's Context API 2. Implement a useAuth hook for components to access authentication state 3. Add functions for login, registration, logout, and anonymous sessions using Supabase Auth 4. Implement session persistence with Supabase's session management 5. Add loading and error states for authentication operations 6. Create TypeScript 5.2+ types for authentication state and functions 7. Write tests for the authentication context using Jest 29.x Please provide: 1. Complete AuthContext implementation 2. useAuth hook implementation 3. Authentication utility functions 4. Session persistence implementation 5. TypeScript 5.2+ types for authentication 6. Tests for the authentication context Ensure the implementation handles both registered users and anonymous sessions, with appropriate error handling and loading states using Supabase Auth 2.x features.   ","version":"Next","tagName":"h2"},{"title":"Prompt 6: Authentication Forms Implementation​","type":1,"pageTitle":"Setup Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/setup-prompts#prompt-6-authentication-forms-implementation","content":" Now that you have the authentication context set up with Supabase Auth for the starter template application, you need to create the user-facing authentication forms. Your task is to implement registration, login, and anonymous login forms using the authentication context you've created. Requirements: 1. Create a Registration form component 2. Implement a Login form component 3. Create an Anonymous Login form component 4. Add form validation for all forms using Zod 3.x 5. Implement error handling and display 6. Create loading states for form submission 7. Make forms fully responsive with TailwindCSS 3.3+ 8. Write tests for all form components with React Testing Library 14.x Please provide: 1. Registration form component implementation 2. Login form component implementation 3. Anonymous Login form component implementation 4. Form validation logic with Zod 3.x 5. Error handling implementation 6. CSS for responsive design using TailwindCSS 3.3+ 7. Tests for all form components Ensure the forms provide a good user experience with appropriate validation, error messages, and loading indicators. Make sure they integrate with the Supabase Auth context you've already built.   ","version":"Next","tagName":"h2"},{"title":"Prompt 7: Protected Routes Implementation​","type":1,"pageTitle":"Setup Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/setup-prompts#prompt-7-protected-routes-implementation","content":" With authentication forms and context in place for the starter template application, you now need to implement protected routes to ensure that certain pages are only accessible to authenticated users. Your task is to create a protected route system using Next.js 14 and the Supabase Auth context. Requirements: 1. Create middleware or route protection for Next.js 14 App Router 2. Implement redirect logic for unauthenticated users 3. Add loading state handling during authentication check 4. Create different levels of protection (any user, registered user only) 5. Implement custom error and unauthorized pages 6. Write tests for the protected route system with Jest 29.x Please provide: 1. Route protection implementation for Next.js 14 App Router 2. Redirect logic implementation 3. Loading state component 4. Example of using the protection with a protected page 5. Custom error and unauthorized pages 6. Tests for the protected route system Ensure the implementation correctly integrates with the Next.js 14 App Router and your Supabase Auth context, providing a seamless experience for users.   ","version":"Next","tagName":"h2"},{"title":"Prompt 8: Integration and Final Testing​","type":1,"pageTitle":"Setup Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/setup-prompts#prompt-8-integration-and-final-testing","content":" You've successfully implemented all the components and functionality for Phase 1 of the starter template application. Now it's time to integrate everything and perform final testing. Your task is to ensure all parts of the application work together seamlessly and fix any integration issues. Requirements: 1. Create a comprehensive test plan for Phase 1 functionality 2. Implement end-to-end tests for the complete user flows using Playwright 1.40+ 3. Check for any integration issues between components 4. Ensure mobile responsiveness for all screens with TailwindCSS 3.3+ 5. Fix any bugs or issues found during testing 6. Create a summary of Phase 1 completion Please provide: 1. Test plan for Phase 1 2. End-to-end test implementation with Playwright 1.40+ 3. Integration check results 4. Mobile responsiveness report 5. Bug fixes (if any) 6. Phase 1 completion summary Ensure all parts of the application work together correctly and provide a seamless experience for users. Document any issues found and their resolutions.   ","version":"Next","tagName":"h2"},{"title":"Prompt 9: Documentation and Developer Onboarding​","type":1,"pageTitle":"Setup Prompts","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/prompts/setup-prompts#prompt-9-documentation-and-developer-onboarding","content":" Now that Phase 1 of the starter template application is complete and tested, you need to create documentation for the project and prepare for developer onboarding. Your task is to create comprehensive documentation for the codebase and set up developer onboarding materials. Requirements: 1. Update the README with project overview, setup instructions, and usage 2. Create API documentation for all endpoints 3. Document the database schema and relationships in Supabase 4. Write component documentation with usage examples 5. Create developer onboarding guide 6. Prepare a local development environment setup guide 7. Document testing procedures and best practices Please provide: 1. Updated README.md 2. API documentation 3. Database schema documentation for Supabase 4. Component documentation 5. Developer onboarding guide 6. Local development setup guide 7. Testing documentation Ensure the documentation is clear, comprehensive, and follows best practices for technical documentation. Make it easy for new developers to understand the codebase and start contributing.  ","version":"Next","tagName":"h2"},{"title":"Development Tools","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/","content":"","keywords":"","version":"Next"},{"title":"Tools in this section​","type":1,"pageTitle":"Development Tools","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/#tools-in-this-section","content":" ESLint - Static code analysis tool for identifying problematic patternsPrettier - Code formatter for maintaining consistent code styleJest - JavaScript testing framework for unit and integration testsPlaywright - End-to-end testing framework for browser automationHusky &amp; lint-staged - Git hooks to ensure code quality before commitsRepomix - Utility for repository management and analysis ","version":"Next","tagName":"h2"},{"title":"Starter Template To Do Checklist","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do","content":"","keywords":"","version":"Next"},{"title":"Chunk 1: Project Setup​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#chunk-1-project-setup","content":" ","version":"Next","tagName":"h2"},{"title":"1.1 Initialize Next.js Project​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#11-initialize-nextjs-project","content":"  Create Next.js 14 project with TypeScript 5.2+ Initialize Git repository Create initial commit Set up .gitignore for Next.js Configure tsconfig.json for proper TypeScript 5.2+ settings Create package.json scripts for development, build, and start  ","version":"Next","tagName":"h3"},{"title":"1.2 Configure Styling and Linting​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#12-configure-styling-and-linting","content":"  Install TailwindCSS 3.3+ and dependencies Configure tailwind.config.js Set up postcss.config.js Create global.css with Tailwind imports Install ESLint 8.x and dependencies Configure .eslintrc.js with TypeScript and React rules Install Prettier 3.x Create .prettierrc with configuration Add lint and format scripts to package.json Create pre-commit hooks for linting and formatting  ","version":"Next","tagName":"h3"},{"title":"1.3 Set Up Project Structure​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#13-set-up-project-structure","content":"  Create components/ directory Create app/ directory (for Next.js 14 App Router) Create lib/ directory for utility functions Create lib/utils/ directory for helper functions Create contexts/ directory for React 18.x contexts Create hooks/ directory for custom hooks Create types/ directory for TypeScript 5.2+ types Create tests/ directory Create styles/ directory for component-specific styles Create README.md with project overview and setup instructions Create .env.example file  ","version":"Next","tagName":"h3"},{"title":"1.4 Implement Basic Layout Components​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#14-implement-basic-layout-components","content":"  Create app/layout.tsx component Implement components/layout/header.tsx Create components/layout/footer.tsx Add global styles to styles/globals.css Create components/ui/ directory for reusable UI components Implement components/ui/button.tsx with TailwindCSS 3.3+ Create components/ui/card.tsx Implement components/ui/input.tsx Create a responsive container component  ","version":"Next","tagName":"h3"},{"title":"1.5 Configure Testing Infrastructure​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#15-configure-testing-infrastructure","content":"  Install Jest 29.x and related dependencies Install React Testing Library 14.x and dependencies Configure jest.config.js Set up jest.setup.js Create test utilities in tests/utils/ Add test helper functions Set up mock providers for testing Write example test for Layout component Write example test for a utility function Add testing scripts to package.json  ","version":"Next","tagName":"h3"},{"title":"Chunk 2: Supabase Integration​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#chunk-2-supabase-integration","content":" ","version":"Next","tagName":"h2"},{"title":"2.1 Set Up Supabase Project​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#21-set-up-supabase-project","content":"  Create Supabase 2.x project in Supabase dashboard Configure authentication providers in Supabase Set up email templates for authentication Configure security settings Generate API keys Add Supabase URL and API key to .env.local Update .env.example with placeholder values Install @supabase/supabase-js v2.x Create lib/supabase.ts client utility Set up type definitions for Supabase  ","version":"Next","tagName":"h3"},{"title":"2.2 Define Core TypeScript Interfaces​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#22-define-core-typescript-interfaces","content":"  Create types/database.types.ts Define User interface with TypeScript 5.2+ Create additional supporting interfaces Set up type guards for database entities Create utility types for API responses Define enum types for states and roles Create serialization helpers for database entities Set up Zod 3.x schemas for validation  ","version":"Next","tagName":"h3"},{"title":"2.3 Implement Users Table Schema​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#23-implement-users-table-schema","content":"  Create SQL script for users table in Supabase Set up RLS policies for users table Create SQL triggers for user data Implement SQL functions for user operations Test user table with example queries Create lib/db/users.ts with database functions Implement createUser function with Supabase 2.x Create getUserById function Implement updateUser function Create tests for user database functions  ","version":"Next","tagName":"h3"},{"title":"2.4 Create Database Helper Functions​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#24-create-database-helper-functions","content":"  Implement lib/db/index.ts for common operations with Supabase 2.x Create transaction helper functions Implement error handling for database operations Create pagination helpers for Supabase queries Implement filtering helpers Create sorting utility functions Write tests for database helper functions Document database functions with JSDoc  ","version":"Next","tagName":"h3"},{"title":"Chunk 3: User Authentication​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#chunk-3-user-authentication","content":" ","version":"Next","tagName":"h2"},{"title":"3.1 Create Authentication Context​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#31-create-authentication-context","content":"  Create contexts/auth-context.tsx with React 18.x Context API Implement authentication state interface Create useAuth hook Implement loading states Create error handling Implement session persistence with Supabase Auth Add session expiry handling Create auto-refresh functionality Write tests for AuthContext with Jest 29.x Document authentication context usage  ","version":"Next","tagName":"h3"},{"title":"3.2 Implement Registration Flow​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#32-implement-registration-flow","content":"  Create components/auth/register-form.tsx Implement form state management with React 18.x Create input validation with Zod 3.x Implement error display Add loading state UI Create success state handling Implement redirect after registration Add form accessibility features Write tests for registration form with React Testing Library 14.x Document registration workflow  ","version":"Next","tagName":"h3"},{"title":"3.3 Build Login Functionality​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#33-build-login-functionality","content":"  Create components/auth/login-form.tsx Implement form state management Create input validation with Zod 3.x Implement error display Add loading state UI Implement &quot;Remember me&quot; functionality with Supabase Auth Create redirect after login Add password reset link Write tests for login form with React Testing Library 14.x Document login workflow  ","version":"Next","tagName":"h3"},{"title":"3.4 Create Anonymous Session Handling​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#34-create-anonymous-session-handling","content":"  Create components/auth/anonymous-login-form.tsx Implement anonymous session creation in AuthContext with Supabase Auth Create session persistence for anonymous sessions Implement session recovery mechanism Add conversion to permanent account functionality Create session expiry handling Add anonymous user display name handling Write tests for anonymous sessions Document anonymous session workflow  ","version":"Next","tagName":"h3"},{"title":"3.5 Implement Protected Routes​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#35-implement-protected-routes","content":"  Create middleware for Next.js 14 App Router Implement authentication checks Create redirect logic for unauthenticated users Add loading state during authentication check Implement different protection levels Create custom 404 page (app/not-found.tsx) Implement unauthorized page Add role-based protection Write tests for protected routes with Jest 29.x Document protection usage  ","version":"Next","tagName":"h3"},{"title":"Chunk 4: Core API Routes​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#chunk-4-core-api-routes","content":" ","version":"Next","tagName":"h2"},{"title":"4.1 Create Authentication API Routes​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#41-create-authentication-api-routes","content":"  Implement app/api/auth/register/route.ts (Next.js 14 Route Handler) Create app/api/auth/login/route.ts Implement app/api/auth/anonymous/route.ts Create app/api/auth/logout/route.ts Implement middleware for authentication Create session validation helpers Add rate limiting for authentication endpoints Implement error handling and response formatting Create logging for authentication attempts Write tests for authentication API routes with Jest 29.x  ","version":"Next","tagName":"h3"},{"title":"4.2 Implement API Testing Infrastructure​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#42-implement-api-testing-infrastructure","content":"  Create tests/utils/api.ts with test helpers Implement mock Supabase client for testing Create request and response mocks Set up test database seed functions Implement API test fixtures Create end-to-end API test suite with Playwright 1.40+ Add integration tests for API routes Create documentation for API testing Set up CI workflow for API tests  ","version":"Next","tagName":"h3"},{"title":"Final Integration Tasks​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#final-integration-tasks","content":" ","version":"Next","tagName":"h2"},{"title":"FI.1 Integration Testing​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#fi1-integration-testing","content":"  Create comprehensive test plans Implement end-to-end tests for user flows with Playwright 1.40+ Test authentication flow from registration to logout Test Supabase Realtime functionality if implemented Verify mobile responsiveness for all screens with TailwindCSS 3.3+ Test error handling and edge cases Perform cross-browser testing Verify accessibility compliance Document test results and fix issues  ","version":"Next","tagName":"h3"},{"title":"FI.2 Documentation​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#fi2-documentation","content":"  Update README.md with comprehensive information Create API documentation Document database schema for Supabase Write component usage examples Create developer onboarding guide Document testing procedures with Jest 29.x and Playwright 1.40+ Add inline code documentation Create user manual for the application Document known issues and workarounds Prepare handoff documentation for next phase  ","version":"Next","tagName":"h3"},{"title":"FI.3 Deployment Preparation​","type":1,"pageTitle":"Starter Template To Do Checklist","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/to-do#fi3-deployment-preparation","content":"  Configure production environment variables for Next.js 14 Set up staging environment Create deployment scripts Configure CI/CD pipeline Set up error monitoring Configure logging Create backup strategy for Supabase data Document deployment process Test deployment in staging environment Prepare for production deployment ","version":"Next","tagName":"h3"},{"title":"ESLint Configuration and Usage","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/eslint","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"ESLint Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/eslint#overview","content":" Version: 8.xPrimary plugins: @typescript-eslint/eslint-plugin: TypeScript-specific linting ruleseslint-plugin-react: React-specific linting ruleseslint-plugin-react-hooks: Rules for React Hookseslint-plugin-jsx-a11y: Accessibility rules for JSXeslint-config-prettier: Turns off ESLint rules that might conflict with Prettier  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"ESLint Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/eslint#configuration","content":" The project uses the standard Next.js ESLint configuration with additional custom rules. The configuration is managed through package.json and potential future .eslintrc.js or .eslintrc.json files.  To customize the ESLint configuration, you can create a new file at the project root:  // .eslintrc.js module.exports = { extends: ['next/core-web-vitals', 'prettier'], plugins: ['@typescript-eslint', 'react', 'react-hooks', 'jsx-a11y'], rules: { // Add custom rules here 'react/react-in-jsx-scope': 'off', 'react/prop-types': 'off', '@typescript-eslint/explicit-module-boundary-types': 'off', '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }], }, };   ","version":"Next","tagName":"h2"},{"title":"Default Commands​","type":1,"pageTitle":"ESLint Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/eslint#default-commands","content":" The following npm scripts are available for linting:  Lint check: Checks for linting errors without fixing them npm run lint Lint with auto-fix: Automatically fixes linting errors where possible npm run lint -- --fix   ","version":"Next","tagName":"h2"},{"title":"Integration with Git Hooks​","type":1,"pageTitle":"ESLint Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/eslint#integration-with-git-hooks","content":" ESLint is integrated with Git hooks through Husky and lint-staged. When you commit changes, ESLint will automatically run on the staged files.  The configuration in package.json:  &quot;lint-staged&quot;: { &quot;*.{js,jsx,ts,tsx,mjs}&quot;: [ &quot;eslint --fix&quot;, &quot;prettier --write&quot; ] }   ","version":"Next","tagName":"h2"},{"title":"Editor Integration​","type":1,"pageTitle":"ESLint Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/eslint#editor-integration","content":" For the best development experience, integrate ESLint with your code editor:  ","version":"Next","tagName":"h2"},{"title":"VS Code​","type":1,"pageTitle":"ESLint Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/eslint#vs-code","content":" Install the ESLint extensionAdd the following configuration to your VS Code settings:  { &quot;editor.codeActionsOnSave&quot;: { &quot;source.fixAll.eslint&quot;: true }, &quot;eslint.validate&quot;: [ &quot;javascript&quot;, &quot;javascriptreact&quot;, &quot;typescript&quot;, &quot;typescriptreact&quot; ] }   ","version":"Next","tagName":"h3"},{"title":"Ignoring Files​","type":1,"pageTitle":"ESLint Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/eslint#ignoring-files","content":" To exclude files from linting, create a .eslintignore file in the project root. Example:  node_modules .next build dist out coverage   ","version":"Next","tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"ESLint Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/eslint#best-practices","content":" Run lint checks locally: Always run npm run lint before pushing changesFix issues early: Address linting issues as they arise rather than ignoring themUnderstand the rules: Take time to understand why certain patterns are flagged as errorsCreate custom rules sparingly: Only add custom rules when absolutely necessary ","version":"Next","tagName":"h2"},{"title":"Husky and lint-staged Configuration and Usage","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#overview","content":" Husky: A tool that enables Git hooks in your projectlint-staged: A tool that runs linters on staged Git filesPurpose: Ensures that only linted and properly formatted code gets committed  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#configuration","content":" ","version":"Next","tagName":"h2"},{"title":"Husky Configuration​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#husky-configuration","content":" Husky is configured in the project with the .husky directory containing Git hook scripts. If not yet configured, you can set it up with:  # Initialize Husky npx husky init   This will create a .husky directory with a pre-commit hook. The pre-commit hook should be configured to run lint-staged:  #!/bin/sh . &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot; npx lint-staged   ","version":"Next","tagName":"h3"},{"title":"lint-staged Configuration​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#lint-staged-configuration","content":" The lint-staged configuration is defined in the package.json file:  &quot;lint-staged&quot;: { &quot;*.{js,jsx,ts,tsx,mjs}&quot;: [ &quot;eslint --fix&quot;, &quot;prettier --write&quot; ], &quot;*.{json,css}&quot;: [ &quot;prettier --write&quot; ] }   This configuration runs ESLint and Prettier on JavaScript/TypeScript files, and just Prettier on JSON and CSS files.  ","version":"Next","tagName":"h3"},{"title":"How It Works​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#how-it-works","content":" Pre-commit Hook: When you run git commit, Husky triggers the pre-commit hooklint-staged: The pre-commit hook runs lint-stagedLinting and Formatting: lint-staged runs ESLint and Prettier only on the files that are staged for commitCommit Result: If all checks pass, the commit proceeds; if any check fails, the commit is aborted  ","version":"Next","tagName":"h2"},{"title":"Adding Custom Git Hooks​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#adding-custom-git-hooks","content":" You can add additional Git hooks to enforce different rules:  ","version":"Next","tagName":"h2"},{"title":"Add a Pre-push Hook for Tests​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#add-a-pre-push-hook-for-tests","content":" Create a file at .husky/pre-push with:  #!/bin/sh . &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot; npm test   Make it executable:  chmod +x .husky/pre-push   This will run your tests before pushing changes.  ","version":"Next","tagName":"h3"},{"title":"Add a Commit Message Hook​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#add-a-commit-message-hook","content":" Create a file at .husky/commit-msg with:  #!/bin/sh . &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot; npx --no -- commitlint --edit &quot;$1&quot;   This requires additional setup with commitlint to enforce commit message conventions.  ","version":"Next","tagName":"h3"},{"title":"Customizing lint-staged Configuration​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#customizing-lint-staged-configuration","content":" You can customize the lint-staged configuration to perform different actions on different file types:  &quot;lint-staged&quot;: { &quot;*.{js,jsx,ts,tsx}&quot;: [ &quot;eslint --fix&quot;, &quot;prettier --write&quot;, &quot;jest --findRelatedTests&quot; ], &quot;*.md&quot;: &quot;prettier --write&quot;, &quot;*.css&quot;: [ &quot;stylelint --fix&quot;, &quot;prettier --write&quot; ] }   ","version":"Next","tagName":"h2"},{"title":"Bypassing Hooks​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#bypassing-hooks","content":" In emergency situations, you can bypass hooks with Git's --no-verify flag:  git commit --no-verify -m &quot;Emergency fix&quot;   However, this should be used sparingly.  ","version":"Next","tagName":"h2"},{"title":"Troubleshooting​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#troubleshooting","content":" ","version":"Next","tagName":"h2"},{"title":"Hooks Not Running​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#hooks-not-running","content":" If hooks are not running:  Check if the hooks are executable: chmod +x .husky/* Ensure Husky is installed: npm install husky --save-dev Check if Git hooks path is set correctly: git config core.hooksPath It should point to .husky.  ","version":"Next","tagName":"h3"},{"title":"ESLint or Prettier Errors​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#eslint-or-prettier-errors","content":" If you're getting ESLint or Prettier errors that prevent commits:  Run npm run lint and npm run format to see the errorsFix the errors manuallyStage the changes and try committing again  ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#best-practices","content":" Commit Small Changes: Smaller commits are easier to validate and fix if there are issuesKeep Hooks Fast: Ensure your hooks run quickly to maintain a good developer experienceDon't Skip Validation: Avoid using --no-verify as it defeats the purpose of the hooksRun Tests Locally: Run npm test before pushing to ensure all tests passInclude in CI: Include the same checks in your CI pipeline to catch issues that bypass hooks  ","version":"Next","tagName":"h2"},{"title":"Updating Hook Scripts​","type":1,"pageTitle":"Husky and lint-staged Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/husky-lint-staged#updating-hook-scripts","content":" To update existing hook scripts:  Edit the files in the .husky directoryMake sure they remain executable after editingCommit the changes to version control ","version":"Next","tagName":"h2"},{"title":"Testing","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing","content":"","keywords":"","version":"Next"},{"title":"Testing Structure​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#testing-structure","content":" Tests are organized in the following structure:  nextjs-ts-tailwind-supabase-starter/ ├── __tests__/ # Jest tests │ ├── components/ # Component tests │ ├── hooks/ # Hook tests │ ├── pages/ # Page tests │ └── utils/ # Utility function tests ├── e2e/ # End-to-end tests with Playwright └── tests/ └── utils/ # Test utilities and mocks   ","version":"Next","tagName":"h2"},{"title":"Unit and Integration Testing with Jest​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#unit-and-integration-testing-with-jest","content":" Jest 29.x is configured for unit and integration testing of components, hooks, pages, and utility functions.  ","version":"Next","tagName":"h2"},{"title":"Component Testing​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#component-testing","content":" Components are tested using React Testing Library 14.x, which encourages testing components as users would interact with them:  // __tests__/components/ui/Button.test.tsx import { render, screen, fireEvent } from '@testing-library/react'; import { Button } from '@/components/ui/Button'; describe('Button', () =&gt; { it('renders correctly', () =&gt; { render(&lt;Button&gt;Click me&lt;/Button&gt;); expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument(); }); it('calls onClick handler when clicked', () =&gt; { const handleClick = jest.fn(); render(&lt;Button onClick={handleClick}&gt;Click me&lt;/Button&gt;); fireEvent.click(screen.getByRole('button', { name: /click me/i })); expect(handleClick).toHaveBeenCalledTimes(1); }); it('can be disabled', () =&gt; { render(&lt;Button disabled&gt;Click me&lt;/Button&gt;); expect(screen.getByRole('button', { name: /click me/i })).toBeDisabled(); }); });   ","version":"Next","tagName":"h3"},{"title":"Testing Hooks​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#testing-hooks","content":" Custom hooks are tested using @testing-library/react-hooks:  // __tests__/hooks/useAuth.test.tsx import { renderHook, act } from '@testing-library/react-hooks'; import { useAuth } from '@/contexts/AuthContext'; import { AuthProvider } from '@/contexts/AuthContext'; // Mock the Supabase client jest.mock('@/lib/supabase', () =&gt; ({ supabase: { auth: { signUp: jest.fn(), signInWithPassword: jest.fn(), signOut: jest.fn(), getSession: jest.fn(() =&gt; Promise.resolve({ data: { session: null } })), }, }, })); describe('useAuth', () =&gt; { it('provides authentication methods', () =&gt; { const wrapper = ({ children }) =&gt; &lt;AuthProvider&gt;{children}&lt;/AuthProvider&gt;; const { result } = renderHook(() =&gt; useAuth(), { wrapper }); expect(result.current.user).toBeNull(); expect(result.current.signUp).toBeDefined(); expect(result.current.signIn).toBeDefined(); expect(result.current.signOut).toBeDefined(); }); // More tests... });   ","version":"Next","tagName":"h3"},{"title":"Testing with Supabase​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#testing-with-supabase","content":" To test components that interact with Supabase, the template provides mock implementations:  // tests/utils/supabaseMock.ts export const createSupabaseMock = () =&gt; ({ auth: { signUp: jest.fn(() =&gt; Promise.resolve({ data: { user: { id: 'mock-user-id' } }, error: null })), signInWithPassword: jest.fn(() =&gt; Promise.resolve({ data: { session: { user: { id: 'mock-user-id' } } }, error: null })), signOut: jest.fn(() =&gt; Promise.resolve({ error: null })), getSession: jest.fn(() =&gt; Promise.resolve({ data: { session: null }, error: null })), onAuthStateChange: jest.fn(() =&gt; ({ data: { subscription: { unsubscribe: jest.fn() } }, })), }, from: jest.fn(() =&gt; ({ select: jest.fn(() =&gt; ({ eq: jest.fn(() =&gt; ({ single: jest.fn(() =&gt; Promise.resolve({ data: {}, error: null })), })), })), insert: jest.fn(() =&gt; ({ select: jest.fn(() =&gt; Promise.resolve({ data: {}, error: null })), })), update: jest.fn(() =&gt; ({ eq: jest.fn(() =&gt; ({ select: jest.fn(() =&gt; Promise.resolve({ data: {}, error: null })), })), })), delete: jest.fn(() =&gt; ({ eq: jest.fn(() =&gt; Promise.resolve({ data: {}, error: null })), })), })), });   ","version":"Next","tagName":"h3"},{"title":"End-to-End Testing with Playwright​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#end-to-end-testing-with-playwright","content":" The starter template includes Playwright 1.40+ for end-to-end testing of user flows:  // e2e/auth.spec.ts import { test, expect } from '@playwright/test'; test.describe('Authentication Flow', () =&gt; { test('user can register', async ({ page }) =&gt; { await page.goto('/register'); // Fill out the registration form await page.fill('input[name=&quot;email&quot;]', 'test@example.com'); await page.fill('input[name=&quot;password&quot;]', 'Password123!'); await page.fill('input[name=&quot;confirmPassword&quot;]', 'Password123!'); // Submit the form await page.click('button[type=&quot;submit&quot;]'); // Verify redirect to dashboard or confirmation page await expect(page).toHaveURL(/dashboard|confirm/); }); test('user can login', async ({ page }) =&gt; { await page.goto('/login'); // Fill out the login form await page.fill('input[name=&quot;email&quot;]', 'test@example.com'); await page.fill('input[name=&quot;password&quot;]', 'Password123!'); // Submit the form await page.click('button[type=&quot;submit&quot;]'); // Verify redirect to dashboard await expect(page).toHaveURL(/dashboard/); }); test('user can logout', async ({ page }) =&gt; { // First log in await page.goto('/login'); await page.fill('input[name=&quot;email&quot;]', 'test@example.com'); await page.fill('input[name=&quot;password&quot;]', 'Password123!'); await page.click('button[type=&quot;submit&quot;]'); await expect(page).toHaveURL(/dashboard/); // Click logout button await page.click('button:has-text(&quot;Logout&quot;)'); // Verify redirect to home page await expect(page).toHaveURL(/\\//); }); });   ","version":"Next","tagName":"h2"},{"title":"Testing Protected Routes​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#testing-protected-routes","content":" The template includes utilities for testing protected routes:  // __tests__/pages/dashboard.test.tsx import { render, screen } from '@testing-library/react'; import { useRouter } from 'next/router'; import Dashboard from '@/app/dashboard/page'; import { useAuth } from '@/contexts/AuthContext'; // Mock the auth hook jest.mock('@/contexts/AuthContext', () =&gt; ({ useAuth: jest.fn(), })); // Mock the router jest.mock('next/navigation', () =&gt; ({ useRouter: jest.fn(), })); describe('Dashboard Page', () =&gt; { it('redirects to login when not authenticated', () =&gt; { const mockPush = jest.fn(); (useRouter as jest.Mock).mockReturnValue({ push: mockPush, }); (useAuth as jest.Mock).mockReturnValue({ user: null, isLoading: false, }); render(&lt;Dashboard /&gt;); expect(mockPush).toHaveBeenCalledWith('/login?redirectedFrom=/dashboard'); }); it('displays dashboard content when authenticated', () =&gt; { (useAuth as jest.Mock).mockReturnValue({ user: { id: 'mock-user-id', email: 'test@example.com' }, isLoading: false, }); render(&lt;Dashboard /&gt;); expect(screen.getByText(/welcome to your dashboard/i)).toBeInTheDocument(); }); });   ","version":"Next","tagName":"h2"},{"title":"Mock Providers​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#mock-providers","content":" The template includes mock providers for testing components that depend on context:  // tests/utils/providers.tsx import { ReactNode } from 'react'; import { AuthContext } from '@/contexts/AuthContext'; interface MockAuthProviderProps { user?: any; isLoading?: boolean; children: ReactNode; } export const MockAuthProvider = ({ user = null, isLoading = false, children }: MockAuthProviderProps) =&gt; { const mockAuthValue = { user, isLoading, session: user ? { user } : null, signUp: jest.fn(), signIn: jest.fn(), signInAnonymously: jest.fn(), signOut: jest.fn(), updateProfile: jest.fn(), }; return ( &lt;AuthContext.Provider value={mockAuthValue}&gt; {children} &lt;/AuthContext.Provider&gt; ); }; // Usage in tests // render( // &lt;MockAuthProvider user={{ id: 'test-id', email: 'test@example.com' }}&gt; // &lt;ComponentToTest /&gt; // &lt;/MockAuthProvider&gt; // );   ","version":"Next","tagName":"h2"},{"title":"Running Tests​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#running-tests","content":" The starter template includes scripts to run different types of tests:  // package.json (excerpt) { &quot;scripts&quot;: { &quot;test&quot;: &quot;jest&quot;, &quot;test:watch&quot;: &quot;jest --watch&quot;, &quot;test:coverage&quot;: &quot;jest --coverage&quot;, &quot;e2e&quot;: &quot;playwright test&quot;, &quot;e2e:ui&quot;: &quot;playwright test --ui&quot; } }   ","version":"Next","tagName":"h2"},{"title":"Test Coverage​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#test-coverage","content":" Jest is configured to generate code coverage reports. Aim for at least 80% coverage for production code:  npm run test:coverage   This generates a detailed coverage report in the coverage directory.  ","version":"Next","tagName":"h2"},{"title":"Testing Best Practices​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#testing-best-practices","content":" Test Behavior, Not Implementation - Focus on what the component does, not how it does it.Mock External Dependencies - Use the provided mock utilities for Supabase and other external services.Test Edge Cases - Include tests for error handling, loading states, and edge cases.Group Tests Logically - Use describe to group related tests.Keep Tests Independent - Each test should be able to run on its own.Use Data-Test Attributes - Use data-testid for stable test selectors.  ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"Testing","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/testing#next-steps","content":" Read the Deployment guide to learn how to deploy the applicationCheck the Contributing documentation for guidelines on contributing to the project ","version":"Next","tagName":"h2"},{"title":"Prettier Configuration and Usage","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Prettier Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier#overview","content":" Version: 3.xIntegration: Works alongside ESLint with eslint-config-prettier to avoid conflicts  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Prettier Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier#configuration","content":" The project potentially uses a .prettierrc.json file for configuration. If not yet created, you can create one with the following default configuration:  { &quot;semi&quot;: true, &quot;singleQuote&quot;: true, &quot;tabWidth&quot;: 2, &quot;printWidth&quot;: 80, &quot;trailingComma&quot;: &quot;es5&quot;, &quot;arrowParens&quot;: &quot;avoid&quot;, &quot;endOfLine&quot;: &quot;lf&quot; }   To customize the Prettier configuration, modify this file or create it if it doesn't exist.  ","version":"Next","tagName":"h2"},{"title":"Default Commands​","type":1,"pageTitle":"Prettier Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier#default-commands","content":" The following npm scripts are available for formatting:  Format all files: Formats all files in the project npm run format Check formatting: Checks if files are formatted correctly without modifying them npm run format:check   ","version":"Next","tagName":"h2"},{"title":"Integration with Git Hooks​","type":1,"pageTitle":"Prettier Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier#integration-with-git-hooks","content":" Prettier is integrated with Git hooks through Husky and lint-staged. When you commit changes, Prettier will automatically format the staged files.  The configuration in package.json:  &quot;lint-staged&quot;: { &quot;*.{js,jsx,ts,tsx,mjs}&quot;: [ &quot;eslint --fix&quot;, &quot;prettier --write&quot; ], &quot;*.{json,css}&quot;: [ &quot;prettier --write&quot; ] }   ","version":"Next","tagName":"h2"},{"title":"Editor Integration​","type":1,"pageTitle":"Prettier Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier#editor-integration","content":" For the best development experience, integrate Prettier with your code editor:  ","version":"Next","tagName":"h2"},{"title":"VS Code​","type":1,"pageTitle":"Prettier Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier#vs-code","content":" Install the Prettier extensionAdd the following configuration to your VS Code settings:  { &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;, &quot;editor.formatOnSave&quot;: true, &quot;prettier.requireConfig&quot;: true }   ","version":"Next","tagName":"h3"},{"title":"Ignoring Files​","type":1,"pageTitle":"Prettier Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier#ignoring-files","content":" To exclude files from formatting, create a .prettierignore file in the project root. Example:  node_modules .next build dist out coverage public   ","version":"Next","tagName":"h2"},{"title":"Customizing Formatting Rules​","type":1,"pageTitle":"Prettier Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier#customizing-formatting-rules","content":" While Prettier is opinionated by design, you can customize certain aspects:  Line Width: Adjust printWidth for longer or shorter linesQuotes: Toggle singleQuote to use double quotes insteadSemicolons: Set semi to false to remove semicolonsTrailing Commas: Configure trailingComma to your preference  ","version":"Next","tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"Prettier Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/prettier#best-practices","content":" Run format checks in CI: Include npm run format:check in your CI workflowFormat on save: Configure your editor to format on saveConsistent configuration: Ensure all team members use the same Prettier configurationAvoid over-customization: The power of Prettier is in its consistency with minimal configuration ","version":"Next","tagName":"h2"},{"title":"Repomix Configuration and Usage","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#overview","content":" Version: Latest (typically used via npx repomix)Purpose: Package the entire repository into an AI-friendly format for use with LLMs like Claude, ChatGPT, and othersKey Features: Converts entire codebase into a single structured documentPreserves directory structureProvides token counting for LLM context limitsSupports multiple output formatsSecurity check to prevent sharing sensitive information Dependencies/Extensions: None required (can be run via npx)  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#installation","content":" Repomix is not directly installed in the project dependencies. Instead, it's typically run using npx:  # Run Repomix with default settings npx repomix # Run with specific options npx repomix --style markdown   If you want to install it globally for repeated use:  # Install globally npm install -g repomix # Then run from anywhere repomix   ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#configuration","content":" The tool is configured using a repomix.config.json file at the project root.  Here's our project's configuration:  { &quot;output&quot;: { &quot;filePath&quot;: &quot;repomix-output.md&quot;, &quot;style&quot;: &quot;markdown&quot;, &quot;parsableStyle&quot;: false, &quot;fileSummary&quot;: true, &quot;directoryStructure&quot;: true, &quot;removeComments&quot;: false, &quot;removeEmptyLines&quot;: false, &quot;compress&quot;: false, &quot;topFilesLength&quot;: 5, &quot;showLineNumbers&quot;: false, &quot;copyToClipboard&quot;: false, &quot;git&quot;: { &quot;sortByChanges&quot;: true, &quot;sortByChangesMaxCommits&quot;: 100 } }, &quot;include&quot;: [], &quot;ignore&quot;: { &quot;useGitignore&quot;: true, &quot;useDefaultPatterns&quot;: true, &quot;customPatterns&quot;: [] }, &quot;security&quot;: { &quot;enableSecurityCheck&quot;: true }, &quot;tokenCount&quot;: { &quot;encoding&quot;: &quot;o200k_base&quot; } }   Key configuration options:  output.filePath: Sets the output file name to repomix-output.mdoutput.style: Configures output in Markdown format (alternatives are XML and plain text)output.fileSummary: Includes a summary section with metadata and token countsoutput.directoryStructure: Includes a section showing folder structureoutput.compress: When set to true, performs code compression to reduce tokens (disabled in our config)tokenCount.encoding: Uses o200k_base encoding for token counting (optimized for Claude models)  Additionally, we have a .repomixignore file that excludes the docs/ directory from the generated output.  ","version":"Next","tagName":"h2"},{"title":"Default Commands​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#default-commands","content":" No custom npm scripts are defined for Repomix in the package.json. Use the following commands directly:  Generate output file: npx repomix Generate with specific options: npx repomix --style markdown --output custom-output.md   ","version":"Next","tagName":"h2"},{"title":"Directory Structure​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#directory-structure","content":" After running Repomix, you'll have one or more output files in your project root:  project/ ├── repomix-output.md # Main output file (defined in config) ├── repomix.config.json # Configuration file └── .repomixignore # Custom ignore patterns   ","version":"Next","tagName":"h2"},{"title":"Usage Examples​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#usage-examples","content":" ","version":"Next","tagName":"h2"},{"title":"Example 1: Basic Usage​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#example-1-basic-usage","content":" Run Repomix to generate a Markdown file containing the entire codebase:  npx repomix   This will create a repomix-output.md file in the project root, formatted according to our configuration.  ","version":"Next","tagName":"h3"},{"title":"Example 2: Generating for AI Analysis​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#example-2-generating-for-ai-analysis","content":" When you need to analyze your code with an AI assistant:  # Generate the output file npx repomix # You can then upload the file to Claude, ChatGPT, etc., with a prompt like: # &quot;This file contains my entire codebase. Please review the code and suggest improvements.&quot;   ","version":"Next","tagName":"h3"},{"title":"Example 3: Custom Output Format​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#example-3-custom-output-format","content":" If you need a different output format temporarily:  # Generate XML output instead of Markdown npx repomix --style xml --output repomix-output.xml   ","version":"Next","tagName":"h3"},{"title":"Integration with Other Tools​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#integration-with-other-tools","content":" ","version":"Next","tagName":"h2"},{"title":"Integration with AI Tools​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#integration-with-ai-tools","content":" The main purpose of Repomix is to prepare your codebase for AI analysis. Upload the generated file to AI tools like:  Claude: Works well with XML format for structured analysisChatGPT: Works with any format, but plain text or Markdown may be preferableGitHub Copilot: Use the file content as context for generating code  Example prompt to use with the generated file:  This file contains my entire codebase in an organized format. I'd like you to [describe specific task, such as]: 1. Review the code structure and suggest improvements 2. Identify potential security issues 3. Suggest performance optimizations 4. Help implement a new feature   ","version":"Next","tagName":"h3"},{"title":"Editor Integration​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#editor-integration","content":" ","version":"Next","tagName":"h2"},{"title":"VS Code​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#vs-code","content":" The Repomix VSCode extension (community-maintained) provides a convenient way to run Repomix:  Install the &quot;Repomix Runner&quot; extension from the marketplaceRight-click on a folder in the explorer and select &quot;Run Repomix&quot;The extension will use your project's repomix.config.json  Extension Name: Repomix Runner Author: Dorian Massoulier Marketplace: https://marketplace.visualstudio.com/items?itemName=DorianMassoulier.repomix-runner   ","version":"Next","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#troubleshooting","content":" ","version":"Next","tagName":"h2"},{"title":"Common Issue 1: Large Repositories Exceed Token Limits​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#common-issue-1-large-repositories-exceed-token-limits","content":" If your repository is large, the generated file might exceed AI model token limits.  Solution:  Add more patterns to .repomixignore to exclude non-essential codeUse the --compress option to reduce token countTarget specific subdirectories with npx repomix path/to/directory  ","version":"Next","tagName":"h3"},{"title":"Common Issue 2: Security Warnings​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#common-issue-2-security-warnings","content":" Repomix may warn about potentially sensitive files.  Solution:  Review the files listed in the warningAdd them to .repomixignore if they contain sensitive informationNever share output files containing credentials or secrets  ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#best-practices","content":" Be Selective: When working with large codebases, focus on relevant directories rather than the entire repositoryUse the Security Check: Always keep security.enableSecurityCheck enabled to prevent leaking sensitive informationVersion Control Exclusion: Add Repomix output files to .gitignore to avoid committing large generated filesCustomize Ignore Patterns: Maintain a thorough .repomixignore file to exclude non-essential files like logs, temp files, and build artifactsChoose the Right Format: Use XML format for Claude (leverages its ability to parse structured data), Markdown for readability, or plain text for simplicity  ","version":"Next","tagName":"h2"},{"title":"Additional Resources​","type":1,"pageTitle":"Repomix Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/repomix#additional-resources","content":" Official DocumentationRepomix WebsiteGitHub RepositoryDiscord Community ","version":"Next","tagName":"h2"},{"title":"Jest Configuration and Usage","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#overview","content":" Version: 29.xEnvironment: jsdom (for simulating browser environment)Extensions: ts-jest: TypeScript support for Jest@testing-library/react: React component testing@testing-library/jest-dom: Custom Jest matchers for DOM testing@testing-library/user-event: Simulating user events  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#configuration","content":" The project should have a Jest configuration file at the project root. If not created yet, you can create a jest.config.js file with the following configuration:  const nextJest = require('next/jest'); const createJestConfig = nextJest({ // Provide the path to your Next.js app dir: './', }); // Add any custom config to be passed to Jest const customJestConfig = { setupFilesAfterEnv: ['&lt;rootDir&gt;/jest.setup.js'], testEnvironment: 'jest-environment-jsdom', moduleNameMapper: { // Handle module aliases '^@/components/(.*)$': '&lt;rootDir&gt;/components/$1', '^@/pages/(.*)$': '&lt;rootDir&gt;/pages/$1', '^@/app/(.*)$': '&lt;rootDir&gt;/app/$1', '^@/lib/(.*)$': '&lt;rootDir&gt;/lib/$1', }, testPathIgnorePatterns: ['&lt;rootDir&gt;/node_modules/', '&lt;rootDir&gt;/.next/'], transform: { // Use ts-jest to handle TypeScript files '^.+\\\\.(ts|tsx)$': 'ts-jest', }, moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'], coveragePathIgnorePatterns: [ '&lt;rootDir&gt;/node_modules/', '&lt;rootDir&gt;/.next/', '&lt;rootDir&gt;/coverage/', ], }; // createJestConfig is exported this way to ensure that next/jest can load the Next.js config module.exports = createJestConfig(customJestConfig);   Additionally, create a jest.setup.js file that imports the testing library extensions:  // jest.setup.js import '@testing-library/jest-dom';   ","version":"Next","tagName":"h2"},{"title":"Default Commands​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#default-commands","content":" The following npm scripts are available for testing:  Run all tests: Runs all test files npm test Watch mode: Runs tests in watch mode, which will rerun tests when files change npm run test:watch Coverage report: Generates a test coverage report npm run test:coverage   ","version":"Next","tagName":"h2"},{"title":"Writing Tests​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#writing-tests","content":" ","version":"Next","tagName":"h2"},{"title":"1. Unit Tests for Utility Functions​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#1-unit-tests-for-utility-functions","content":" Place test files alongside the files they are testing with a .test.ts or .test.tsx extension.  // utils/formatDate.test.ts import { formatDate } from './formatDate'; describe('formatDate', () =&gt; { it('formats date correctly', () =&gt; { const date = new Date('2023-01-01'); expect(formatDate(date)).toBe('01/01/2023'); }); it('handles invalid dates', () =&gt; { expect(formatDate(null)).toBe(''); }); });   ","version":"Next","tagName":"h3"},{"title":"2. Component Testing with React Testing Library​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#2-component-testing-with-react-testing-library","content":" // components/button.test.tsx import React from 'react'; import { render, screen } from '@testing-library/react'; import userEvent from '@testing-library/user-event'; import Button from './button'; describe('Button', () =&gt; { it('renders correctly', () =&gt; { render(&lt;Button&gt;Click me&lt;/Button&gt;); expect(screen.getByRole('button')).toHaveTextContent('Click me'); }); it('calls onClick when clicked', async () =&gt; { const handleClick = jest.fn(); render(&lt;Button onClick={handleClick}&gt;Click me&lt;/Button&gt;); await userEvent.click(screen.getByRole('button')); expect(handleClick).toHaveBeenCalledTimes(1); }); });   ","version":"Next","tagName":"h3"},{"title":"3. Testing Hooks​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#3-testing-hooks","content":" // hooks/useCounter.test.ts import { renderHook, act } from '@testing-library/react'; import useCounter from './useCounter'; describe('useCounter', () =&gt; { it('increments counter', () =&gt; { const { result } = renderHook(() =&gt; useCounter()); act(() =&gt; { result.current.increment(); }); expect(result.current.count).toBe(1); }); });   ","version":"Next","tagName":"h3"},{"title":"Test Directory Structure​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#test-directory-structure","content":" The recommended directory structure for tests:  project/ ├── components/ │ ├── Button.tsx │ └── Button.test.tsx ├── lib/ │ ├── utils.ts │ └── utils.test.ts ├── app/ │ └── __tests__/ │ └── page.test.tsx └── __tests__/ └── integration/ └── form-submission.test.tsx   ","version":"Next","tagName":"h2"},{"title":"Mocking​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#mocking","content":" ","version":"Next","tagName":"h2"},{"title":"Mocking Modules​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#mocking-modules","content":" // Mocking a module jest.mock('next/router', () =&gt; ({ useRouter: () =&gt; ({ push: jest.fn(), pathname: '/', query: {}, }), }));   ","version":"Next","tagName":"h3"},{"title":"Mocking API Calls​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#mocking-api-calls","content":" // Mocking fetch global.fetch = jest.fn(() =&gt; Promise.resolve({ json: () =&gt; Promise.resolve({ data: 'mocked data' }), ok: true, }) ) as jest.Mock;   ","version":"Next","tagName":"h3"},{"title":"Testing Asynchronous Code​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#testing-asynchronous-code","content":" // Testing promises it('fetches data asynchronously', async () =&gt; { const data = await fetchData(); expect(data).toEqual({ success: true }); }); // Testing with waitFor it('updates after async operation', async () =&gt; { render(&lt;AsyncComponent /&gt;); await waitFor(() =&gt; { expect(screen.getByText('Loaded')).toBeInTheDocument(); }); });   ","version":"Next","tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"Jest Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/jest#best-practices","content":" Use Testing Library queries appropriately: Prefer queries that reflect how users interact with your application (getByRole, getByLabelText) over implementation details (getByTestId)Keep tests simple: Each test should verify one specific behaviorAvoid testing implementation details: Focus on testing behavior, not implementationUse the right assertions: Be specific about what you're testingOrganize tests with describe blocks: Group related tests togetherFollow the AAA pattern: Arrange, Act, AssertRun tests in CI: Include tests in your continuous integration workflow ","version":"Next","tagName":"h2"},{"title":"Next.js TS Tailwind Supabase Starter","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#features","content":" Next.js 14 with App Router for efficient page routing and server componentsTypeScript 5.4+ for type safety and enhanced developer experienceTailwindCSS 3.3+ for utility-first stylingSupabase 2.x for authentication and database managementJest 29.x and React Testing Library 14.x for testingESLint 8.x and Prettier 3.x for code quality and formattingComplete authentication system with email/password and anonymous sessionsProtected routes with role-based access controlResponsive UI components built with TailwindCSS  ","version":"Next","tagName":"h2"},{"title":"Quick Start​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#quick-start","content":" ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#prerequisites","content":" Node.js 18.0 or laterGit  ","version":"Next","tagName":"h3"},{"title":"Installation​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#installation","content":" Clone the repository:  git clone https://github.com/matthannigan/nextjs-ts-tailwind-supabase-starter.git cd nextjs-ts-tailwind-supabase-starter   Install dependencies:  npm install   Set up environment variables:  cp .env.example .env.local   Edit .env.local to add your Supabase URL and anon key.  Start the development server:  npm run dev   Your application will be available at http://localhost:3000.  ","version":"Next","tagName":"h3"},{"title":"Documentation​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#documentation","content":" ","version":"Next","tagName":"h2"},{"title":"Developer Guide​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#developer-guide","content":" Project Structure - Learn about the project organizationDatabase Integration - Database schema and operationsAuthentication - Understand the authentication systemTesting - How to test the applicationDeployment - Deployment instructionsTools - Pre-installed developer aidsContributing - Process for contributing bug fixes and feature additionsVersion Reference - List of recommended versions for all tools and libraries  ","version":"Next","tagName":"h3"},{"title":"React Components​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#react-components","content":" Layout - Components for displaying app pagesNavigation - Components for moving between app pagesBasic UI - shadcn UI components already included in projectForms - shadcn Form and Input components already included in projectStyle - Typography and Light/Dark Theme Switcher  ","version":"Next","tagName":"h3"},{"title":"Development Journey​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#development-journey","content":" Blog - in development journal about approach, misteps, and successes building the template  ","version":"Next","tagName":"h3"},{"title":"Release History​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#release-history","content":" ","version":"Next","tagName":"h2"},{"title":"v0.3 - 2025-04-10​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#v03---2025-04-10","content":" Installed shadcn@2.3.0 and essential componentsAdd UI components showcase pageAdded component documentationAdded React unit tests for all componentsAdded jest-html-reporters for generating test reportsRefactored documentation to use Docusaurus  ","version":"Next","tagName":"h3"},{"title":"v0.2.x - 2025-03-17​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#v02x---2025-03-17","content":" Configured testing infrastructureCreated pre-commit hooks for linting and formattingAdded Playwright for end-to-end testingAdded documentation for testing and linting tools  ","version":"Next","tagName":"h3"},{"title":"v0.1 - 2025-03-16​","type":1,"pageTitle":"Next.js TS Tailwind Supabase Starter","url":"/nextjs-ts-tailwind-supabase-starter/#v01---2025-03-16","content":" Initial ReleaseInitialized Next.js projectConfigured styling and lintingSet-up project structureImplemented basic layout components ","version":"Next","tagName":"h3"},{"title":"Version Reference","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference","content":"","keywords":"","version":"Next"},{"title":"Core Framework and Libraries​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#core-framework-and-libraries","content":" Technology\tRecommended Version\tNotesNext.js\t14.2.x\tIntroduces the stable App Router, improved server components, and Turbopack improvements React\t18.3.x\tIncludes concurrent rendering, automatic batching, and Suspense improvements TypeScript\t5.4.x\tIncludes decorators, type-only imports, and the satisfies operator TailwindCSS\t3.3.x\tJIT compilation by default, arbitrary values, and better dark mode support  ","version":"Next","tagName":"h2"},{"title":"Development Tools​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#development-tools","content":" Tool\tRecommended Version\tNotesESLint\t8.x\tBest compatible with modern TypeScript and React Prettier\t3.x\tImproved performance and better handling of TypeScript Jest\t29.x\tBetter TypeScript support and improved performance React Testing Library\t14.x\tCompatible with React 18 Playwright\t1.40+\tReliable end-to-end testing across browsers  ","version":"Next","tagName":"h2"},{"title":"Backend and Data Management​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#backend-and-data-management","content":" Technology\tRecommended Version\tNotesSupabase\t2.x\tStable APIs for auth, database, and storage @supabase/supabase-js\t2.x\tClient library with TypeScript support PostgreSQL\t15.x\tUsed by Supabase under the hood  ","version":"Next","tagName":"h2"},{"title":"Form Management and Validation​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#form-management-and-validation","content":" Library\tRecommended Version\tNotesZod\t3.x\tTypeScript-first schema validation React Hook Form\t7.x\tPerformant form management for React  ","version":"Next","tagName":"h2"},{"title":"UI Components and Styling​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#ui-components-and-styling","content":" Library\tRecommended Version\tNotesshadcn/ui\tLatest as of Oct 2024\tReusable components built on Radix UI Radix UI\t1.x\tAccessible component primitives Lucide React\t0.263.x\tSVG icon components  ","version":"Next","tagName":"h2"},{"title":"Data Fetching and State Management​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#data-fetching-and-state-management","content":" Library\tRecommended Version\tNotesTanStack Query (React Query)\t5.x\tData fetching and caching Zustand\t4.x\tLightweight state management  ","version":"Next","tagName":"h2"},{"title":"Utility Libraries​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#utility-libraries","content":" Library\tRecommended Version\tNotesdate-fns\t2.x\tModern JavaScript date utility library clsx\t2.x\tUtility for constructing className strings lodash\t4.x\tUtility library for common operations  ","version":"Next","tagName":"h2"},{"title":"Authentication Features in Supabase​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#authentication-features-in-supabase","content":" Supabase 2.x offers the following authentication methods:  Email/password authenticationMagic link authenticationOAuth providers (Google, GitHub, etc.)Phone authenticationAnonymous sessionsRow Level Security (RLS) policies  ","version":"Next","tagName":"h2"},{"title":"Realtime Features in Supabase​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#realtime-features-in-supabase","content":" Supabase 2.x Realtime includes:  Broadcast - Simple pub/sub messagingPresence - Track online users and their statesPostgres Changes - Subscribe to database changes  ","version":"Next","tagName":"h2"},{"title":"Special Considerations​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#special-considerations","content":" Next.js App Router: The App Router in Next.js 14 uses a different folder structure than the Pages Router. All routes should be placed in the app/ directory. React Server Components: Next.js 14 uses React Server Components by default. Client components should be marked with &quot;use client&quot; directive. TypeScript Configuration: Configure TypeScript for strict mode to take advantage of all type-checking features. Supabase Authentication: Configure proper session handling and refresh mechanisms. Edge Functions: Supabase provides Edge Functions for serverless logic if needed. Shadcn/UI: These are not installed as a dependency but copied into your project. Follow their documentation for installation.  ","version":"Next","tagName":"h2"},{"title":"Environment Variables​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#environment-variables","content":" For Next.js 14 and Supabase 2.x, the following environment variables are recommended:  # Next.js NEXT_PUBLIC_APP_URL=http://localhost:3000 # Supabase NEXT_PUBLIC_SUPABASE_URL=your-supabase-url NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key SUPABASE_SERVICE_ROLE_KEY=your-service-role-key # Optional for email services EMAIL_SERVER_HOST=smtp.example.com EMAIL_SERVER_PORT=587 EMAIL_SERVER_USER=example_username EMAIL_SERVER_PASSWORD=example_password   ","version":"Next","tagName":"h2"},{"title":"Version Compatibility Matrix​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#version-compatibility-matrix","content":" Next.js\tReact\tTypeScript\tTailwindCSS\tSupabase Client14.0.x\t18.2.x\t5.2.x-5.3.x\t3.3.x\t2.x 13.x\t18.2.x\t5.1.x-5.2.x\t3.3.x\t2.x 12.x\t18.1.x\t4.9.x-5.0.x\t3.0.x-3.2.x\t2.x  ","version":"Next","tagName":"h2"},{"title":"Upgrading Dependencies​","type":1,"pageTitle":"Version Reference","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/version-reference#upgrading-dependencies","content":" When upgrading dependencies, take these steps:  Check the changelog of each package for breaking changesRun tests after each major upgradeUpdate TypeScript types if necessaryTest authentication flows after upgrading SupabaseFollow the Next.js migration guide when upgrading major versions ","version":"Next","tagName":"h2"},{"title":"Playwright Configuration and Usage","type":0,"sectionRef":"#","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#overview","content":" Version: 1.5xCapabilities: Cross-browser testing, mobile viewport testing, visual testing, and moreBrowsers: Chrome, Firefox, WebKit (Safari)  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#configuration","content":" The project should have a Playwright configuration file. If not created yet, you can create a playwright.config.ts file at the project root with the following configuration:  import { defineConfig, devices } from '@playwright/test'; export default defineConfig({ testDir: './e2e-tests', timeout: 30000, forbidOnly: !!process.env.CI, retries: process.env.CI ? 2 : 0, workers: process.env.CI ? 1 : undefined, reporter: 'html', use: { baseURL: 'http://localhost:3000', trace: 'on-first-retry', screenshot: 'only-on-failure', }, projects: [ { name: 'chromium', use: { ...devices['Desktop Chrome'] }, }, { name: 'firefox', use: { ...devices['Desktop Firefox'] }, }, { name: 'webkit', use: { ...devices['Desktop Safari'] }, }, { name: 'Mobile Chrome', use: { ...devices['Pixel 5'] }, }, { name: 'Mobile Safari', use: { ...devices['iPhone 12'] }, }, ], webServer: { command: 'npm run dev', port: 3000, reuseExistingServer: !process.env.CI, }, });   ","version":"Next","tagName":"h2"},{"title":"Setting Up Playwright​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#setting-up-playwright","content":" If not already set up, you can initialize Playwright with:  npx playwright install   This installs required browsers and dependencies.  ","version":"Next","tagName":"h2"},{"title":"Directory Structure​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#directory-structure","content":" Create an e2e-tests directory at the project root with the following structure:  e2e-tests/ ├── fixtures/ # Test data and fixtures ├── helpers/ # Helper functions for tests ├── pages/ # Page object models │ ├── HomePage.ts │ ├── LoginPage.ts │ └── ... └── specs/ # Test specifications ├── auth.spec.ts ├── navigation.spec.ts └── ...   ","version":"Next","tagName":"h2"},{"title":"Writing Tests​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#writing-tests","content":" ","version":"Next","tagName":"h2"},{"title":"1. Basic Test​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#1-basic-test","content":" // e2e-tests/specs/home.spec.ts import { test, expect } from '@playwright/test'; test('homepage has title and links', async ({ page }) =&gt; { await page.goto('/'); // Verify title await expect(page).toHaveTitle(/Next.js Starter/); // Check for navigation links await expect(page.getByRole('link', { name: 'Dashboard' })).toBeVisible(); await expect(page.getByRole('link', { name: 'Login' })).toBeVisible(); });   ","version":"Next","tagName":"h3"},{"title":"2. Using Page Object Model Pattern​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#2-using-page-object-model-pattern","content":" Create page object models to encapsulate page interactions:  // e2e-tests/pages/LoginPage.ts import { Page, Locator } from '@playwright/test'; export class LoginPage { readonly page: Page; readonly emailInput: Locator; readonly passwordInput: Locator; readonly loginButton: Locator; constructor(page: Page) { this.page = page; this.emailInput = page.getByLabel('Email'); this.passwordInput = page.getByLabel('Password'); this.loginButton = page.getByRole('button', { name: 'Login' }); } async goto() { await this.page.goto('/login'); } async login(email: string, password: string) { await this.emailInput.fill(email); await this.passwordInput.fill(password); await this.loginButton.click(); } } // Use in test // e2e-tests/specs/auth.spec.ts import { test, expect } from '@playwright/test'; import { LoginPage } from '../pages/LoginPage'; test('user can login', async ({ page }) =&gt; { const loginPage = new LoginPage(page); await loginPage.goto(); await loginPage.login('test@example.com', 'password123'); // Verify successful login await expect(page.getByText('Welcome back')).toBeVisible(); });   ","version":"Next","tagName":"h3"},{"title":"3. Testing API and UI Together​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#3-testing-api-and-ui-together","content":" // e2e-tests/specs/profile.spec.ts import { test, expect } from '@playwright/test'; test('user can update profile', async ({ page, request }) =&gt; { // Login via API for speed const loginResponse = await request.post('/api/auth/login', { data: { email: 'test@example.com', password: 'password123' } }); // Extract cookies from response const cookies = loginResponse.headers()['set-cookie']; if (cookies) { await page.context().addCookies( cookies.map(c =&gt; { const [name, value] = c.split('='); return { name, value, domain: 'localhost', path: '/' }; }) ); } // Navigate to profile page await page.goto('/profile'); // Update profile await page.getByLabel('Display Name').fill('Updated Name'); await page.getByRole('button', { name: 'Save Changes' }).click(); // Verify success message await expect(page.getByText('Profile updated successfully')).toBeVisible(); // Verify data was actually updated await page.reload(); await expect(page.getByLabel('Display Name')).toHaveValue('Updated Name'); });   ","version":"Next","tagName":"h3"},{"title":"Running Tests​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#running-tests","content":" Add the following scripts to your package.json:  &quot;scripts&quot;: { &quot;test:e2e&quot;: &quot;playwright test&quot;, &quot;test:e2e:ui&quot;: &quot;playwright test --ui&quot;, &quot;test:e2e:debug&quot;: &quot;playwright test --debug&quot;, &quot;test:e2e:report&quot;: &quot;playwright show-report&quot; }   Default commands:  Run all tests: Run all Playwright tests headlessly npm run test:e2e Run with UI mode: Run tests with the UI mode for debugging npm run test:e2e:ui Debug tests: Run tests in debug mode with browser window npm run test:e2e:debug Show report: Open the HTML report after tests complete npm run test:e2e:report   ","version":"Next","tagName":"h2"},{"title":"Visual Testing​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#visual-testing","content":" Playwright supports visual comparison testing:  // e2e-tests/specs/visual.spec.ts import { test, expect } from '@playwright/test'; test('homepage visual regression', async ({ page }) =&gt; { await page.goto('/'); // Take a screenshot and compare with baseline await expect(page).toHaveScreenshot('homepage.png', { maxDiffPixelRatio: 0.01 }); });   To update snapshots when UI changes:  npx playwright test --update-snapshots   ","version":"Next","tagName":"h2"},{"title":"Authentication Helpers​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#authentication-helpers","content":" Create helpers for common authentication scenarios:  // e2e-tests/helpers/auth.ts import { Page, APIRequestContext } from '@playwright/test'; export async function loginViaApi(request: APIRequestContext, page: Page) { const response = await request.post('/api/auth/login', { data: { email: 'test@example.com', password: 'password123' } }); // Store authentication state await page.context().storageState({ path: './e2e-tests/fixtures/auth-state.json' }); return response; } // Use in tests // e2e-tests/specs/protected-page.spec.ts import { test } from '@playwright/test'; import { loginViaApi } from '../helpers/auth'; test.beforeEach(async ({ page, request }) =&gt; { await loginViaApi(request, page); }); test('authenticated user can access protected page', async ({ page }) =&gt; { await page.goto('/dashboard'); // Test protected content });   ","version":"Next","tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"Playwright Configuration and Usage","url":"/nextjs-ts-tailwind-supabase-starter/developer-guide/tools/playwright#best-practices","content":" Use data-testid attributes: Add data-testid attributes to elements for stable selectorsIsolate tests: Make tests independent of each otherClean up after tests: Reset state between tests, especially database stateUse API for setup: Set up test data via API calls rather than UI interactions when possibleRun in CI: Include Playwright tests in your CI workflowWait for right events: Use proper waiting mechanisms instead of arbitrary delaysUse the Page Object Model: Encapsulate page interactions in page objectsTake screenshots for debugging: Use screenshots to debug test failures ","version":"Next","tagName":"h2"}],"options":{"languages":["en"],"indexBaseUrl":true,"id":"default"}}