<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Next.js TS Tailwind Supabase Starter Blog</title>
        <link>https://matthannigan.github.io/nextjs-ts-tailwind-supabase-starter/blog</link>
        <description>Next.js TS Tailwind Supabase Starter Blog</description>
        <lastBuildDate>Wed, 26 Mar 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Unit Testing]]></title>
            <link>https://matthannigan.github.io/nextjs-ts-tailwind-supabase-starter/blog/2025/03/26/unit-testing</link>
            <guid>https://matthannigan.github.io/nextjs-ts-tailwind-supabase-starter/blog/2025/03/26/unit-testing</guid>
            <pubDate>Wed, 26 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Asked Gemini Deep Resarch to create report]]></description>
            <content:encoded><![CDATA[<p>Asked Gemini Deep Resarch to create report</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Help me understand React unit testing. What is its role in test-driven development? How has its approach and tools changed over the years for React developers? How do I construct good React component tests? How can I make sure when debugging tests that I’m not “teaching to the test”—making edits to the test simply based on knowledge of the component code? How does unit testing fit into other good practices like linting and automated end-to-end testing. What are some good resources if I want to further develop my knowledge in this area?</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>Testing</category>
        </item>
        <item>
            <title><![CDATA[Discovered Docusaurus]]></title>
            <link>https://matthannigan.github.io/nextjs-ts-tailwind-supabase-starter/blog/2025/03/25/discovered-docusaurus</link>
            <guid>https://matthannigan.github.io/nextjs-ts-tailwind-supabase-starter/blog/2025/03/25/discovered-docusaurus</guid>
            <pubDate>Tue, 25 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Was having too many problems deploying to Github Pages with plain Jekyll because]]></description>
            <content:encoded><![CDATA[<p>Was having too many problems deploying to Github Pages with plain Jekyll because
React component code examples were trying to be processed by Liquid.</p>
<p>Searched and found Docusaurus as a more contemporary alternative.</p>
<p>Converted old <code>/docs</code> folder in repo to subfolder of new <code>docs-website</code>.</p>]]></content:encoded>
            <category>Documentation</category>
        </item>
    </channel>
</rss>